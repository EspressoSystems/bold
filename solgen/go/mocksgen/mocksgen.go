// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mocksgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BinaryMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type BinaryMerkleProof struct {
	SideNodes [][32]byte
	Key       *big.Int
	NumLeaves *big.Int
}

// ChallengeLibChallenge is an auto generated low-level Go binding around an user-defined struct.
type ChallengeLibChallenge struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}

// ChallengeLibParticipant is an auto generated low-level Go binding around an user-defined struct.
type ChallengeLibParticipant struct {
	Addr     common.Address
	TimeLeft *big.Int
}

// ChallengeLibSegmentSelection is an auto generated low-level Go binding around an user-defined struct.
type ChallengeLibSegmentSelection struct {
	OldSegmentsStart  *big.Int
	OldSegmentsLength *big.Int
	OldSegments       [][32]byte
	ChallengePosition *big.Int
}

// DataRootTuple is an auto generated low-level Go binding around an user-defined struct.
type DataRootTuple struct {
	Height   *big.Int
	DataRoot [32]byte
}

// ExecutionContext is an auto generated low-level Go binding around an user-defined struct.
type ExecutionContext struct {
	MaxInboxMessagesRead *big.Int
	Bridge               common.Address
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IBridgeTimeBounds is an auto generated low-level Go binding around an user-defined struct.
type IBridgeTimeBounds struct {
	MinTimestamp   uint64
	MaxTimestamp   uint64
	MinBlockNumber uint64
	MaxBlockNumber uint64
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   *big.Int
	FutureBlocks  *big.Int
	DelaySeconds  *big.Int
	FutureSeconds *big.Int
}

// Instruction is an auto generated low-level Go binding around an user-defined struct.
type Instruction struct {
	Opcode       uint16
	ArgumentData *big.Int
}

// Machine is an auto generated low-level Go binding around an user-defined struct.
type Machine struct {
	Status          uint8
	ValueStack      ValueStack
	ValueMultiStack MultiStack
	InternalStack   ValueStack
	FrameStack      StackFrameWindow
	FrameMultiStack MultiStack
	GlobalStateHash [32]byte
	ModuleIdx       uint32
	FunctionIdx     uint32
	FunctionPc      uint32
	RecoveryPc      [32]byte
	ModulesRoot     [32]byte
}

// Module is an auto generated low-level Go binding around an user-defined struct.
type Module struct {
	GlobalsMerkleRoot   [32]byte
	ModuleMemory        ModuleMemory
	TablesMerkleRoot    [32]byte
	FunctionsMerkleRoot [32]byte
	ExtraHash           [32]byte
	InternalsOffset     uint32
}

// ModuleMemory is an auto generated low-level Go binding around an user-defined struct.
type ModuleMemory struct {
	Size       uint64
	MaxSize    uint64
	MerkleRoot [32]byte
}

// MultiStack is an auto generated low-level Go binding around an user-defined struct.
type MultiStack struct {
	InactiveStackHash [32]byte
	RemainingHash     [32]byte
}

// StackFrame is an auto generated low-level Go binding around an user-defined struct.
type StackFrame struct {
	ReturnPc              Value
	LocalsMerkleRoot      [32]byte
	CallerModule          uint32
	CallerModuleInternals uint32
}

// StackFrameWindow is an auto generated low-level Go binding around an user-defined struct.
type StackFrameWindow struct {
	Proved        []StackFrame
	RemainingHash [32]byte
}

// Value is an auto generated low-level Go binding around an user-defined struct.
type Value struct {
	ValueType uint8
	Contents  *big.Int
}

// ValueArray is an auto generated low-level Go binding around an user-defined struct.
type ValueArray struct {
	Inner []Value
}

// ValueStack is an auto generated low-level Go binding around an user-defined struct.
type ValueStack struct {
	Proved        ValueArray
	RemainingHash [32]byte
}

// BenchmarksMetaData contains all meta data concerning the Benchmarks contract.
var BenchmarksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"fillBlockAdd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockMulMod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockQuickStep\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBlockRecover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x6080806040523460155761027d908161001b8239f35b600080fdfe60406080815260048036101561001457600080fd5b600090813560e01c80630b39d8e514610128578063142ddcf9146101025780636488e930146100c9578063ea01a66f146100b45763fb721c181461005757600080fd5b816003193601126100b0576000805160206102088339815191525b8351602080820192835281528085016001600160401b0381118282101761009d578552519020610072565b634e487b7160e01b855260418452602485fd5b5080fd5b82806003193601126100c6575b6100c1565b80fd5b82806003193601126100c6576000805160206102088339815191525b6000805160206102288339815191526401000003d01991096100e5565b82806003193601126100c65760008051602061020883398151915280915b018190610120565b5090806003193601126100c6575b6080835160008051602061020883398151915281528260209282601b8580950152600080516020610228833981519152888201527f5fdbcefe2675e96219cdae57a7894280bf80fd40d44ce146a35e169ea6a78fd3606082015282805260015afa156101fb5781516001600160a01b031673361594f5429d23ece0a88e4fbe529e1c49d524d719016101c85750610136565b9050606492519162461bcd60e51b8352820152600e60248201526d15d493d391d7d05490925390555560921b6044820152fd5b508251903d90823e3d90fdfeeddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d4367786c6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029fa26469706673582212203347c8ac48b867c7a2002af2b455628a12a00362a0a1a94680b7c0a5e00c022b64736f6c63430008190033",
}

// BenchmarksABI is the input ABI used to generate the binding from.
// Deprecated: Use BenchmarksMetaData.ABI instead.
var BenchmarksABI = BenchmarksMetaData.ABI

// BenchmarksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BenchmarksMetaData.Bin instead.
var BenchmarksBin = BenchmarksMetaData.Bin

// DeployBenchmarks deploys a new Ethereum contract, binding an instance of Benchmarks to it.
func DeployBenchmarks(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Benchmarks, error) {
	parsed, err := BenchmarksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BenchmarksBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Benchmarks{BenchmarksCaller: BenchmarksCaller{contract: contract}, BenchmarksTransactor: BenchmarksTransactor{contract: contract}, BenchmarksFilterer: BenchmarksFilterer{contract: contract}}, nil
}

// Benchmarks is an auto generated Go binding around an Ethereum contract.
type Benchmarks struct {
	BenchmarksCaller     // Read-only binding to the contract
	BenchmarksTransactor // Write-only binding to the contract
	BenchmarksFilterer   // Log filterer for contract events
}

// BenchmarksCaller is an auto generated read-only Go binding around an Ethereum contract.
type BenchmarksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BenchmarksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BenchmarksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BenchmarksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BenchmarksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BenchmarksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BenchmarksSession struct {
	Contract     *Benchmarks       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BenchmarksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BenchmarksCallerSession struct {
	Contract *BenchmarksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BenchmarksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BenchmarksTransactorSession struct {
	Contract     *BenchmarksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BenchmarksRaw is an auto generated low-level Go binding around an Ethereum contract.
type BenchmarksRaw struct {
	Contract *Benchmarks // Generic contract binding to access the raw methods on
}

// BenchmarksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BenchmarksCallerRaw struct {
	Contract *BenchmarksCaller // Generic read-only contract binding to access the raw methods on
}

// BenchmarksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BenchmarksTransactorRaw struct {
	Contract *BenchmarksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBenchmarks creates a new instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarks(address common.Address, backend bind.ContractBackend) (*Benchmarks, error) {
	contract, err := bindBenchmarks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Benchmarks{BenchmarksCaller: BenchmarksCaller{contract: contract}, BenchmarksTransactor: BenchmarksTransactor{contract: contract}, BenchmarksFilterer: BenchmarksFilterer{contract: contract}}, nil
}

// NewBenchmarksCaller creates a new read-only instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarksCaller(address common.Address, caller bind.ContractCaller) (*BenchmarksCaller, error) {
	contract, err := bindBenchmarks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BenchmarksCaller{contract: contract}, nil
}

// NewBenchmarksTransactor creates a new write-only instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarksTransactor(address common.Address, transactor bind.ContractTransactor) (*BenchmarksTransactor, error) {
	contract, err := bindBenchmarks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BenchmarksTransactor{contract: contract}, nil
}

// NewBenchmarksFilterer creates a new log filterer instance of Benchmarks, bound to a specific deployed contract.
func NewBenchmarksFilterer(address common.Address, filterer bind.ContractFilterer) (*BenchmarksFilterer, error) {
	contract, err := bindBenchmarks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BenchmarksFilterer{contract: contract}, nil
}

// bindBenchmarks binds a generic wrapper to an already deployed contract.
func bindBenchmarks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BenchmarksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Benchmarks *BenchmarksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Benchmarks.Contract.BenchmarksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Benchmarks *BenchmarksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.Contract.BenchmarksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Benchmarks *BenchmarksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Benchmarks.Contract.BenchmarksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Benchmarks *BenchmarksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Benchmarks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Benchmarks *BenchmarksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Benchmarks *BenchmarksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Benchmarks.Contract.contract.Transact(opts, method, params...)
}

// FillBlockAdd is a paid mutator transaction binding the contract method 0x142ddcf9.
//
// Solidity: function fillBlockAdd() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockAdd(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockAdd")
}

// FillBlockAdd is a paid mutator transaction binding the contract method 0x142ddcf9.
//
// Solidity: function fillBlockAdd() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockAdd() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockAdd(&_Benchmarks.TransactOpts)
}

// FillBlockAdd is a paid mutator transaction binding the contract method 0x142ddcf9.
//
// Solidity: function fillBlockAdd() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockAdd() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockAdd(&_Benchmarks.TransactOpts)
}

// FillBlockHash is a paid mutator transaction binding the contract method 0xfb721c18.
//
// Solidity: function fillBlockHash() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockHash(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockHash")
}

// FillBlockHash is a paid mutator transaction binding the contract method 0xfb721c18.
//
// Solidity: function fillBlockHash() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockHash() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockHash(&_Benchmarks.TransactOpts)
}

// FillBlockHash is a paid mutator transaction binding the contract method 0xfb721c18.
//
// Solidity: function fillBlockHash() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockHash() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockHash(&_Benchmarks.TransactOpts)
}

// FillBlockMulMod is a paid mutator transaction binding the contract method 0x6488e930.
//
// Solidity: function fillBlockMulMod() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockMulMod(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockMulMod")
}

// FillBlockMulMod is a paid mutator transaction binding the contract method 0x6488e930.
//
// Solidity: function fillBlockMulMod() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockMulMod() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockMulMod(&_Benchmarks.TransactOpts)
}

// FillBlockMulMod is a paid mutator transaction binding the contract method 0x6488e930.
//
// Solidity: function fillBlockMulMod() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockMulMod() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockMulMod(&_Benchmarks.TransactOpts)
}

// FillBlockQuickStep is a paid mutator transaction binding the contract method 0xea01a66f.
//
// Solidity: function fillBlockQuickStep() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockQuickStep(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockQuickStep")
}

// FillBlockQuickStep is a paid mutator transaction binding the contract method 0xea01a66f.
//
// Solidity: function fillBlockQuickStep() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockQuickStep() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockQuickStep(&_Benchmarks.TransactOpts)
}

// FillBlockQuickStep is a paid mutator transaction binding the contract method 0xea01a66f.
//
// Solidity: function fillBlockQuickStep() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockQuickStep() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockQuickStep(&_Benchmarks.TransactOpts)
}

// FillBlockRecover is a paid mutator transaction binding the contract method 0x0b39d8e5.
//
// Solidity: function fillBlockRecover() payable returns()
func (_Benchmarks *BenchmarksTransactor) FillBlockRecover(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Benchmarks.contract.Transact(opts, "fillBlockRecover")
}

// FillBlockRecover is a paid mutator transaction binding the contract method 0x0b39d8e5.
//
// Solidity: function fillBlockRecover() payable returns()
func (_Benchmarks *BenchmarksSession) FillBlockRecover() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockRecover(&_Benchmarks.TransactOpts)
}

// FillBlockRecover is a paid mutator transaction binding the contract method 0x0b39d8e5.
//
// Solidity: function fillBlockRecover() payable returns()
func (_Benchmarks *BenchmarksTransactorSession) FillBlockRecover() (*types.Transaction, error) {
	return _Benchmarks.Contract.FillBlockRecover(&_Benchmarks.TransactOpts)
}

// BridgeStubMetaData contains all meta data concerning the BridgeStub contract.
var BridgeStubMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"BadSequencerMessageNumber\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"BridgeCallTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"InboxToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beforeInboxAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageDataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFeeL1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"MessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OutboxToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"RollupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSequencerInbox\",\"type\":\"address\"}],\"name\":\"SequencerInboxUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptFundsFromOldBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeOutbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedDelayedInboxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"name\":\"allowedDelayedInboxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedOutboxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedOutboxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delayedInboxAccs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageDataHash\",\"type\":\"bytes32\"}],\"name\":\"enqueueDelayedMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"}],\"name\":\"enqueueSequencerMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seqMessageIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"beforeAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"delayedAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"acc\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencerInboxAccs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerReportedSubMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"batchPoster\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"submitBatchSpendingReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610b14908161001b8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826284120c146107d45750816316bf5579146107a9578163413b35bd1461078957816347fb24c51461076e5781634f61f8501461070b5781635fca4a16146106ec5781637a88b107146106c757816386598a56146105465781638db5993b146103a0578163919cc70614610258578163945e1147146103445781639e5d4c49146102ec578163ab5d8943146102c3578163ad48cb5e1461029e578163ae60bd131461025d578163c4d66de814610258578163cb23bcb514610243578163cee3d7281461022d578163d5719dc2146101f5578163e1758bd8146101cc578163e76f5c8d1461018b578163e77145f414610179578163eca067ad14610157575063ee35f3271461012c57600080fd5b3461015357816003193601126101535760065490516001600160a01b039091168152602090f35b5080fd5b90503461017557826003193601126101755760209250549051908152f35b8280fd5b83806003193601126101885780f35b80fd5b90503461017557602036600319011261017557359160015483101561018857506101b660209261083c565b905491519160018060a01b039160031b1c168152f35b50503461015357816003193601126101535760085490516001600160a01b039091168152602090f35b8284346101885760203660031901126101885782359254831015610188575061021f602092610821565b91905490519160031b1c8152f35b83346101885761023c36610872565b50506108c9565b83346101885780600319360112156108c95780fd5b6108a1565b5050346101535760203660031901126101535760209160ff9060019083906001600160a01b0361028b610857565b1681528086522001541690519015158152f35b50503461015357816003193601126101535760209060ff60085460a01c169051908152f35b50503461015357816003193601126101535760035490516001600160a01b039091168152602090f35b83903461015357606036600319011261015357610307610857565b50604435906001600160401b03908183116103405736602384011215610340578201359081116101755736910160240111156108c95780fd5b8380fd5b90503461017557602036600319011261017557356002548110156101755760029092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091015490516001600160a01b039091168152602090f35b919050606036600319011261017557813560ff8116036101755760249283356001600160a01b03811603610188573381528060205260ff6001838320015416156105135782549282516020810183815283602183015283603583015283603d83015283604583015283606583015260443560858301526085825260c082019160018060401b0392818110848211176105015786525190208391866104cb575b85519160208301938452868301528582526060820190828210908211176104b957855251902091600160401b8510156104a85750602094506001840190556104a061048984610821565b819391549060031b91821b91600019901b19161790565b905551908152f35b60418692634e487b7160e01b835252fd5b634e487b7160e01b8552604184528785fd5b915060001986018681116104ef576104e290610821565b90549060031b1c9161043f565b634e487b7160e01b8552601184528785fd5b634e487b7160e01b8652604185528886fd5b506064926020600e92519362461bcd60e51b85528401528201526d09c9ea8be8ca49e9abe929c849eb60931b6044820152fd5b905034610175576080366003190112610175576024928335926044359180809360075481811415806106be575b806106b5575b61069a5750506064356007556005549586610664575b8061062c575b508251602081018381528635828601526060808301879052825290608081016001600160401b0381118282101761061a57855251902094600160401b8710156106085750506080955060018501600555836105f2610489876107f0565b9055815194855260208501528301526060820152f35b634e487b7160e01b8252604190528690fd5b634e487b7160e01b8452604188528984fd5b90935060001981019081116106525761064490610821565b90549060031b1c9238610595565b634e487b7160e01b8452601185528684fd5b915060001986018681116106885761067b906107f0565b90549060031b1c9161058f565b634e487b7160e01b8252601186528782fd5b60449189889287519363e2051feb60e01b8552840152820152fd5b50801515610579565b50811515610573565b505034610153578060031936011261015357906020916106e5610857565b5051908152f35b5050346101535781600319360112610153576020906007549051908152f35b505034610153576020366003190112610153577f8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a906020906001600160a01b03610753610857565b16908160018060a01b0319600654161760065551908152a180f35b83346101885761078661078036610872565b9061091d565b80f35b8334610188576020366003190112610188576107a3610857565b506108c9565b905034610175576020366003190112610175573591600554831015610188575061021f6020926107f0565b8490346101535781600319360112610153576020906005548152f35b60055481101561080b57600560005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60045481101561080b57600460005260206000200190600090565b60015481101561080b57600160005260206000200190600090565b600435906001600160a01b038216820361086d57565b600080fd5b604090600319011261086d576004356001600160a01b038116810361086d5790602435801515810361086d5790565b3461086d57602036600319011261086d576004356001600160a01b038116146108c957600080fd5b60405162461bcd60e51b815260206004820152600f60248201526e1393d517d253541311535153951151608a1b6044820152606490fd5b919060018060a01b038084549260031b9316831b921b1916179055565b9060018060a01b039081831660009281845260209084825260409081862060019560ff8783015416845190877f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf5218885151594858152a2151514610ad35715610a1b5750508354815192908383016001600160401b03811185821017610a0757918791849388969552845280840195858752825252852090518155019051151560ff80198354169116179055805491600160401b8310156109f3575081816109eb926109f1959401905561083c565b90610900565b565b634e487b7160e01b81526041600452602490fd5b634e487b7160e01b88526041600452602488fd5b90919480969750939293549060001991828101908111610abf57610a41610a5c9161083c565b905485610a4e855461083c565b92909360031b1c1691610900565b5482610a678261083c565b90549060031b1c1688528785528588205585548015610aab5787949392910190610a908261083c565b909182549160031b1b19169055855582525282208281550155565b634e487b7160e01b88526031600452602488fd5b634e487b7160e01b89526011600452602489fd5b50505050505050505056fea2646970667358221220f7614853928822d1a3e69d5f12ae70988eb338ea61507581199c239d60cd4c2a64736f6c63430008190033",
}

// BridgeStubABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeStubMetaData.ABI instead.
var BridgeStubABI = BridgeStubMetaData.ABI

// BridgeStubBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeStubMetaData.Bin instead.
var BridgeStubBin = BridgeStubMetaData.Bin

// DeployBridgeStub deploys a new Ethereum contract, binding an instance of BridgeStub to it.
func DeployBridgeStub(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeStub, error) {
	parsed, err := BridgeStubMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeStubBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeStub{BridgeStubCaller: BridgeStubCaller{contract: contract}, BridgeStubTransactor: BridgeStubTransactor{contract: contract}, BridgeStubFilterer: BridgeStubFilterer{contract: contract}}, nil
}

// BridgeStub is an auto generated Go binding around an Ethereum contract.
type BridgeStub struct {
	BridgeStubCaller     // Read-only binding to the contract
	BridgeStubTransactor // Write-only binding to the contract
	BridgeStubFilterer   // Log filterer for contract events
}

// BridgeStubCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeStubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeStubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeStubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeStubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeStubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeStubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeStubSession struct {
	Contract     *BridgeStub       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeStubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeStubCallerSession struct {
	Contract *BridgeStubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BridgeStubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeStubTransactorSession struct {
	Contract     *BridgeStubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BridgeStubRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeStubRaw struct {
	Contract *BridgeStub // Generic contract binding to access the raw methods on
}

// BridgeStubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeStubCallerRaw struct {
	Contract *BridgeStubCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeStubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeStubTransactorRaw struct {
	Contract *BridgeStubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeStub creates a new instance of BridgeStub, bound to a specific deployed contract.
func NewBridgeStub(address common.Address, backend bind.ContractBackend) (*BridgeStub, error) {
	contract, err := bindBridgeStub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeStub{BridgeStubCaller: BridgeStubCaller{contract: contract}, BridgeStubTransactor: BridgeStubTransactor{contract: contract}, BridgeStubFilterer: BridgeStubFilterer{contract: contract}}, nil
}

// NewBridgeStubCaller creates a new read-only instance of BridgeStub, bound to a specific deployed contract.
func NewBridgeStubCaller(address common.Address, caller bind.ContractCaller) (*BridgeStubCaller, error) {
	contract, err := bindBridgeStub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeStubCaller{contract: contract}, nil
}

// NewBridgeStubTransactor creates a new write-only instance of BridgeStub, bound to a specific deployed contract.
func NewBridgeStubTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeStubTransactor, error) {
	contract, err := bindBridgeStub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeStubTransactor{contract: contract}, nil
}

// NewBridgeStubFilterer creates a new log filterer instance of BridgeStub, bound to a specific deployed contract.
func NewBridgeStubFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeStubFilterer, error) {
	contract, err := bindBridgeStub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeStubFilterer{contract: contract}, nil
}

// bindBridgeStub binds a generic wrapper to an already deployed contract.
func bindBridgeStub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeStubMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeStub *BridgeStubRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeStub.Contract.BridgeStubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeStub *BridgeStubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeStub.Contract.BridgeStubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeStub *BridgeStubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeStub.Contract.BridgeStubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeStub *BridgeStubCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeStub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeStub *BridgeStubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeStub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeStub *BridgeStubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeStub.Contract.contract.Transact(opts, method, params...)
}

// ActiveOutbox is a free data retrieval call binding the contract method 0xab5d8943.
//
// Solidity: function activeOutbox() view returns(address)
func (_BridgeStub *BridgeStubCaller) ActiveOutbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "activeOutbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ActiveOutbox is a free data retrieval call binding the contract method 0xab5d8943.
//
// Solidity: function activeOutbox() view returns(address)
func (_BridgeStub *BridgeStubSession) ActiveOutbox() (common.Address, error) {
	return _BridgeStub.Contract.ActiveOutbox(&_BridgeStub.CallOpts)
}

// ActiveOutbox is a free data retrieval call binding the contract method 0xab5d8943.
//
// Solidity: function activeOutbox() view returns(address)
func (_BridgeStub *BridgeStubCallerSession) ActiveOutbox() (common.Address, error) {
	return _BridgeStub.Contract.ActiveOutbox(&_BridgeStub.CallOpts)
}

// AllowedDelayedInboxList is a free data retrieval call binding the contract method 0xe76f5c8d.
//
// Solidity: function allowedDelayedInboxList(uint256 ) view returns(address)
func (_BridgeStub *BridgeStubCaller) AllowedDelayedInboxList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "allowedDelayedInboxList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedDelayedInboxList is a free data retrieval call binding the contract method 0xe76f5c8d.
//
// Solidity: function allowedDelayedInboxList(uint256 ) view returns(address)
func (_BridgeStub *BridgeStubSession) AllowedDelayedInboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeStub.Contract.AllowedDelayedInboxList(&_BridgeStub.CallOpts, arg0)
}

// AllowedDelayedInboxList is a free data retrieval call binding the contract method 0xe76f5c8d.
//
// Solidity: function allowedDelayedInboxList(uint256 ) view returns(address)
func (_BridgeStub *BridgeStubCallerSession) AllowedDelayedInboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeStub.Contract.AllowedDelayedInboxList(&_BridgeStub.CallOpts, arg0)
}

// AllowedDelayedInboxes is a free data retrieval call binding the contract method 0xae60bd13.
//
// Solidity: function allowedDelayedInboxes(address inbox) view returns(bool)
func (_BridgeStub *BridgeStubCaller) AllowedDelayedInboxes(opts *bind.CallOpts, inbox common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "allowedDelayedInboxes", inbox)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedDelayedInboxes is a free data retrieval call binding the contract method 0xae60bd13.
//
// Solidity: function allowedDelayedInboxes(address inbox) view returns(bool)
func (_BridgeStub *BridgeStubSession) AllowedDelayedInboxes(inbox common.Address) (bool, error) {
	return _BridgeStub.Contract.AllowedDelayedInboxes(&_BridgeStub.CallOpts, inbox)
}

// AllowedDelayedInboxes is a free data retrieval call binding the contract method 0xae60bd13.
//
// Solidity: function allowedDelayedInboxes(address inbox) view returns(bool)
func (_BridgeStub *BridgeStubCallerSession) AllowedDelayedInboxes(inbox common.Address) (bool, error) {
	return _BridgeStub.Contract.AllowedDelayedInboxes(&_BridgeStub.CallOpts, inbox)
}

// AllowedOutboxList is a free data retrieval call binding the contract method 0x945e1147.
//
// Solidity: function allowedOutboxList(uint256 ) view returns(address)
func (_BridgeStub *BridgeStubCaller) AllowedOutboxList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "allowedOutboxList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedOutboxList is a free data retrieval call binding the contract method 0x945e1147.
//
// Solidity: function allowedOutboxList(uint256 ) view returns(address)
func (_BridgeStub *BridgeStubSession) AllowedOutboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeStub.Contract.AllowedOutboxList(&_BridgeStub.CallOpts, arg0)
}

// AllowedOutboxList is a free data retrieval call binding the contract method 0x945e1147.
//
// Solidity: function allowedOutboxList(uint256 ) view returns(address)
func (_BridgeStub *BridgeStubCallerSession) AllowedOutboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeStub.Contract.AllowedOutboxList(&_BridgeStub.CallOpts, arg0)
}

// AllowedOutboxes is a free data retrieval call binding the contract method 0x413b35bd.
//
// Solidity: function allowedOutboxes(address ) pure returns(bool)
func (_BridgeStub *BridgeStubCaller) AllowedOutboxes(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "allowedOutboxes", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedOutboxes is a free data retrieval call binding the contract method 0x413b35bd.
//
// Solidity: function allowedOutboxes(address ) pure returns(bool)
func (_BridgeStub *BridgeStubSession) AllowedOutboxes(arg0 common.Address) (bool, error) {
	return _BridgeStub.Contract.AllowedOutboxes(&_BridgeStub.CallOpts, arg0)
}

// AllowedOutboxes is a free data retrieval call binding the contract method 0x413b35bd.
//
// Solidity: function allowedOutboxes(address ) pure returns(bool)
func (_BridgeStub *BridgeStubCallerSession) AllowedOutboxes(arg0 common.Address) (bool, error) {
	return _BridgeStub.Contract.AllowedOutboxes(&_BridgeStub.CallOpts, arg0)
}

// DelayedInboxAccs is a free data retrieval call binding the contract method 0xd5719dc2.
//
// Solidity: function delayedInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeStub *BridgeStubCaller) DelayedInboxAccs(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "delayedInboxAccs", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DelayedInboxAccs is a free data retrieval call binding the contract method 0xd5719dc2.
//
// Solidity: function delayedInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeStub *BridgeStubSession) DelayedInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeStub.Contract.DelayedInboxAccs(&_BridgeStub.CallOpts, arg0)
}

// DelayedInboxAccs is a free data retrieval call binding the contract method 0xd5719dc2.
//
// Solidity: function delayedInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeStub *BridgeStubCallerSession) DelayedInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeStub.Contract.DelayedInboxAccs(&_BridgeStub.CallOpts, arg0)
}

// DelayedMessageCount is a free data retrieval call binding the contract method 0xeca067ad.
//
// Solidity: function delayedMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubCaller) DelayedMessageCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "delayedMessageCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DelayedMessageCount is a free data retrieval call binding the contract method 0xeca067ad.
//
// Solidity: function delayedMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubSession) DelayedMessageCount() (*big.Int, error) {
	return _BridgeStub.Contract.DelayedMessageCount(&_BridgeStub.CallOpts)
}

// DelayedMessageCount is a free data retrieval call binding the contract method 0xeca067ad.
//
// Solidity: function delayedMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubCallerSession) DelayedMessageCount() (*big.Int, error) {
	return _BridgeStub.Contract.DelayedMessageCount(&_BridgeStub.CallOpts)
}

// ExecuteCall is a free data retrieval call binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address , uint256 , bytes ) pure returns(bool, bytes)
func (_BridgeStub *BridgeStubCaller) ExecuteCall(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int, arg2 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "executeCall", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

// ExecuteCall is a free data retrieval call binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address , uint256 , bytes ) pure returns(bool, bytes)
func (_BridgeStub *BridgeStubSession) ExecuteCall(arg0 common.Address, arg1 *big.Int, arg2 []byte) (bool, []byte, error) {
	return _BridgeStub.Contract.ExecuteCall(&_BridgeStub.CallOpts, arg0, arg1, arg2)
}

// ExecuteCall is a free data retrieval call binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address , uint256 , bytes ) pure returns(bool, bytes)
func (_BridgeStub *BridgeStubCallerSession) ExecuteCall(arg0 common.Address, arg1 *big.Int, arg2 []byte) (bool, []byte, error) {
	return _BridgeStub.Contract.ExecuteCall(&_BridgeStub.CallOpts, arg0, arg1, arg2)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address ) pure returns()
func (_BridgeStub *BridgeStubCaller) Initialize(opts *bind.CallOpts, arg0 common.Address) error {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "initialize", arg0)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address ) pure returns()
func (_BridgeStub *BridgeStubSession) Initialize(arg0 common.Address) error {
	return _BridgeStub.Contract.Initialize(&_BridgeStub.CallOpts, arg0)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address ) pure returns()
func (_BridgeStub *BridgeStubCallerSession) Initialize(arg0 common.Address) error {
	return _BridgeStub.Contract.Initialize(&_BridgeStub.CallOpts, arg0)
}

// NativeToken is a free data retrieval call binding the contract method 0xe1758bd8.
//
// Solidity: function nativeToken() view returns(address)
func (_BridgeStub *BridgeStubCaller) NativeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "nativeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NativeToken is a free data retrieval call binding the contract method 0xe1758bd8.
//
// Solidity: function nativeToken() view returns(address)
func (_BridgeStub *BridgeStubSession) NativeToken() (common.Address, error) {
	return _BridgeStub.Contract.NativeToken(&_BridgeStub.CallOpts)
}

// NativeToken is a free data retrieval call binding the contract method 0xe1758bd8.
//
// Solidity: function nativeToken() view returns(address)
func (_BridgeStub *BridgeStubCallerSession) NativeToken() (common.Address, error) {
	return _BridgeStub.Contract.NativeToken(&_BridgeStub.CallOpts)
}

// NativeTokenDecimals is a free data retrieval call binding the contract method 0xad48cb5e.
//
// Solidity: function nativeTokenDecimals() view returns(uint8)
func (_BridgeStub *BridgeStubCaller) NativeTokenDecimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "nativeTokenDecimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NativeTokenDecimals is a free data retrieval call binding the contract method 0xad48cb5e.
//
// Solidity: function nativeTokenDecimals() view returns(uint8)
func (_BridgeStub *BridgeStubSession) NativeTokenDecimals() (uint8, error) {
	return _BridgeStub.Contract.NativeTokenDecimals(&_BridgeStub.CallOpts)
}

// NativeTokenDecimals is a free data retrieval call binding the contract method 0xad48cb5e.
//
// Solidity: function nativeTokenDecimals() view returns(uint8)
func (_BridgeStub *BridgeStubCallerSession) NativeTokenDecimals() (uint8, error) {
	return _BridgeStub.Contract.NativeTokenDecimals(&_BridgeStub.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() pure returns(address)
func (_BridgeStub *BridgeStubCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() pure returns(address)
func (_BridgeStub *BridgeStubSession) Rollup() (common.Address, error) {
	return _BridgeStub.Contract.Rollup(&_BridgeStub.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() pure returns(address)
func (_BridgeStub *BridgeStubCallerSession) Rollup() (common.Address, error) {
	return _BridgeStub.Contract.Rollup(&_BridgeStub.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_BridgeStub *BridgeStubCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_BridgeStub *BridgeStubSession) SequencerInbox() (common.Address, error) {
	return _BridgeStub.Contract.SequencerInbox(&_BridgeStub.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_BridgeStub *BridgeStubCallerSession) SequencerInbox() (common.Address, error) {
	return _BridgeStub.Contract.SequencerInbox(&_BridgeStub.CallOpts)
}

// SequencerInboxAccs is a free data retrieval call binding the contract method 0x16bf5579.
//
// Solidity: function sequencerInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeStub *BridgeStubCaller) SequencerInboxAccs(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "sequencerInboxAccs", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SequencerInboxAccs is a free data retrieval call binding the contract method 0x16bf5579.
//
// Solidity: function sequencerInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeStub *BridgeStubSession) SequencerInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeStub.Contract.SequencerInboxAccs(&_BridgeStub.CallOpts, arg0)
}

// SequencerInboxAccs is a free data retrieval call binding the contract method 0x16bf5579.
//
// Solidity: function sequencerInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeStub *BridgeStubCallerSession) SequencerInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeStub.Contract.SequencerInboxAccs(&_BridgeStub.CallOpts, arg0)
}

// SequencerMessageCount is a free data retrieval call binding the contract method 0x0084120c.
//
// Solidity: function sequencerMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubCaller) SequencerMessageCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "sequencerMessageCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerMessageCount is a free data retrieval call binding the contract method 0x0084120c.
//
// Solidity: function sequencerMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubSession) SequencerMessageCount() (*big.Int, error) {
	return _BridgeStub.Contract.SequencerMessageCount(&_BridgeStub.CallOpts)
}

// SequencerMessageCount is a free data retrieval call binding the contract method 0x0084120c.
//
// Solidity: function sequencerMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubCallerSession) SequencerMessageCount() (*big.Int, error) {
	return _BridgeStub.Contract.SequencerMessageCount(&_BridgeStub.CallOpts)
}

// SequencerReportedSubMessageCount is a free data retrieval call binding the contract method 0x5fca4a16.
//
// Solidity: function sequencerReportedSubMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubCaller) SequencerReportedSubMessageCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "sequencerReportedSubMessageCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerReportedSubMessageCount is a free data retrieval call binding the contract method 0x5fca4a16.
//
// Solidity: function sequencerReportedSubMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubSession) SequencerReportedSubMessageCount() (*big.Int, error) {
	return _BridgeStub.Contract.SequencerReportedSubMessageCount(&_BridgeStub.CallOpts)
}

// SequencerReportedSubMessageCount is a free data retrieval call binding the contract method 0x5fca4a16.
//
// Solidity: function sequencerReportedSubMessageCount() view returns(uint256)
func (_BridgeStub *BridgeStubCallerSession) SequencerReportedSubMessageCount() (*big.Int, error) {
	return _BridgeStub.Contract.SequencerReportedSubMessageCount(&_BridgeStub.CallOpts)
}

// SetOutbox is a free data retrieval call binding the contract method 0xcee3d728.
//
// Solidity: function setOutbox(address , bool ) pure returns()
func (_BridgeStub *BridgeStubCaller) SetOutbox(opts *bind.CallOpts, arg0 common.Address, arg1 bool) error {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "setOutbox", arg0, arg1)

	if err != nil {
		return err
	}

	return err

}

// SetOutbox is a free data retrieval call binding the contract method 0xcee3d728.
//
// Solidity: function setOutbox(address , bool ) pure returns()
func (_BridgeStub *BridgeStubSession) SetOutbox(arg0 common.Address, arg1 bool) error {
	return _BridgeStub.Contract.SetOutbox(&_BridgeStub.CallOpts, arg0, arg1)
}

// SetOutbox is a free data retrieval call binding the contract method 0xcee3d728.
//
// Solidity: function setOutbox(address , bool ) pure returns()
func (_BridgeStub *BridgeStubCallerSession) SetOutbox(arg0 common.Address, arg1 bool) error {
	return _BridgeStub.Contract.SetOutbox(&_BridgeStub.CallOpts, arg0, arg1)
}

// UpdateRollupAddress is a free data retrieval call binding the contract method 0x919cc706.
//
// Solidity: function updateRollupAddress(address ) pure returns()
func (_BridgeStub *BridgeStubCaller) UpdateRollupAddress(opts *bind.CallOpts, arg0 common.Address) error {
	var out []interface{}
	err := _BridgeStub.contract.Call(opts, &out, "updateRollupAddress", arg0)

	if err != nil {
		return err
	}

	return err

}

// UpdateRollupAddress is a free data retrieval call binding the contract method 0x919cc706.
//
// Solidity: function updateRollupAddress(address ) pure returns()
func (_BridgeStub *BridgeStubSession) UpdateRollupAddress(arg0 common.Address) error {
	return _BridgeStub.Contract.UpdateRollupAddress(&_BridgeStub.CallOpts, arg0)
}

// UpdateRollupAddress is a free data retrieval call binding the contract method 0x919cc706.
//
// Solidity: function updateRollupAddress(address ) pure returns()
func (_BridgeStub *BridgeStubCallerSession) UpdateRollupAddress(arg0 common.Address) error {
	return _BridgeStub.Contract.UpdateRollupAddress(&_BridgeStub.CallOpts, arg0)
}

// AcceptFundsFromOldBridge is a paid mutator transaction binding the contract method 0xe77145f4.
//
// Solidity: function acceptFundsFromOldBridge() payable returns()
func (_BridgeStub *BridgeStubTransactor) AcceptFundsFromOldBridge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeStub.contract.Transact(opts, "acceptFundsFromOldBridge")
}

// AcceptFundsFromOldBridge is a paid mutator transaction binding the contract method 0xe77145f4.
//
// Solidity: function acceptFundsFromOldBridge() payable returns()
func (_BridgeStub *BridgeStubSession) AcceptFundsFromOldBridge() (*types.Transaction, error) {
	return _BridgeStub.Contract.AcceptFundsFromOldBridge(&_BridgeStub.TransactOpts)
}

// AcceptFundsFromOldBridge is a paid mutator transaction binding the contract method 0xe77145f4.
//
// Solidity: function acceptFundsFromOldBridge() payable returns()
func (_BridgeStub *BridgeStubTransactorSession) AcceptFundsFromOldBridge() (*types.Transaction, error) {
	return _BridgeStub.Contract.AcceptFundsFromOldBridge(&_BridgeStub.TransactOpts)
}

// EnqueueDelayedMessage is a paid mutator transaction binding the contract method 0x8db5993b.
//
// Solidity: function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns(uint256)
func (_BridgeStub *BridgeStubTransactor) EnqueueDelayedMessage(opts *bind.TransactOpts, kind uint8, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeStub.contract.Transact(opts, "enqueueDelayedMessage", kind, sender, messageDataHash)
}

// EnqueueDelayedMessage is a paid mutator transaction binding the contract method 0x8db5993b.
//
// Solidity: function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns(uint256)
func (_BridgeStub *BridgeStubSession) EnqueueDelayedMessage(kind uint8, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeStub.Contract.EnqueueDelayedMessage(&_BridgeStub.TransactOpts, kind, sender, messageDataHash)
}

// EnqueueDelayedMessage is a paid mutator transaction binding the contract method 0x8db5993b.
//
// Solidity: function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns(uint256)
func (_BridgeStub *BridgeStubTransactorSession) EnqueueDelayedMessage(kind uint8, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeStub.Contract.EnqueueDelayedMessage(&_BridgeStub.TransactOpts, kind, sender, messageDataHash)
}

// EnqueueSequencerMessage is a paid mutator transaction binding the contract method 0x86598a56.
//
// Solidity: function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns(uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)
func (_BridgeStub *BridgeStubTransactor) EnqueueSequencerMessage(opts *bind.TransactOpts, dataHash [32]byte, afterDelayedMessagesRead *big.Int, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _BridgeStub.contract.Transact(opts, "enqueueSequencerMessage", dataHash, afterDelayedMessagesRead, prevMessageCount, newMessageCount)
}

// EnqueueSequencerMessage is a paid mutator transaction binding the contract method 0x86598a56.
//
// Solidity: function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns(uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)
func (_BridgeStub *BridgeStubSession) EnqueueSequencerMessage(dataHash [32]byte, afterDelayedMessagesRead *big.Int, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _BridgeStub.Contract.EnqueueSequencerMessage(&_BridgeStub.TransactOpts, dataHash, afterDelayedMessagesRead, prevMessageCount, newMessageCount)
}

// EnqueueSequencerMessage is a paid mutator transaction binding the contract method 0x86598a56.
//
// Solidity: function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns(uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)
func (_BridgeStub *BridgeStubTransactorSession) EnqueueSequencerMessage(dataHash [32]byte, afterDelayedMessagesRead *big.Int, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _BridgeStub.Contract.EnqueueSequencerMessage(&_BridgeStub.TransactOpts, dataHash, afterDelayedMessagesRead, prevMessageCount, newMessageCount)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address inbox, bool enabled) returns()
func (_BridgeStub *BridgeStubTransactor) SetDelayedInbox(opts *bind.TransactOpts, inbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeStub.contract.Transact(opts, "setDelayedInbox", inbox, enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address inbox, bool enabled) returns()
func (_BridgeStub *BridgeStubSession) SetDelayedInbox(inbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeStub.Contract.SetDelayedInbox(&_BridgeStub.TransactOpts, inbox, enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address inbox, bool enabled) returns()
func (_BridgeStub *BridgeStubTransactorSession) SetDelayedInbox(inbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeStub.Contract.SetDelayedInbox(&_BridgeStub.TransactOpts, inbox, enabled)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_BridgeStub *BridgeStubTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _BridgeStub.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_BridgeStub *BridgeStubSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _BridgeStub.Contract.SetSequencerInbox(&_BridgeStub.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_BridgeStub *BridgeStubTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _BridgeStub.Contract.SetSequencerInbox(&_BridgeStub.TransactOpts, _sequencerInbox)
}

// SubmitBatchSpendingReport is a paid mutator transaction binding the contract method 0x7a88b107.
//
// Solidity: function submitBatchSpendingReport(address batchPoster, bytes32 dataHash) returns(uint256)
func (_BridgeStub *BridgeStubTransactor) SubmitBatchSpendingReport(opts *bind.TransactOpts, batchPoster common.Address, dataHash [32]byte) (*types.Transaction, error) {
	return _BridgeStub.contract.Transact(opts, "submitBatchSpendingReport", batchPoster, dataHash)
}

// SubmitBatchSpendingReport is a paid mutator transaction binding the contract method 0x7a88b107.
//
// Solidity: function submitBatchSpendingReport(address batchPoster, bytes32 dataHash) returns(uint256)
func (_BridgeStub *BridgeStubSession) SubmitBatchSpendingReport(batchPoster common.Address, dataHash [32]byte) (*types.Transaction, error) {
	return _BridgeStub.Contract.SubmitBatchSpendingReport(&_BridgeStub.TransactOpts, batchPoster, dataHash)
}

// SubmitBatchSpendingReport is a paid mutator transaction binding the contract method 0x7a88b107.
//
// Solidity: function submitBatchSpendingReport(address batchPoster, bytes32 dataHash) returns(uint256)
func (_BridgeStub *BridgeStubTransactorSession) SubmitBatchSpendingReport(batchPoster common.Address, dataHash [32]byte) (*types.Transaction, error) {
	return _BridgeStub.Contract.SubmitBatchSpendingReport(&_BridgeStub.TransactOpts, batchPoster, dataHash)
}

// BridgeStubBridgeCallTriggeredIterator is returned from FilterBridgeCallTriggered and is used to iterate over the raw logs and unpacked data for BridgeCallTriggered events raised by the BridgeStub contract.
type BridgeStubBridgeCallTriggeredIterator struct {
	Event *BridgeStubBridgeCallTriggered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStubBridgeCallTriggeredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStubBridgeCallTriggered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStubBridgeCallTriggered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStubBridgeCallTriggeredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStubBridgeCallTriggeredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStubBridgeCallTriggered represents a BridgeCallTriggered event raised by the BridgeStub contract.
type BridgeStubBridgeCallTriggered struct {
	Outbox common.Address
	To     common.Address
	Value  *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBridgeCallTriggered is a free log retrieval operation binding the contract event 0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466.
//
// Solidity: event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)
func (_BridgeStub *BridgeStubFilterer) FilterBridgeCallTriggered(opts *bind.FilterOpts, outbox []common.Address, to []common.Address) (*BridgeStubBridgeCallTriggeredIterator, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BridgeStub.contract.FilterLogs(opts, "BridgeCallTriggered", outboxRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BridgeStubBridgeCallTriggeredIterator{contract: _BridgeStub.contract, event: "BridgeCallTriggered", logs: logs, sub: sub}, nil
}

// WatchBridgeCallTriggered is a free log subscription operation binding the contract event 0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466.
//
// Solidity: event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)
func (_BridgeStub *BridgeStubFilterer) WatchBridgeCallTriggered(opts *bind.WatchOpts, sink chan<- *BridgeStubBridgeCallTriggered, outbox []common.Address, to []common.Address) (event.Subscription, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BridgeStub.contract.WatchLogs(opts, "BridgeCallTriggered", outboxRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStubBridgeCallTriggered)
				if err := _BridgeStub.contract.UnpackLog(event, "BridgeCallTriggered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeCallTriggered is a log parse operation binding the contract event 0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466.
//
// Solidity: event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)
func (_BridgeStub *BridgeStubFilterer) ParseBridgeCallTriggered(log types.Log) (*BridgeStubBridgeCallTriggered, error) {
	event := new(BridgeStubBridgeCallTriggered)
	if err := _BridgeStub.contract.UnpackLog(event, "BridgeCallTriggered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStubInboxToggleIterator is returned from FilterInboxToggle and is used to iterate over the raw logs and unpacked data for InboxToggle events raised by the BridgeStub contract.
type BridgeStubInboxToggleIterator struct {
	Event *BridgeStubInboxToggle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStubInboxToggleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStubInboxToggle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStubInboxToggle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStubInboxToggleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStubInboxToggleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStubInboxToggle represents a InboxToggle event raised by the BridgeStub contract.
type BridgeStubInboxToggle struct {
	Inbox   common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInboxToggle is a free log retrieval operation binding the contract event 0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521.
//
// Solidity: event InboxToggle(address indexed inbox, bool enabled)
func (_BridgeStub *BridgeStubFilterer) FilterInboxToggle(opts *bind.FilterOpts, inbox []common.Address) (*BridgeStubInboxToggleIterator, error) {

	var inboxRule []interface{}
	for _, inboxItem := range inbox {
		inboxRule = append(inboxRule, inboxItem)
	}

	logs, sub, err := _BridgeStub.contract.FilterLogs(opts, "InboxToggle", inboxRule)
	if err != nil {
		return nil, err
	}
	return &BridgeStubInboxToggleIterator{contract: _BridgeStub.contract, event: "InboxToggle", logs: logs, sub: sub}, nil
}

// WatchInboxToggle is a free log subscription operation binding the contract event 0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521.
//
// Solidity: event InboxToggle(address indexed inbox, bool enabled)
func (_BridgeStub *BridgeStubFilterer) WatchInboxToggle(opts *bind.WatchOpts, sink chan<- *BridgeStubInboxToggle, inbox []common.Address) (event.Subscription, error) {

	var inboxRule []interface{}
	for _, inboxItem := range inbox {
		inboxRule = append(inboxRule, inboxItem)
	}

	logs, sub, err := _BridgeStub.contract.WatchLogs(opts, "InboxToggle", inboxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStubInboxToggle)
				if err := _BridgeStub.contract.UnpackLog(event, "InboxToggle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxToggle is a log parse operation binding the contract event 0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521.
//
// Solidity: event InboxToggle(address indexed inbox, bool enabled)
func (_BridgeStub *BridgeStubFilterer) ParseInboxToggle(log types.Log) (*BridgeStubInboxToggle, error) {
	event := new(BridgeStubInboxToggle)
	if err := _BridgeStub.contract.UnpackLog(event, "InboxToggle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStubMessageDeliveredIterator is returned from FilterMessageDelivered and is used to iterate over the raw logs and unpacked data for MessageDelivered events raised by the BridgeStub contract.
type BridgeStubMessageDeliveredIterator struct {
	Event *BridgeStubMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStubMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStubMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStubMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStubMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStubMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStubMessageDelivered represents a MessageDelivered event raised by the BridgeStub contract.
type BridgeStubMessageDelivered struct {
	MessageIndex    *big.Int
	BeforeInboxAcc  [32]byte
	Inbox           common.Address
	Kind            uint8
	Sender          common.Address
	MessageDataHash [32]byte
	BaseFeeL1       *big.Int
	Timestamp       uint64
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMessageDelivered is a free log retrieval operation binding the contract event 0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1.
//
// Solidity: event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)
func (_BridgeStub *BridgeStubFilterer) FilterMessageDelivered(opts *bind.FilterOpts, messageIndex []*big.Int, beforeInboxAcc [][32]byte) (*BridgeStubMessageDeliveredIterator, error) {

	var messageIndexRule []interface{}
	for _, messageIndexItem := range messageIndex {
		messageIndexRule = append(messageIndexRule, messageIndexItem)
	}
	var beforeInboxAccRule []interface{}
	for _, beforeInboxAccItem := range beforeInboxAcc {
		beforeInboxAccRule = append(beforeInboxAccRule, beforeInboxAccItem)
	}

	logs, sub, err := _BridgeStub.contract.FilterLogs(opts, "MessageDelivered", messageIndexRule, beforeInboxAccRule)
	if err != nil {
		return nil, err
	}
	return &BridgeStubMessageDeliveredIterator{contract: _BridgeStub.contract, event: "MessageDelivered", logs: logs, sub: sub}, nil
}

// WatchMessageDelivered is a free log subscription operation binding the contract event 0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1.
//
// Solidity: event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)
func (_BridgeStub *BridgeStubFilterer) WatchMessageDelivered(opts *bind.WatchOpts, sink chan<- *BridgeStubMessageDelivered, messageIndex []*big.Int, beforeInboxAcc [][32]byte) (event.Subscription, error) {

	var messageIndexRule []interface{}
	for _, messageIndexItem := range messageIndex {
		messageIndexRule = append(messageIndexRule, messageIndexItem)
	}
	var beforeInboxAccRule []interface{}
	for _, beforeInboxAccItem := range beforeInboxAcc {
		beforeInboxAccRule = append(beforeInboxAccRule, beforeInboxAccItem)
	}

	logs, sub, err := _BridgeStub.contract.WatchLogs(opts, "MessageDelivered", messageIndexRule, beforeInboxAccRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStubMessageDelivered)
				if err := _BridgeStub.contract.UnpackLog(event, "MessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageDelivered is a log parse operation binding the contract event 0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1.
//
// Solidity: event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)
func (_BridgeStub *BridgeStubFilterer) ParseMessageDelivered(log types.Log) (*BridgeStubMessageDelivered, error) {
	event := new(BridgeStubMessageDelivered)
	if err := _BridgeStub.contract.UnpackLog(event, "MessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStubOutboxToggleIterator is returned from FilterOutboxToggle and is used to iterate over the raw logs and unpacked data for OutboxToggle events raised by the BridgeStub contract.
type BridgeStubOutboxToggleIterator struct {
	Event *BridgeStubOutboxToggle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStubOutboxToggleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStubOutboxToggle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStubOutboxToggle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStubOutboxToggleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStubOutboxToggleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStubOutboxToggle represents a OutboxToggle event raised by the BridgeStub contract.
type BridgeStubOutboxToggle struct {
	Outbox  common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOutboxToggle is a free log retrieval operation binding the contract event 0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa.
//
// Solidity: event OutboxToggle(address indexed outbox, bool enabled)
func (_BridgeStub *BridgeStubFilterer) FilterOutboxToggle(opts *bind.FilterOpts, outbox []common.Address) (*BridgeStubOutboxToggleIterator, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}

	logs, sub, err := _BridgeStub.contract.FilterLogs(opts, "OutboxToggle", outboxRule)
	if err != nil {
		return nil, err
	}
	return &BridgeStubOutboxToggleIterator{contract: _BridgeStub.contract, event: "OutboxToggle", logs: logs, sub: sub}, nil
}

// WatchOutboxToggle is a free log subscription operation binding the contract event 0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa.
//
// Solidity: event OutboxToggle(address indexed outbox, bool enabled)
func (_BridgeStub *BridgeStubFilterer) WatchOutboxToggle(opts *bind.WatchOpts, sink chan<- *BridgeStubOutboxToggle, outbox []common.Address) (event.Subscription, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}

	logs, sub, err := _BridgeStub.contract.WatchLogs(opts, "OutboxToggle", outboxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStubOutboxToggle)
				if err := _BridgeStub.contract.UnpackLog(event, "OutboxToggle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutboxToggle is a log parse operation binding the contract event 0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa.
//
// Solidity: event OutboxToggle(address indexed outbox, bool enabled)
func (_BridgeStub *BridgeStubFilterer) ParseOutboxToggle(log types.Log) (*BridgeStubOutboxToggle, error) {
	event := new(BridgeStubOutboxToggle)
	if err := _BridgeStub.contract.UnpackLog(event, "OutboxToggle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStubRollupUpdatedIterator is returned from FilterRollupUpdated and is used to iterate over the raw logs and unpacked data for RollupUpdated events raised by the BridgeStub contract.
type BridgeStubRollupUpdatedIterator struct {
	Event *BridgeStubRollupUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStubRollupUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStubRollupUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStubRollupUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStubRollupUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStubRollupUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStubRollupUpdated represents a RollupUpdated event raised by the BridgeStub contract.
type BridgeStubRollupUpdated struct {
	Rollup common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollupUpdated is a free log retrieval operation binding the contract event 0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a.
//
// Solidity: event RollupUpdated(address rollup)
func (_BridgeStub *BridgeStubFilterer) FilterRollupUpdated(opts *bind.FilterOpts) (*BridgeStubRollupUpdatedIterator, error) {

	logs, sub, err := _BridgeStub.contract.FilterLogs(opts, "RollupUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeStubRollupUpdatedIterator{contract: _BridgeStub.contract, event: "RollupUpdated", logs: logs, sub: sub}, nil
}

// WatchRollupUpdated is a free log subscription operation binding the contract event 0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a.
//
// Solidity: event RollupUpdated(address rollup)
func (_BridgeStub *BridgeStubFilterer) WatchRollupUpdated(opts *bind.WatchOpts, sink chan<- *BridgeStubRollupUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeStub.contract.WatchLogs(opts, "RollupUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStubRollupUpdated)
				if err := _BridgeStub.contract.UnpackLog(event, "RollupUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupUpdated is a log parse operation binding the contract event 0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a.
//
// Solidity: event RollupUpdated(address rollup)
func (_BridgeStub *BridgeStubFilterer) ParseRollupUpdated(log types.Log) (*BridgeStubRollupUpdated, error) {
	event := new(BridgeStubRollupUpdated)
	if err := _BridgeStub.contract.UnpackLog(event, "RollupUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeStubSequencerInboxUpdatedIterator is returned from FilterSequencerInboxUpdated and is used to iterate over the raw logs and unpacked data for SequencerInboxUpdated events raised by the BridgeStub contract.
type BridgeStubSequencerInboxUpdatedIterator struct {
	Event *BridgeStubSequencerInboxUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeStubSequencerInboxUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeStubSequencerInboxUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeStubSequencerInboxUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeStubSequencerInboxUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeStubSequencerInboxUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeStubSequencerInboxUpdated represents a SequencerInboxUpdated event raised by the BridgeStub contract.
type BridgeStubSequencerInboxUpdated struct {
	NewSequencerInbox common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSequencerInboxUpdated is a free log retrieval operation binding the contract event 0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a.
//
// Solidity: event SequencerInboxUpdated(address newSequencerInbox)
func (_BridgeStub *BridgeStubFilterer) FilterSequencerInboxUpdated(opts *bind.FilterOpts) (*BridgeStubSequencerInboxUpdatedIterator, error) {

	logs, sub, err := _BridgeStub.contract.FilterLogs(opts, "SequencerInboxUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeStubSequencerInboxUpdatedIterator{contract: _BridgeStub.contract, event: "SequencerInboxUpdated", logs: logs, sub: sub}, nil
}

// WatchSequencerInboxUpdated is a free log subscription operation binding the contract event 0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a.
//
// Solidity: event SequencerInboxUpdated(address newSequencerInbox)
func (_BridgeStub *BridgeStubFilterer) WatchSequencerInboxUpdated(opts *bind.WatchOpts, sink chan<- *BridgeStubSequencerInboxUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeStub.contract.WatchLogs(opts, "SequencerInboxUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeStubSequencerInboxUpdated)
				if err := _BridgeStub.contract.UnpackLog(event, "SequencerInboxUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerInboxUpdated is a log parse operation binding the contract event 0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a.
//
// Solidity: event SequencerInboxUpdated(address newSequencerInbox)
func (_BridgeStub *BridgeStubFilterer) ParseSequencerInboxUpdated(log types.Log) (*BridgeStubSequencerInboxUpdated, error) {
	event := new(BridgeStubSequencerInboxUpdated)
	if err := _BridgeStub.contract.UnpackLog(event, "SequencerInboxUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedMetaData contains all meta data concerning the BridgeUnproxied contract.
var BridgeUnproxiedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"BadSequencerMessageNumber\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"}],\"name\":\"InvalidOutboxSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotDelayedInbox\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotOutbox\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotRollupOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotSequencerInbox\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"BridgeCallTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"InboxToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beforeInboxAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageDataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFeeL1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"MessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OutboxToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"RollupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSequencerInbox\",\"type\":\"address\"}],\"name\":\"SequencerInboxUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DUMMYVAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptFundsFromOldBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeOutbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedDelayedInboxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"name\":\"allowedDelayedInboxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedOutboxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"}],\"name\":\"allowedOutboxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delayedInboxAccs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageDataHash\",\"type\":\"bytes32\"}],\"name\":\"enqueueDelayedMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"}],\"name\":\"enqueueSequencerMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seqMessageIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"beforeAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"delayedAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"acc\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"rollup_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencerInboxAccs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerReportedSubMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMsgCount\",\"type\":\"uint256\"}],\"name\":\"setSequencerReportedSubMessageCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageDataHash\",\"type\":\"bytes32\"}],\"name\":\"submitBatchSpendingReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"_rollup\",\"type\":\"address\"}],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a08060405234604e57306080526000603355600580546001600160a01b03199081166001600160a01b0317909155600880549091163317905561160690816100548239608051816103f20152f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816284120c1461101c5750806316bf557914610ff1578063413b35bd14610faf57806347fb24c514610f125780634f61f85014610e255780635fca4a1614610e065780637a88b10714610c9357806386598a5614610ad15780638db5993b14610920578063919cc70614610834578063927dcfab14610815578063945e1147146107d55780639e5d4c49146105cb578063ab5d89431461059d578063ae60bd131461055c578063c4d66de814610396578063cb23bcb51461036d578063cee3d728146102c3578063d5719dc21461028a578063e76f5c8d14610249578063e77145f414610237578063eca067ad14610218578063ee35f327146101eb5763f81ff3b31461012b57600080fd5b346101e75760203660031901126101e7576008546001600160a01b03908116913383900361015e575b50505035600a5580f35b8051638da5cb5b60e01b8152916020838681875afa9283156101dd5786936101ac575b5082163303156101545751630739600760e01b8152935083926101a89290339085016111ad565b0390fd5b6101cf91935060203d6020116101d6575b6101c7818361116b565b81019061118e565b9138610181565b503d6101bd565b82513d88823e3d90fd5b8280fd5b83823461021457816003193601126102145760095490516001600160a01b039091168152602090f35b5080fd5b8382346102145781600319360112610214576020906006549051908152f35b83806003193601126102465780f35b80fd5b5090346101e75760203660031901126101e7573591600354831015610246575061027460209261109f565b60018060a01b0391549060031b1c169051908152f35b5090346101e75760203660031901126101e757359160065483101561024657506102b5602092611069565b91905490519160031b1c8152f35b50919034610214576102d4366110d5565b9160018060a01b038060085416958633036102f8575b856102f586866113ee565b80f35b8051638da5cb5b60e01b81529160208385818b5afa928315610363578793610342575b5082163303156102ea5751630739600760e01b81529182916101a8918890339085016111ad565b61035c91935060203d6020116101d6576101c7818361116b565b913861031b565b82513d89823e3d90fd5b83823461021457816003193601126102145760085490516001600160a01b039091168152602090f35b5090346101e75760203660031901126101e75780356001600160a01b03818116918290036105585784549260ff8460081c16159384809561054b575b8015610534575b156104da5760ff1981166001178755846104c9575b50817f0000000000000000000000000000000000000000000000000000000000000000163014610471575060018060a01b031990816005541617600555600854161760085561043b575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b608490602086519162461bcd60e51b8352820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152fd5b61ffff1916610101178655386103ee565b855162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103d95750600160ff8216146103d9565b50600160ff8216106103d2565b8480fd5b8382346102145760203660031901126102145760209160ff9060019083906001600160a01b0361058a6110ba565b1681528286522001541690519015158152f35b8382346102145781600319360112610214576020906105ba6113d0565b90516001600160a01b039091168152f35b5082346102465760609182600319360112610214576105e86110ba565b604435949092906024356001600160401b038088116107d157366023890112156107d157878301359081116107d157602488019760248236920101116107d1573384526020926002845260ff6001878720015416156107ba57811515806107b1575b61078f5750600580546001600160a01b0319808216331790925598869392916001600160a01b03919087808b61067f876113b5565b61068b8a51918261116b565b878152888b82019189888437848d8b8301015251925af19b3d1561076c579184918460008051602061159183398151915295943d6106d46106cb826113b5565b9b519b8c61116b565b8a523d8c8c8c013e9e9b999e9c9a989c5b169060055416176005558751958652878d87015281888701528b860137848a8486010152601f19961692898188601f339601168101030190a381519687941515855282818601528551809386015281955b8387106107545750508394508582601f949501015201168101030190f35b86810182015189880189015295810195889550610736565b955082918491600080516020611591833981519152948d9c9a989e9b999e6106e5565b855163b5cf5b8f60e01b81526001600160a01b03881691810191909152602490fd5b50863b1561064a565b6024908651906332ea82ab60e01b82523390820152fd5b8380fd5b508234610246576020366003190112610246578235925483101561024657506107ff602092611084565b905491519160018060a01b039160031b1c168152f35b8382346102145781600319360112610214576020906033549051908152f35b50346101e75760203660031901126101e75781356001600160a01b0381811693918490036105585760085491818316918233036108ac575b6001600160a01b031984168617600855845186815287907fae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a90602090a180f35b8451638da5cb5b60e01b8152906020828481875afa9182156109165788926108f5575b50811633031561086c576101a8908551938493630739600760e01b8552339085016111ad565b61090f91925060203d6020116101d6576101c7818361116b565b90386108cf565b86513d8a823e3d90fd5b50829060603660031901126102145782359160ff831680840361021457602435936001600160a01b0385168086036107d15760443591338552600160205260ff600187872001541615610abb57600654865160f89290921b6001600160f81b0319166020830190815260609890981b6001600160601b03191660218301524360c090811b6001600160c01b031990811660358501524290911b16603d830152604582018190524860658301526085808301859052825296906109e181611135565b519020968487610a5b575b505085926000805160206115b18339815191529260c092610a2a60209a89518c8101918a83528b8201528a8152610a2281611150565b51902061138f565b87513381528a810193909352828801526060820152486080820152426001600160401b031660a0820152a351908152f35b90979450600019870190878211610aa8575060209750926000805160206115b18339815191529260c092610a2a610a928a97611069565b90549060031b1c979a50509250928194506109ec565b634e487b7160e01b815260118952602490fd5b855163b6c60ea360e01b815233818a0152602490fd5b5090346101e75760803660031901126101e757600954602493843593604435929091906001600160a01b03163303610c7e57808093600a548181141580610c75575b80610c6c575b610c51575050606435600a556007549586610c1b575b80610be3575b508251602081018381528635828601526060808301879052825290608081016001600160401b03811182821017610bd157855251902094600160401b871015610bbf575050608095506001850160075583610ba9610b9287611038565b819391549060031b91821b91600019901b19161790565b9055815194855260208501528301526060820152f35b634e487b7160e01b8252604190528690fd5b634e487b7160e01b8452604188528984fd5b9093506000198101908111610c0957610bfb90611069565b90549060031b1c9238610b35565b634e487b7160e01b8452601185528684fd5b91506000198601868111610c3f57610c3290611038565b90549060031b1c91610b2f565b634e487b7160e01b8252601186528782fd5b60449189889287519363e2051feb60e01b8552840152820152fd5b50801515610b19565b50811515610b13565b815163223e13c160e21b815233818601528690fd5b50829034610214578060031936011261021457610cae6110ba565b6009546001600160a01b039391906024359085163303610df0576006548451600d60f81b602082019081526001600160601b0319606086901b1660218301526001600160c01b03194360c090811b8216603585015242901b16603d830152604582018390524860658301526085808301859052825291969190610d3081611135565b519020968487610da3575b505085926000805160206115b18339815191529260c092610d7160209a89518c8101918a83528b8201528a8152610a2281611150565b8751338152600d8b8201529216828801526060820152486080820152426001600160401b031660a0820152a351908152f35b90979450600019870190878211610aa8575060209750926000805160206115b18339815191529260c092610d71610dda8a97611069565b90549060031b1c979a5050925092819450610d3b565b835163223e13c160e21b81523381880152602490fd5b838234610214578160031936011261021457602090600a549051908152f35b5090346101e75760203660031901126101e757610e406110ba565b6008546001600160a01b03929083169033829003610e9b575b857f8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a602087878716908160018060a01b0319600954161760095551908152a180f35b8451638da5cb5b60e01b81526020818381865afa908115610f08578791610ee9575b508481163303610ecd5750610e59565b6101a8908651938493630739600760e01b8552339085016111ad565b610f02915060203d6020116101d6576101c7818361116b565b38610ebd565b86513d89823e3d90fd5b5091903461021457610f23366110d5565b9160018060a01b03806008541695863303610f44575b856102f586866111ed565b8051638da5cb5b60e01b81529160208385818b5afa928315610363578793610f8e575b508216330315610f395751630739600760e01b81529182916101a8918890339085016111ad565b610fa891935060203d6020116101d6576101c7818361116b565b9138610f67565b8382346102145760203660031901126102145760209160ff9060019083906001600160a01b03610fdd6110ba565b168152600286522001541690519015158152f35b5090346101e75760203660031901126101e757359160075483101561024657506102b5602092611038565b8490346102145781600319360112610214576020906007548152f35b60075481101561105357600760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60065481101561105357600660005260206000200190600090565b60045481101561105357600460005260206000200190600090565b60035481101561105357600360005260206000200190600090565b600435906001600160a01b03821682036110d057565b600080fd5b60409060031901126110d0576004356001600160a01b03811681036110d0579060243580151581036110d05790565b604081019081106001600160401b0382111761111f57604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761111f57604052565b606081019081106001600160401b0382111761111f57604052565b601f909101601f19168101906001600160401b0382119082101761111f57604052565b908160209103126110d057516001600160a01b03811681036110d05790565b6001600160a01b0391821681529181166020830152909116604082015260600190565b919060018060a01b038084549260031b9316831b921b1916179055565b9060018060a01b038083166000928184526001926020918483526040918287209160ff8784015416845190877f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf5218885151594858152a215151461138457156112c8575050908391826003549282519361126585611104565b845280840195828752885252852090518155019051151560ff8019835416911617905560035491600160401b8310156112b45750816112ac916112b294930160035561109f565b906111d0565b565b634e487b7160e01b81526041600452602490fd5b909194959650600393929354916000199283810190811161137057826112f06113029261109f565b90549060031b1c166112ac835461109f565b549061130d8261109f565b90549060031b1c16875285845284872055600354801561135c57859392910161134d6113388261109f565b81549060018060a01b039060031b1b19169055565b60035585525282208281550155565b634e487b7160e01b87526031600452602487fd5b634e487b7160e01b89526011600452602489fd5b505050505050505050565b600654600160401b81101561111f57610b928160016113b19301600655611069565b9055565b6001600160401b03811161111f57601f01601f191660200190565b6005546001600160a01b039081169081146113e85790565b50600090565b906001600160a01b03908183169081831461157757600092828452602091600283526040918286209160ff600184015416845190877f49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa8885151594858152a215151461156d57156114b95750509060019160026004549282519361147185611104565b845280840195858752875252842090518155019051151560ff8019835416911617905560045490600160401b8210156112b45750906112ac8260016112b29401600455611084565b90919495506004939293549160001992838101908111611559576114df6114fa91611084565b9054846114ec8554611084565b92909360031b1c16916111d0565b549061150582611084565b90549060031b1c16865260028452848620556004548015611545579160019493916002930161153661133882611084565b60045585525282208281550155565b634e487b7160e01b86526031600452602486fd5b634e487b7160e01b88526011600452602488fd5b5050505050505050565b60405163077abed160e41b815260048101839052602490fdfe2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d4665e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1a2646970667358221220b9d6c702195f3b94d483202eef3d3ae61c1651f130ec341467f322667865f2a764736f6c63430008190033",
}

// BridgeUnproxiedABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeUnproxiedMetaData.ABI instead.
var BridgeUnproxiedABI = BridgeUnproxiedMetaData.ABI

// BridgeUnproxiedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeUnproxiedMetaData.Bin instead.
var BridgeUnproxiedBin = BridgeUnproxiedMetaData.Bin

// DeployBridgeUnproxied deploys a new Ethereum contract, binding an instance of BridgeUnproxied to it.
func DeployBridgeUnproxied(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeUnproxied, error) {
	parsed, err := BridgeUnproxiedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeUnproxiedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeUnproxied{BridgeUnproxiedCaller: BridgeUnproxiedCaller{contract: contract}, BridgeUnproxiedTransactor: BridgeUnproxiedTransactor{contract: contract}, BridgeUnproxiedFilterer: BridgeUnproxiedFilterer{contract: contract}}, nil
}

// BridgeUnproxied is an auto generated Go binding around an Ethereum contract.
type BridgeUnproxied struct {
	BridgeUnproxiedCaller     // Read-only binding to the contract
	BridgeUnproxiedTransactor // Write-only binding to the contract
	BridgeUnproxiedFilterer   // Log filterer for contract events
}

// BridgeUnproxiedCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeUnproxiedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeUnproxiedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeUnproxiedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeUnproxiedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeUnproxiedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeUnproxiedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeUnproxiedSession struct {
	Contract     *BridgeUnproxied  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeUnproxiedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeUnproxiedCallerSession struct {
	Contract *BridgeUnproxiedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BridgeUnproxiedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeUnproxiedTransactorSession struct {
	Contract     *BridgeUnproxiedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BridgeUnproxiedRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeUnproxiedRaw struct {
	Contract *BridgeUnproxied // Generic contract binding to access the raw methods on
}

// BridgeUnproxiedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeUnproxiedCallerRaw struct {
	Contract *BridgeUnproxiedCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeUnproxiedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeUnproxiedTransactorRaw struct {
	Contract *BridgeUnproxiedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeUnproxied creates a new instance of BridgeUnproxied, bound to a specific deployed contract.
func NewBridgeUnproxied(address common.Address, backend bind.ContractBackend) (*BridgeUnproxied, error) {
	contract, err := bindBridgeUnproxied(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxied{BridgeUnproxiedCaller: BridgeUnproxiedCaller{contract: contract}, BridgeUnproxiedTransactor: BridgeUnproxiedTransactor{contract: contract}, BridgeUnproxiedFilterer: BridgeUnproxiedFilterer{contract: contract}}, nil
}

// NewBridgeUnproxiedCaller creates a new read-only instance of BridgeUnproxied, bound to a specific deployed contract.
func NewBridgeUnproxiedCaller(address common.Address, caller bind.ContractCaller) (*BridgeUnproxiedCaller, error) {
	contract, err := bindBridgeUnproxied(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedCaller{contract: contract}, nil
}

// NewBridgeUnproxiedTransactor creates a new write-only instance of BridgeUnproxied, bound to a specific deployed contract.
func NewBridgeUnproxiedTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeUnproxiedTransactor, error) {
	contract, err := bindBridgeUnproxied(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedTransactor{contract: contract}, nil
}

// NewBridgeUnproxiedFilterer creates a new log filterer instance of BridgeUnproxied, bound to a specific deployed contract.
func NewBridgeUnproxiedFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeUnproxiedFilterer, error) {
	contract, err := bindBridgeUnproxied(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedFilterer{contract: contract}, nil
}

// bindBridgeUnproxied binds a generic wrapper to an already deployed contract.
func bindBridgeUnproxied(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeUnproxiedMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeUnproxied *BridgeUnproxiedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeUnproxied.Contract.BridgeUnproxiedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeUnproxied *BridgeUnproxiedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.BridgeUnproxiedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeUnproxied *BridgeUnproxiedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.BridgeUnproxiedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeUnproxied *BridgeUnproxiedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeUnproxied.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeUnproxied *BridgeUnproxiedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeUnproxied *BridgeUnproxiedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.contract.Transact(opts, method, params...)
}

// DUMMYVAR is a free data retrieval call binding the contract method 0x927dcfab.
//
// Solidity: function DUMMYVAR() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCaller) DUMMYVAR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "DUMMYVAR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DUMMYVAR is a free data retrieval call binding the contract method 0x927dcfab.
//
// Solidity: function DUMMYVAR() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedSession) DUMMYVAR() (*big.Int, error) {
	return _BridgeUnproxied.Contract.DUMMYVAR(&_BridgeUnproxied.CallOpts)
}

// DUMMYVAR is a free data retrieval call binding the contract method 0x927dcfab.
//
// Solidity: function DUMMYVAR() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) DUMMYVAR() (*big.Int, error) {
	return _BridgeUnproxied.Contract.DUMMYVAR(&_BridgeUnproxied.CallOpts)
}

// ActiveOutbox is a free data retrieval call binding the contract method 0xab5d8943.
//
// Solidity: function activeOutbox() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCaller) ActiveOutbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "activeOutbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ActiveOutbox is a free data retrieval call binding the contract method 0xab5d8943.
//
// Solidity: function activeOutbox() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedSession) ActiveOutbox() (common.Address, error) {
	return _BridgeUnproxied.Contract.ActiveOutbox(&_BridgeUnproxied.CallOpts)
}

// ActiveOutbox is a free data retrieval call binding the contract method 0xab5d8943.
//
// Solidity: function activeOutbox() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) ActiveOutbox() (common.Address, error) {
	return _BridgeUnproxied.Contract.ActiveOutbox(&_BridgeUnproxied.CallOpts)
}

// AllowedDelayedInboxList is a free data retrieval call binding the contract method 0xe76f5c8d.
//
// Solidity: function allowedDelayedInboxList(uint256 ) view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCaller) AllowedDelayedInboxList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "allowedDelayedInboxList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedDelayedInboxList is a free data retrieval call binding the contract method 0xe76f5c8d.
//
// Solidity: function allowedDelayedInboxList(uint256 ) view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedSession) AllowedDelayedInboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeUnproxied.Contract.AllowedDelayedInboxList(&_BridgeUnproxied.CallOpts, arg0)
}

// AllowedDelayedInboxList is a free data retrieval call binding the contract method 0xe76f5c8d.
//
// Solidity: function allowedDelayedInboxList(uint256 ) view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) AllowedDelayedInboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeUnproxied.Contract.AllowedDelayedInboxList(&_BridgeUnproxied.CallOpts, arg0)
}

// AllowedDelayedInboxes is a free data retrieval call binding the contract method 0xae60bd13.
//
// Solidity: function allowedDelayedInboxes(address inbox) view returns(bool)
func (_BridgeUnproxied *BridgeUnproxiedCaller) AllowedDelayedInboxes(opts *bind.CallOpts, inbox common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "allowedDelayedInboxes", inbox)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedDelayedInboxes is a free data retrieval call binding the contract method 0xae60bd13.
//
// Solidity: function allowedDelayedInboxes(address inbox) view returns(bool)
func (_BridgeUnproxied *BridgeUnproxiedSession) AllowedDelayedInboxes(inbox common.Address) (bool, error) {
	return _BridgeUnproxied.Contract.AllowedDelayedInboxes(&_BridgeUnproxied.CallOpts, inbox)
}

// AllowedDelayedInboxes is a free data retrieval call binding the contract method 0xae60bd13.
//
// Solidity: function allowedDelayedInboxes(address inbox) view returns(bool)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) AllowedDelayedInboxes(inbox common.Address) (bool, error) {
	return _BridgeUnproxied.Contract.AllowedDelayedInboxes(&_BridgeUnproxied.CallOpts, inbox)
}

// AllowedOutboxList is a free data retrieval call binding the contract method 0x945e1147.
//
// Solidity: function allowedOutboxList(uint256 ) view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCaller) AllowedOutboxList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "allowedOutboxList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedOutboxList is a free data retrieval call binding the contract method 0x945e1147.
//
// Solidity: function allowedOutboxList(uint256 ) view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedSession) AllowedOutboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeUnproxied.Contract.AllowedOutboxList(&_BridgeUnproxied.CallOpts, arg0)
}

// AllowedOutboxList is a free data retrieval call binding the contract method 0x945e1147.
//
// Solidity: function allowedOutboxList(uint256 ) view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) AllowedOutboxList(arg0 *big.Int) (common.Address, error) {
	return _BridgeUnproxied.Contract.AllowedOutboxList(&_BridgeUnproxied.CallOpts, arg0)
}

// AllowedOutboxes is a free data retrieval call binding the contract method 0x413b35bd.
//
// Solidity: function allowedOutboxes(address outbox) view returns(bool)
func (_BridgeUnproxied *BridgeUnproxiedCaller) AllowedOutboxes(opts *bind.CallOpts, outbox common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "allowedOutboxes", outbox)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedOutboxes is a free data retrieval call binding the contract method 0x413b35bd.
//
// Solidity: function allowedOutboxes(address outbox) view returns(bool)
func (_BridgeUnproxied *BridgeUnproxiedSession) AllowedOutboxes(outbox common.Address) (bool, error) {
	return _BridgeUnproxied.Contract.AllowedOutboxes(&_BridgeUnproxied.CallOpts, outbox)
}

// AllowedOutboxes is a free data retrieval call binding the contract method 0x413b35bd.
//
// Solidity: function allowedOutboxes(address outbox) view returns(bool)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) AllowedOutboxes(outbox common.Address) (bool, error) {
	return _BridgeUnproxied.Contract.AllowedOutboxes(&_BridgeUnproxied.CallOpts, outbox)
}

// DelayedInboxAccs is a free data retrieval call binding the contract method 0xd5719dc2.
//
// Solidity: function delayedInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeUnproxied *BridgeUnproxiedCaller) DelayedInboxAccs(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "delayedInboxAccs", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DelayedInboxAccs is a free data retrieval call binding the contract method 0xd5719dc2.
//
// Solidity: function delayedInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeUnproxied *BridgeUnproxiedSession) DelayedInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeUnproxied.Contract.DelayedInboxAccs(&_BridgeUnproxied.CallOpts, arg0)
}

// DelayedInboxAccs is a free data retrieval call binding the contract method 0xd5719dc2.
//
// Solidity: function delayedInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) DelayedInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeUnproxied.Contract.DelayedInboxAccs(&_BridgeUnproxied.CallOpts, arg0)
}

// DelayedMessageCount is a free data retrieval call binding the contract method 0xeca067ad.
//
// Solidity: function delayedMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCaller) DelayedMessageCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "delayedMessageCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DelayedMessageCount is a free data retrieval call binding the contract method 0xeca067ad.
//
// Solidity: function delayedMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedSession) DelayedMessageCount() (*big.Int, error) {
	return _BridgeUnproxied.Contract.DelayedMessageCount(&_BridgeUnproxied.CallOpts)
}

// DelayedMessageCount is a free data retrieval call binding the contract method 0xeca067ad.
//
// Solidity: function delayedMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) DelayedMessageCount() (*big.Int, error) {
	return _BridgeUnproxied.Contract.DelayedMessageCount(&_BridgeUnproxied.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedSession) Rollup() (common.Address, error) {
	return _BridgeUnproxied.Contract.Rollup(&_BridgeUnproxied.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) Rollup() (common.Address, error) {
	return _BridgeUnproxied.Contract.Rollup(&_BridgeUnproxied.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedSession) SequencerInbox() (common.Address, error) {
	return _BridgeUnproxied.Contract.SequencerInbox(&_BridgeUnproxied.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) SequencerInbox() (common.Address, error) {
	return _BridgeUnproxied.Contract.SequencerInbox(&_BridgeUnproxied.CallOpts)
}

// SequencerInboxAccs is a free data retrieval call binding the contract method 0x16bf5579.
//
// Solidity: function sequencerInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeUnproxied *BridgeUnproxiedCaller) SequencerInboxAccs(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "sequencerInboxAccs", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SequencerInboxAccs is a free data retrieval call binding the contract method 0x16bf5579.
//
// Solidity: function sequencerInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeUnproxied *BridgeUnproxiedSession) SequencerInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeUnproxied.Contract.SequencerInboxAccs(&_BridgeUnproxied.CallOpts, arg0)
}

// SequencerInboxAccs is a free data retrieval call binding the contract method 0x16bf5579.
//
// Solidity: function sequencerInboxAccs(uint256 ) view returns(bytes32)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) SequencerInboxAccs(arg0 *big.Int) ([32]byte, error) {
	return _BridgeUnproxied.Contract.SequencerInboxAccs(&_BridgeUnproxied.CallOpts, arg0)
}

// SequencerMessageCount is a free data retrieval call binding the contract method 0x0084120c.
//
// Solidity: function sequencerMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCaller) SequencerMessageCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "sequencerMessageCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerMessageCount is a free data retrieval call binding the contract method 0x0084120c.
//
// Solidity: function sequencerMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedSession) SequencerMessageCount() (*big.Int, error) {
	return _BridgeUnproxied.Contract.SequencerMessageCount(&_BridgeUnproxied.CallOpts)
}

// SequencerMessageCount is a free data retrieval call binding the contract method 0x0084120c.
//
// Solidity: function sequencerMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) SequencerMessageCount() (*big.Int, error) {
	return _BridgeUnproxied.Contract.SequencerMessageCount(&_BridgeUnproxied.CallOpts)
}

// SequencerReportedSubMessageCount is a free data retrieval call binding the contract method 0x5fca4a16.
//
// Solidity: function sequencerReportedSubMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCaller) SequencerReportedSubMessageCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeUnproxied.contract.Call(opts, &out, "sequencerReportedSubMessageCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerReportedSubMessageCount is a free data retrieval call binding the contract method 0x5fca4a16.
//
// Solidity: function sequencerReportedSubMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedSession) SequencerReportedSubMessageCount() (*big.Int, error) {
	return _BridgeUnproxied.Contract.SequencerReportedSubMessageCount(&_BridgeUnproxied.CallOpts)
}

// SequencerReportedSubMessageCount is a free data retrieval call binding the contract method 0x5fca4a16.
//
// Solidity: function sequencerReportedSubMessageCount() view returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedCallerSession) SequencerReportedSubMessageCount() (*big.Int, error) {
	return _BridgeUnproxied.Contract.SequencerReportedSubMessageCount(&_BridgeUnproxied.CallOpts)
}

// AcceptFundsFromOldBridge is a paid mutator transaction binding the contract method 0xe77145f4.
//
// Solidity: function acceptFundsFromOldBridge() payable returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) AcceptFundsFromOldBridge(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "acceptFundsFromOldBridge")
}

// AcceptFundsFromOldBridge is a paid mutator transaction binding the contract method 0xe77145f4.
//
// Solidity: function acceptFundsFromOldBridge() payable returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) AcceptFundsFromOldBridge() (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.AcceptFundsFromOldBridge(&_BridgeUnproxied.TransactOpts)
}

// AcceptFundsFromOldBridge is a paid mutator transaction binding the contract method 0xe77145f4.
//
// Solidity: function acceptFundsFromOldBridge() payable returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) AcceptFundsFromOldBridge() (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.AcceptFundsFromOldBridge(&_BridgeUnproxied.TransactOpts)
}

// EnqueueDelayedMessage is a paid mutator transaction binding the contract method 0x8db5993b.
//
// Solidity: function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedTransactor) EnqueueDelayedMessage(opts *bind.TransactOpts, kind uint8, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "enqueueDelayedMessage", kind, sender, messageDataHash)
}

// EnqueueDelayedMessage is a paid mutator transaction binding the contract method 0x8db5993b.
//
// Solidity: function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedSession) EnqueueDelayedMessage(kind uint8, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.EnqueueDelayedMessage(&_BridgeUnproxied.TransactOpts, kind, sender, messageDataHash)
}

// EnqueueDelayedMessage is a paid mutator transaction binding the contract method 0x8db5993b.
//
// Solidity: function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) EnqueueDelayedMessage(kind uint8, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.EnqueueDelayedMessage(&_BridgeUnproxied.TransactOpts, kind, sender, messageDataHash)
}

// EnqueueSequencerMessage is a paid mutator transaction binding the contract method 0x86598a56.
//
// Solidity: function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns(uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)
func (_BridgeUnproxied *BridgeUnproxiedTransactor) EnqueueSequencerMessage(opts *bind.TransactOpts, dataHash [32]byte, afterDelayedMessagesRead *big.Int, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "enqueueSequencerMessage", dataHash, afterDelayedMessagesRead, prevMessageCount, newMessageCount)
}

// EnqueueSequencerMessage is a paid mutator transaction binding the contract method 0x86598a56.
//
// Solidity: function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns(uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)
func (_BridgeUnproxied *BridgeUnproxiedSession) EnqueueSequencerMessage(dataHash [32]byte, afterDelayedMessagesRead *big.Int, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.EnqueueSequencerMessage(&_BridgeUnproxied.TransactOpts, dataHash, afterDelayedMessagesRead, prevMessageCount, newMessageCount)
}

// EnqueueSequencerMessage is a paid mutator transaction binding the contract method 0x86598a56.
//
// Solidity: function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns(uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) EnqueueSequencerMessage(dataHash [32]byte, afterDelayedMessagesRead *big.Int, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.EnqueueSequencerMessage(&_BridgeUnproxied.TransactOpts, dataHash, afterDelayedMessagesRead, prevMessageCount, newMessageCount)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address to, uint256 value, bytes data) returns(bool success, bytes returnData)
func (_BridgeUnproxied *BridgeUnproxiedTransactor) ExecuteCall(opts *bind.TransactOpts, to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "executeCall", to, value, data)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address to, uint256 value, bytes data) returns(bool success, bytes returnData)
func (_BridgeUnproxied *BridgeUnproxiedSession) ExecuteCall(to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.ExecuteCall(&_BridgeUnproxied.TransactOpts, to, value, data)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0x9e5d4c49.
//
// Solidity: function executeCall(address to, uint256 value, bytes data) returns(bool success, bytes returnData)
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) ExecuteCall(to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.ExecuteCall(&_BridgeUnproxied.TransactOpts, to, value, data)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address rollup_) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) Initialize(opts *bind.TransactOpts, rollup_ common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "initialize", rollup_)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address rollup_) returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) Initialize(rollup_ common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.Initialize(&_BridgeUnproxied.TransactOpts, rollup_)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address rollup_) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) Initialize(rollup_ common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.Initialize(&_BridgeUnproxied.TransactOpts, rollup_)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address inbox, bool enabled) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) SetDelayedInbox(opts *bind.TransactOpts, inbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "setDelayedInbox", inbox, enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address inbox, bool enabled) returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) SetDelayedInbox(inbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetDelayedInbox(&_BridgeUnproxied.TransactOpts, inbox, enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address inbox, bool enabled) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) SetDelayedInbox(inbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetDelayedInbox(&_BridgeUnproxied.TransactOpts, inbox, enabled)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xcee3d728.
//
// Solidity: function setOutbox(address outbox, bool enabled) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) SetOutbox(opts *bind.TransactOpts, outbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "setOutbox", outbox, enabled)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xcee3d728.
//
// Solidity: function setOutbox(address outbox, bool enabled) returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) SetOutbox(outbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetOutbox(&_BridgeUnproxied.TransactOpts, outbox, enabled)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xcee3d728.
//
// Solidity: function setOutbox(address outbox, bool enabled) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) SetOutbox(outbox common.Address, enabled bool) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetOutbox(&_BridgeUnproxied.TransactOpts, outbox, enabled)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetSequencerInbox(&_BridgeUnproxied.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetSequencerInbox(&_BridgeUnproxied.TransactOpts, _sequencerInbox)
}

// SetSequencerReportedSubMessageCount is a paid mutator transaction binding the contract method 0xf81ff3b3.
//
// Solidity: function setSequencerReportedSubMessageCount(uint256 newMsgCount) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) SetSequencerReportedSubMessageCount(opts *bind.TransactOpts, newMsgCount *big.Int) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "setSequencerReportedSubMessageCount", newMsgCount)
}

// SetSequencerReportedSubMessageCount is a paid mutator transaction binding the contract method 0xf81ff3b3.
//
// Solidity: function setSequencerReportedSubMessageCount(uint256 newMsgCount) returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) SetSequencerReportedSubMessageCount(newMsgCount *big.Int) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetSequencerReportedSubMessageCount(&_BridgeUnproxied.TransactOpts, newMsgCount)
}

// SetSequencerReportedSubMessageCount is a paid mutator transaction binding the contract method 0xf81ff3b3.
//
// Solidity: function setSequencerReportedSubMessageCount(uint256 newMsgCount) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) SetSequencerReportedSubMessageCount(newMsgCount *big.Int) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SetSequencerReportedSubMessageCount(&_BridgeUnproxied.TransactOpts, newMsgCount)
}

// SubmitBatchSpendingReport is a paid mutator transaction binding the contract method 0x7a88b107.
//
// Solidity: function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedTransactor) SubmitBatchSpendingReport(opts *bind.TransactOpts, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "submitBatchSpendingReport", sender, messageDataHash)
}

// SubmitBatchSpendingReport is a paid mutator transaction binding the contract method 0x7a88b107.
//
// Solidity: function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedSession) SubmitBatchSpendingReport(sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SubmitBatchSpendingReport(&_BridgeUnproxied.TransactOpts, sender, messageDataHash)
}

// SubmitBatchSpendingReport is a paid mutator transaction binding the contract method 0x7a88b107.
//
// Solidity: function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns(uint256)
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) SubmitBatchSpendingReport(sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.SubmitBatchSpendingReport(&_BridgeUnproxied.TransactOpts, sender, messageDataHash)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x919cc706.
//
// Solidity: function updateRollupAddress(address _rollup) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactor) UpdateRollupAddress(opts *bind.TransactOpts, _rollup common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.contract.Transact(opts, "updateRollupAddress", _rollup)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x919cc706.
//
// Solidity: function updateRollupAddress(address _rollup) returns()
func (_BridgeUnproxied *BridgeUnproxiedSession) UpdateRollupAddress(_rollup common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.UpdateRollupAddress(&_BridgeUnproxied.TransactOpts, _rollup)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x919cc706.
//
// Solidity: function updateRollupAddress(address _rollup) returns()
func (_BridgeUnproxied *BridgeUnproxiedTransactorSession) UpdateRollupAddress(_rollup common.Address) (*types.Transaction, error) {
	return _BridgeUnproxied.Contract.UpdateRollupAddress(&_BridgeUnproxied.TransactOpts, _rollup)
}

// BridgeUnproxiedBridgeCallTriggeredIterator is returned from FilterBridgeCallTriggered and is used to iterate over the raw logs and unpacked data for BridgeCallTriggered events raised by the BridgeUnproxied contract.
type BridgeUnproxiedBridgeCallTriggeredIterator struct {
	Event *BridgeUnproxiedBridgeCallTriggered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedBridgeCallTriggeredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedBridgeCallTriggered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedBridgeCallTriggered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedBridgeCallTriggeredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedBridgeCallTriggeredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedBridgeCallTriggered represents a BridgeCallTriggered event raised by the BridgeUnproxied contract.
type BridgeUnproxiedBridgeCallTriggered struct {
	Outbox common.Address
	To     common.Address
	Value  *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBridgeCallTriggered is a free log retrieval operation binding the contract event 0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466.
//
// Solidity: event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterBridgeCallTriggered(opts *bind.FilterOpts, outbox []common.Address, to []common.Address) (*BridgeUnproxiedBridgeCallTriggeredIterator, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "BridgeCallTriggered", outboxRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedBridgeCallTriggeredIterator{contract: _BridgeUnproxied.contract, event: "BridgeCallTriggered", logs: logs, sub: sub}, nil
}

// WatchBridgeCallTriggered is a free log subscription operation binding the contract event 0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466.
//
// Solidity: event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchBridgeCallTriggered(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedBridgeCallTriggered, outbox []common.Address, to []common.Address) (event.Subscription, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "BridgeCallTriggered", outboxRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedBridgeCallTriggered)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "BridgeCallTriggered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeCallTriggered is a log parse operation binding the contract event 0x2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466.
//
// Solidity: event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseBridgeCallTriggered(log types.Log) (*BridgeUnproxiedBridgeCallTriggered, error) {
	event := new(BridgeUnproxiedBridgeCallTriggered)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "BridgeCallTriggered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedInboxToggleIterator is returned from FilterInboxToggle and is used to iterate over the raw logs and unpacked data for InboxToggle events raised by the BridgeUnproxied contract.
type BridgeUnproxiedInboxToggleIterator struct {
	Event *BridgeUnproxiedInboxToggle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedInboxToggleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedInboxToggle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedInboxToggle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedInboxToggleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedInboxToggleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedInboxToggle represents a InboxToggle event raised by the BridgeUnproxied contract.
type BridgeUnproxiedInboxToggle struct {
	Inbox   common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInboxToggle is a free log retrieval operation binding the contract event 0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521.
//
// Solidity: event InboxToggle(address indexed inbox, bool enabled)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterInboxToggle(opts *bind.FilterOpts, inbox []common.Address) (*BridgeUnproxiedInboxToggleIterator, error) {

	var inboxRule []interface{}
	for _, inboxItem := range inbox {
		inboxRule = append(inboxRule, inboxItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "InboxToggle", inboxRule)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedInboxToggleIterator{contract: _BridgeUnproxied.contract, event: "InboxToggle", logs: logs, sub: sub}, nil
}

// WatchInboxToggle is a free log subscription operation binding the contract event 0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521.
//
// Solidity: event InboxToggle(address indexed inbox, bool enabled)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchInboxToggle(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedInboxToggle, inbox []common.Address) (event.Subscription, error) {

	var inboxRule []interface{}
	for _, inboxItem := range inbox {
		inboxRule = append(inboxRule, inboxItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "InboxToggle", inboxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedInboxToggle)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "InboxToggle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxToggle is a log parse operation binding the contract event 0x6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521.
//
// Solidity: event InboxToggle(address indexed inbox, bool enabled)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseInboxToggle(log types.Log) (*BridgeUnproxiedInboxToggle, error) {
	event := new(BridgeUnproxiedInboxToggle)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "InboxToggle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BridgeUnproxied contract.
type BridgeUnproxiedInitializedIterator struct {
	Event *BridgeUnproxiedInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedInitialized represents a Initialized event raised by the BridgeUnproxied contract.
type BridgeUnproxiedInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterInitialized(opts *bind.FilterOpts) (*BridgeUnproxiedInitializedIterator, error) {

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedInitializedIterator{contract: _BridgeUnproxied.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedInitialized) (event.Subscription, error) {

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedInitialized)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseInitialized(log types.Log) (*BridgeUnproxiedInitialized, error) {
	event := new(BridgeUnproxiedInitialized)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedMessageDeliveredIterator is returned from FilterMessageDelivered and is used to iterate over the raw logs and unpacked data for MessageDelivered events raised by the BridgeUnproxied contract.
type BridgeUnproxiedMessageDeliveredIterator struct {
	Event *BridgeUnproxiedMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedMessageDelivered represents a MessageDelivered event raised by the BridgeUnproxied contract.
type BridgeUnproxiedMessageDelivered struct {
	MessageIndex    *big.Int
	BeforeInboxAcc  [32]byte
	Inbox           common.Address
	Kind            uint8
	Sender          common.Address
	MessageDataHash [32]byte
	BaseFeeL1       *big.Int
	Timestamp       uint64
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMessageDelivered is a free log retrieval operation binding the contract event 0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1.
//
// Solidity: event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterMessageDelivered(opts *bind.FilterOpts, messageIndex []*big.Int, beforeInboxAcc [][32]byte) (*BridgeUnproxiedMessageDeliveredIterator, error) {

	var messageIndexRule []interface{}
	for _, messageIndexItem := range messageIndex {
		messageIndexRule = append(messageIndexRule, messageIndexItem)
	}
	var beforeInboxAccRule []interface{}
	for _, beforeInboxAccItem := range beforeInboxAcc {
		beforeInboxAccRule = append(beforeInboxAccRule, beforeInboxAccItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "MessageDelivered", messageIndexRule, beforeInboxAccRule)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedMessageDeliveredIterator{contract: _BridgeUnproxied.contract, event: "MessageDelivered", logs: logs, sub: sub}, nil
}

// WatchMessageDelivered is a free log subscription operation binding the contract event 0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1.
//
// Solidity: event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchMessageDelivered(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedMessageDelivered, messageIndex []*big.Int, beforeInboxAcc [][32]byte) (event.Subscription, error) {

	var messageIndexRule []interface{}
	for _, messageIndexItem := range messageIndex {
		messageIndexRule = append(messageIndexRule, messageIndexItem)
	}
	var beforeInboxAccRule []interface{}
	for _, beforeInboxAccItem := range beforeInboxAcc {
		beforeInboxAccRule = append(beforeInboxAccRule, beforeInboxAccItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "MessageDelivered", messageIndexRule, beforeInboxAccRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedMessageDelivered)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "MessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageDelivered is a log parse operation binding the contract event 0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1.
//
// Solidity: event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseMessageDelivered(log types.Log) (*BridgeUnproxiedMessageDelivered, error) {
	event := new(BridgeUnproxiedMessageDelivered)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "MessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedOutboxToggleIterator is returned from FilterOutboxToggle and is used to iterate over the raw logs and unpacked data for OutboxToggle events raised by the BridgeUnproxied contract.
type BridgeUnproxiedOutboxToggleIterator struct {
	Event *BridgeUnproxiedOutboxToggle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedOutboxToggleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedOutboxToggle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedOutboxToggle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedOutboxToggleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedOutboxToggleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedOutboxToggle represents a OutboxToggle event raised by the BridgeUnproxied contract.
type BridgeUnproxiedOutboxToggle struct {
	Outbox  common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOutboxToggle is a free log retrieval operation binding the contract event 0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa.
//
// Solidity: event OutboxToggle(address indexed outbox, bool enabled)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterOutboxToggle(opts *bind.FilterOpts, outbox []common.Address) (*BridgeUnproxiedOutboxToggleIterator, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "OutboxToggle", outboxRule)
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedOutboxToggleIterator{contract: _BridgeUnproxied.contract, event: "OutboxToggle", logs: logs, sub: sub}, nil
}

// WatchOutboxToggle is a free log subscription operation binding the contract event 0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa.
//
// Solidity: event OutboxToggle(address indexed outbox, bool enabled)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchOutboxToggle(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedOutboxToggle, outbox []common.Address) (event.Subscription, error) {

	var outboxRule []interface{}
	for _, outboxItem := range outbox {
		outboxRule = append(outboxRule, outboxItem)
	}

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "OutboxToggle", outboxRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedOutboxToggle)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "OutboxToggle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutboxToggle is a log parse operation binding the contract event 0x49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa.
//
// Solidity: event OutboxToggle(address indexed outbox, bool enabled)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseOutboxToggle(log types.Log) (*BridgeUnproxiedOutboxToggle, error) {
	event := new(BridgeUnproxiedOutboxToggle)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "OutboxToggle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedRollupUpdatedIterator is returned from FilterRollupUpdated and is used to iterate over the raw logs and unpacked data for RollupUpdated events raised by the BridgeUnproxied contract.
type BridgeUnproxiedRollupUpdatedIterator struct {
	Event *BridgeUnproxiedRollupUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedRollupUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedRollupUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedRollupUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedRollupUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedRollupUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedRollupUpdated represents a RollupUpdated event raised by the BridgeUnproxied contract.
type BridgeUnproxiedRollupUpdated struct {
	Rollup common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollupUpdated is a free log retrieval operation binding the contract event 0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a.
//
// Solidity: event RollupUpdated(address rollup)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterRollupUpdated(opts *bind.FilterOpts) (*BridgeUnproxiedRollupUpdatedIterator, error) {

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "RollupUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedRollupUpdatedIterator{contract: _BridgeUnproxied.contract, event: "RollupUpdated", logs: logs, sub: sub}, nil
}

// WatchRollupUpdated is a free log subscription operation binding the contract event 0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a.
//
// Solidity: event RollupUpdated(address rollup)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchRollupUpdated(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedRollupUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "RollupUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedRollupUpdated)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "RollupUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupUpdated is a log parse operation binding the contract event 0xae1f5aa15f6ff844896347ceca2a3c24c8d3a27785efdeacd581a0a95172784a.
//
// Solidity: event RollupUpdated(address rollup)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseRollupUpdated(log types.Log) (*BridgeUnproxiedRollupUpdated, error) {
	event := new(BridgeUnproxiedRollupUpdated)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "RollupUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnproxiedSequencerInboxUpdatedIterator is returned from FilterSequencerInboxUpdated and is used to iterate over the raw logs and unpacked data for SequencerInboxUpdated events raised by the BridgeUnproxied contract.
type BridgeUnproxiedSequencerInboxUpdatedIterator struct {
	Event *BridgeUnproxiedSequencerInboxUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnproxiedSequencerInboxUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnproxiedSequencerInboxUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnproxiedSequencerInboxUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnproxiedSequencerInboxUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnproxiedSequencerInboxUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnproxiedSequencerInboxUpdated represents a SequencerInboxUpdated event raised by the BridgeUnproxied contract.
type BridgeUnproxiedSequencerInboxUpdated struct {
	NewSequencerInbox common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSequencerInboxUpdated is a free log retrieval operation binding the contract event 0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a.
//
// Solidity: event SequencerInboxUpdated(address newSequencerInbox)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) FilterSequencerInboxUpdated(opts *bind.FilterOpts) (*BridgeUnproxiedSequencerInboxUpdatedIterator, error) {

	logs, sub, err := _BridgeUnproxied.contract.FilterLogs(opts, "SequencerInboxUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeUnproxiedSequencerInboxUpdatedIterator{contract: _BridgeUnproxied.contract, event: "SequencerInboxUpdated", logs: logs, sub: sub}, nil
}

// WatchSequencerInboxUpdated is a free log subscription operation binding the contract event 0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a.
//
// Solidity: event SequencerInboxUpdated(address newSequencerInbox)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) WatchSequencerInboxUpdated(opts *bind.WatchOpts, sink chan<- *BridgeUnproxiedSequencerInboxUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeUnproxied.contract.WatchLogs(opts, "SequencerInboxUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnproxiedSequencerInboxUpdated)
				if err := _BridgeUnproxied.contract.UnpackLog(event, "SequencerInboxUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerInboxUpdated is a log parse operation binding the contract event 0x8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a.
//
// Solidity: event SequencerInboxUpdated(address newSequencerInbox)
func (_BridgeUnproxied *BridgeUnproxiedFilterer) ParseSequencerInboxUpdated(log types.Log) (*BridgeUnproxiedSequencerInboxUpdated, error) {
	event := new(BridgeUnproxiedSequencerInboxUpdated)
	if err := _BridgeUnproxied.contract.UnpackLog(event, "SequencerInboxUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CreateTestMetaData contains all meta data concerning the CreateTest contract.
var CreateTestMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]",
	Bin: "0x60808060405234601557610265908161001b8239f35b600080fdfe6080604052346100fe5761002c61002661001836610103565b356001600160f81b03191690565b60f81c90565b61005960ff600261003d3636610123565b8061005361004d8285989561013e565b90610169565b9561014c565b92909416146000146100e35761007a818061005361004d610081958861013e565b36916101e1565b9060208251920190f55b6001600160a01b038116156100ab576100a390610212565b602081519101f35b60405162461bcd60e51b815260206004820152601060248201526f6661696c656420746f2063726561746560801b6044820152606490fd5b916100f0919236916101e1565b9060208251920190f061008b565b600080fd5b1561010d57600090565b634e487b7160e01b600052603260045260246000fd5b919091826001116100fe5782116100fe576001916000190190565b906020116100fe5790602090565b90929192836020116100fe5783116100fe5760200191601f190190565b359060208110610177575090565b6000199060200360031b1b1690565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176101c157604052565b610186565b6001600160401b0381116101c157601f01601f191660200190565b9291926101f56101f0836101c6565b61019c565b93828552828201116100fe57816000926020928387013784010152565b90813b60006102236101f0836101c6565b9382855260208501903c56fea26469706673582212208a9fcf3c13fc54f3541138c5854fa9a41d603e92170ef6fa1a84cab62433321b64736f6c63430008190033",
}

// CreateTestABI is the input ABI used to generate the binding from.
// Deprecated: Use CreateTestMetaData.ABI instead.
var CreateTestABI = CreateTestMetaData.ABI

// CreateTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CreateTestMetaData.Bin instead.
var CreateTestBin = CreateTestMetaData.Bin

// DeployCreateTest deploys a new Ethereum contract, binding an instance of CreateTest to it.
func DeployCreateTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CreateTest, error) {
	parsed, err := CreateTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CreateTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CreateTest{CreateTestCaller: CreateTestCaller{contract: contract}, CreateTestTransactor: CreateTestTransactor{contract: contract}, CreateTestFilterer: CreateTestFilterer{contract: contract}}, nil
}

// CreateTest is an auto generated Go binding around an Ethereum contract.
type CreateTest struct {
	CreateTestCaller     // Read-only binding to the contract
	CreateTestTransactor // Write-only binding to the contract
	CreateTestFilterer   // Log filterer for contract events
}

// CreateTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type CreateTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CreateTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CreateTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CreateTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CreateTestSession struct {
	Contract     *CreateTest       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CreateTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CreateTestCallerSession struct {
	Contract *CreateTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CreateTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CreateTestTransactorSession struct {
	Contract     *CreateTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CreateTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type CreateTestRaw struct {
	Contract *CreateTest // Generic contract binding to access the raw methods on
}

// CreateTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CreateTestCallerRaw struct {
	Contract *CreateTestCaller // Generic read-only contract binding to access the raw methods on
}

// CreateTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CreateTestTransactorRaw struct {
	Contract *CreateTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreateTest creates a new instance of CreateTest, bound to a specific deployed contract.
func NewCreateTest(address common.Address, backend bind.ContractBackend) (*CreateTest, error) {
	contract, err := bindCreateTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CreateTest{CreateTestCaller: CreateTestCaller{contract: contract}, CreateTestTransactor: CreateTestTransactor{contract: contract}, CreateTestFilterer: CreateTestFilterer{contract: contract}}, nil
}

// NewCreateTestCaller creates a new read-only instance of CreateTest, bound to a specific deployed contract.
func NewCreateTestCaller(address common.Address, caller bind.ContractCaller) (*CreateTestCaller, error) {
	contract, err := bindCreateTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CreateTestCaller{contract: contract}, nil
}

// NewCreateTestTransactor creates a new write-only instance of CreateTest, bound to a specific deployed contract.
func NewCreateTestTransactor(address common.Address, transactor bind.ContractTransactor) (*CreateTestTransactor, error) {
	contract, err := bindCreateTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CreateTestTransactor{contract: contract}, nil
}

// NewCreateTestFilterer creates a new log filterer instance of CreateTest, bound to a specific deployed contract.
func NewCreateTestFilterer(address common.Address, filterer bind.ContractFilterer) (*CreateTestFilterer, error) {
	contract, err := bindCreateTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CreateTestFilterer{contract: contract}, nil
}

// bindCreateTest binds a generic wrapper to an already deployed contract.
func bindCreateTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CreateTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CreateTest *CreateTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CreateTest.Contract.CreateTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CreateTest *CreateTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CreateTest.Contract.CreateTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CreateTest *CreateTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CreateTest.Contract.CreateTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CreateTest *CreateTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CreateTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CreateTest *CreateTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CreateTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CreateTest *CreateTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CreateTest.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_CreateTest *CreateTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _CreateTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_CreateTest *CreateTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _CreateTest.Contract.Fallback(&_CreateTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_CreateTest *CreateTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _CreateTest.Contract.Fallback(&_CreateTest.TransactOpts, calldata)
}

// EspressoTEEVerifierMockMetaData contains all meta data concerning the EspressoTEEVerifierMock contract.
var EspressoTEEVerifierMockMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enumEspressoTEEVerifierMock.TeeType\",\"name\":\"teeType\",\"type\":\"uint8\"}],\"name\":\"registerSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"enumEspressoTEEVerifierMock.TeeType\",\"name\":\"teeType\",\"type\":\"uint8\"}],\"name\":\"registeredSigners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"userDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumEspressoTEEVerifierMock.TeeType\",\"name\":\"teeType\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610266908161001b8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826335ecb4c11461012557508163a81d9c5c146100da57508063defc69ec1461009e5763e9b1a7be1461005157600080fd5b3461009a578060031936011261009a5761006961021a565b60026024351015610096576001600160a01b0316825260208281529181902054905160ff90911615158152f35b8280fd5b5080fd5b503461009a57602036600319011261009a5760209160ff9082906001600160a01b036100c861021a565b16815280855220541690519015158152f35b905034610096576060366003190112610096578035906001600160401b0382116101215761010a913691016101e8565b50506002604435101561009a576020905160018152f35b8380fd5b90915034610121576060366003190112610121576001600160401b0382358181116101e05761015790369085016101e8565b50506024359081116101e45761017090369084016101e8565b919092600260443510156101e057601483036101a9575050601411610096573560601c8252816020528120600160ff1982541617905580f35b62461bcd60e51b82526020908201526013602482015272092dcecc2d8d2c840c8c2e8c240d8cadccee8d606b1b6044820152606490fd5b8580fd5b8480fd5b9181601f84011215610215578235916001600160401b038311610215576020838186019501011161021557565b600080fd5b600435906001600160a01b03821682036102155756fea264697066735822122038b09d03c3a7ffefe8f3e5499d3e52790a25dc7b7f55e8d507dcc666ee58213164736f6c63430008190033",
}

// EspressoTEEVerifierMockABI is the input ABI used to generate the binding from.
// Deprecated: Use EspressoTEEVerifierMockMetaData.ABI instead.
var EspressoTEEVerifierMockABI = EspressoTEEVerifierMockMetaData.ABI

// EspressoTEEVerifierMockBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EspressoTEEVerifierMockMetaData.Bin instead.
var EspressoTEEVerifierMockBin = EspressoTEEVerifierMockMetaData.Bin

// DeployEspressoTEEVerifierMock deploys a new Ethereum contract, binding an instance of EspressoTEEVerifierMock to it.
func DeployEspressoTEEVerifierMock(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EspressoTEEVerifierMock, error) {
	parsed, err := EspressoTEEVerifierMockMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EspressoTEEVerifierMockBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EspressoTEEVerifierMock{EspressoTEEVerifierMockCaller: EspressoTEEVerifierMockCaller{contract: contract}, EspressoTEEVerifierMockTransactor: EspressoTEEVerifierMockTransactor{contract: contract}, EspressoTEEVerifierMockFilterer: EspressoTEEVerifierMockFilterer{contract: contract}}, nil
}

// EspressoTEEVerifierMock is an auto generated Go binding around an Ethereum contract.
type EspressoTEEVerifierMock struct {
	EspressoTEEVerifierMockCaller     // Read-only binding to the contract
	EspressoTEEVerifierMockTransactor // Write-only binding to the contract
	EspressoTEEVerifierMockFilterer   // Log filterer for contract events
}

// EspressoTEEVerifierMockCaller is an auto generated read-only Go binding around an Ethereum contract.
type EspressoTEEVerifierMockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EspressoTEEVerifierMockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EspressoTEEVerifierMockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EspressoTEEVerifierMockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EspressoTEEVerifierMockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EspressoTEEVerifierMockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EspressoTEEVerifierMockSession struct {
	Contract     *EspressoTEEVerifierMock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EspressoTEEVerifierMockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EspressoTEEVerifierMockCallerSession struct {
	Contract *EspressoTEEVerifierMockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// EspressoTEEVerifierMockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EspressoTEEVerifierMockTransactorSession struct {
	Contract     *EspressoTEEVerifierMockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// EspressoTEEVerifierMockRaw is an auto generated low-level Go binding around an Ethereum contract.
type EspressoTEEVerifierMockRaw struct {
	Contract *EspressoTEEVerifierMock // Generic contract binding to access the raw methods on
}

// EspressoTEEVerifierMockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EspressoTEEVerifierMockCallerRaw struct {
	Contract *EspressoTEEVerifierMockCaller // Generic read-only contract binding to access the raw methods on
}

// EspressoTEEVerifierMockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EspressoTEEVerifierMockTransactorRaw struct {
	Contract *EspressoTEEVerifierMockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEspressoTEEVerifierMock creates a new instance of EspressoTEEVerifierMock, bound to a specific deployed contract.
func NewEspressoTEEVerifierMock(address common.Address, backend bind.ContractBackend) (*EspressoTEEVerifierMock, error) {
	contract, err := bindEspressoTEEVerifierMock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EspressoTEEVerifierMock{EspressoTEEVerifierMockCaller: EspressoTEEVerifierMockCaller{contract: contract}, EspressoTEEVerifierMockTransactor: EspressoTEEVerifierMockTransactor{contract: contract}, EspressoTEEVerifierMockFilterer: EspressoTEEVerifierMockFilterer{contract: contract}}, nil
}

// NewEspressoTEEVerifierMockCaller creates a new read-only instance of EspressoTEEVerifierMock, bound to a specific deployed contract.
func NewEspressoTEEVerifierMockCaller(address common.Address, caller bind.ContractCaller) (*EspressoTEEVerifierMockCaller, error) {
	contract, err := bindEspressoTEEVerifierMock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EspressoTEEVerifierMockCaller{contract: contract}, nil
}

// NewEspressoTEEVerifierMockTransactor creates a new write-only instance of EspressoTEEVerifierMock, bound to a specific deployed contract.
func NewEspressoTEEVerifierMockTransactor(address common.Address, transactor bind.ContractTransactor) (*EspressoTEEVerifierMockTransactor, error) {
	contract, err := bindEspressoTEEVerifierMock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EspressoTEEVerifierMockTransactor{contract: contract}, nil
}

// NewEspressoTEEVerifierMockFilterer creates a new log filterer instance of EspressoTEEVerifierMock, bound to a specific deployed contract.
func NewEspressoTEEVerifierMockFilterer(address common.Address, filterer bind.ContractFilterer) (*EspressoTEEVerifierMockFilterer, error) {
	contract, err := bindEspressoTEEVerifierMock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EspressoTEEVerifierMockFilterer{contract: contract}, nil
}

// bindEspressoTEEVerifierMock binds a generic wrapper to an already deployed contract.
func bindEspressoTEEVerifierMock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EspressoTEEVerifierMockMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EspressoTEEVerifierMock.Contract.EspressoTEEVerifierMockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.Contract.EspressoTEEVerifierMockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.Contract.EspressoTEEVerifierMockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EspressoTEEVerifierMock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.Contract.contract.Transact(opts, method, params...)
}

// RegisteredSigner is a free data retrieval call binding the contract method 0xdefc69ec.
//
// Solidity: function registeredSigner(address ) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCaller) RegisteredSigner(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _EspressoTEEVerifierMock.contract.Call(opts, &out, "registeredSigner", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RegisteredSigner is a free data retrieval call binding the contract method 0xdefc69ec.
//
// Solidity: function registeredSigner(address ) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockSession) RegisteredSigner(arg0 common.Address) (bool, error) {
	return _EspressoTEEVerifierMock.Contract.RegisteredSigner(&_EspressoTEEVerifierMock.CallOpts, arg0)
}

// RegisteredSigner is a free data retrieval call binding the contract method 0xdefc69ec.
//
// Solidity: function registeredSigner(address ) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCallerSession) RegisteredSigner(arg0 common.Address) (bool, error) {
	return _EspressoTEEVerifierMock.Contract.RegisteredSigner(&_EspressoTEEVerifierMock.CallOpts, arg0)
}

// RegisteredSigners is a free data retrieval call binding the contract method 0xe9b1a7be.
//
// Solidity: function registeredSigners(address signer, uint8 teeType) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCaller) RegisteredSigners(opts *bind.CallOpts, signer common.Address, teeType uint8) (bool, error) {
	var out []interface{}
	err := _EspressoTEEVerifierMock.contract.Call(opts, &out, "registeredSigners", signer, teeType)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RegisteredSigners is a free data retrieval call binding the contract method 0xe9b1a7be.
//
// Solidity: function registeredSigners(address signer, uint8 teeType) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockSession) RegisteredSigners(signer common.Address, teeType uint8) (bool, error) {
	return _EspressoTEEVerifierMock.Contract.RegisteredSigners(&_EspressoTEEVerifierMock.CallOpts, signer, teeType)
}

// RegisteredSigners is a free data retrieval call binding the contract method 0xe9b1a7be.
//
// Solidity: function registeredSigners(address signer, uint8 teeType) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCallerSession) RegisteredSigners(signer common.Address, teeType uint8) (bool, error) {
	return _EspressoTEEVerifierMock.Contract.RegisteredSigners(&_EspressoTEEVerifierMock.CallOpts, signer, teeType)
}

// Verify is a free data retrieval call binding the contract method 0xa81d9c5c.
//
// Solidity: function verify(bytes signature, bytes32 userDataHash, uint8 teeType) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCaller) Verify(opts *bind.CallOpts, signature []byte, userDataHash [32]byte, teeType uint8) (bool, error) {
	var out []interface{}
	err := _EspressoTEEVerifierMock.contract.Call(opts, &out, "verify", signature, userDataHash, teeType)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xa81d9c5c.
//
// Solidity: function verify(bytes signature, bytes32 userDataHash, uint8 teeType) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockSession) Verify(signature []byte, userDataHash [32]byte, teeType uint8) (bool, error) {
	return _EspressoTEEVerifierMock.Contract.Verify(&_EspressoTEEVerifierMock.CallOpts, signature, userDataHash, teeType)
}

// Verify is a free data retrieval call binding the contract method 0xa81d9c5c.
//
// Solidity: function verify(bytes signature, bytes32 userDataHash, uint8 teeType) view returns(bool)
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockCallerSession) Verify(signature []byte, userDataHash [32]byte, teeType uint8) (bool, error) {
	return _EspressoTEEVerifierMock.Contract.Verify(&_EspressoTEEVerifierMock.CallOpts, signature, userDataHash, teeType)
}

// RegisterSigner is a paid mutator transaction binding the contract method 0x35ecb4c1.
//
// Solidity: function registerSigner(bytes attestation, bytes data, uint8 teeType) returns()
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockTransactor) RegisterSigner(opts *bind.TransactOpts, attestation []byte, data []byte, teeType uint8) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.contract.Transact(opts, "registerSigner", attestation, data, teeType)
}

// RegisterSigner is a paid mutator transaction binding the contract method 0x35ecb4c1.
//
// Solidity: function registerSigner(bytes attestation, bytes data, uint8 teeType) returns()
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockSession) RegisterSigner(attestation []byte, data []byte, teeType uint8) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.Contract.RegisterSigner(&_EspressoTEEVerifierMock.TransactOpts, attestation, data, teeType)
}

// RegisterSigner is a paid mutator transaction binding the contract method 0x35ecb4c1.
//
// Solidity: function registerSigner(bytes attestation, bytes data, uint8 teeType) returns()
func (_EspressoTEEVerifierMock *EspressoTEEVerifierMockTransactorSession) RegisterSigner(attestation []byte, data []byte, teeType uint8) (*types.Transaction, error) {
	return _EspressoTEEVerifierMock.Contract.RegisterSigner(&_EspressoTEEVerifierMock.TransactOpts, attestation, data, teeType)
}

// HostioTestMetaData contains all meta data concerning the HostioTest contract.
var HostioTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCodeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCodehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"int8\",\"name\":\"n\",\"type\":\"int8\"},{\"internalType\":\"bytes32\",\"name\":\"t1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"t2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"t3\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"t4\",\"type\":\"bytes32\"}],\"name\":\"emitLog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmGasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmInkLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitEarly\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"preimage\",\"type\":\"bytes\"}],\"name\":\"keccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"mathAddMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"mathMulMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathPow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnDataSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"transientLoadBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"transientStoreBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txInkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506108488061001d5f395ff3fe60806040526004361061017e575f3560e01c806398071112116100d4578063d294cb0f11610083578063d294cb0f1461039c578063d737d0c7146103c3578063ddf363d7146103d5578063e5c47e1d146103db578063e6334eea146103ed578063f6b4dfb4146103fe578063f7be3e8d14610410578063f96757d11461042f575f80fd5b806398071112146102cb5780639c16cfe8146102f7578063a520508f14610315578063a83ede1c14610333578063adb6183214610352578063cd84980e14610364578063cebcbba914610376575f80fd5b806357e871e71161013057806357e871e7146102385780636417b4d51461024a5780637877a797146102695780637c6aa4661461027b5780637d00629614610226578063860e61991461029a57806389995319146102ac575f80fd5b8063131260d0146101825780632233a918146101b457806323fc7ef3146101d257806328ed15d5146101f15780632dc26516146101f157806334eb2d6b14610205578063534ca05414610226575b5f80fd5b34801561018d575f80fd5b506101a161019c3660046105fa565b610441565b6040519081526020015b60405180910390f35b3480156101bf575f80fd5b506101a16101ce366004610623565b3f90565b3480156101dd575f80fd5b506101a16101ec36600461068e565b61045b565b3480156101fc575f80fd5b506101a161047c565b348015610210575f80fd5b5061022461021f3660046106cd565b610483565b005b348015610231575f80fd5b503a6101a1565b348015610243575f80fd5b50436101a1565b348015610255575f80fd5b506102246102643660046106ed565b61048a565b348015610274575f80fd5b50456101a1565b348015610286575f80fd5b506101a16102953660046106cd565b610588565b3480156102a5575f80fd5b503d6101a1565b3480156102b7575f80fd5b506101a16102c63660046106cd565b900a90565b3480156102d6575f80fd5b506102ea6102e5366004610623565b61059a565b6040516101ab9190610766565b348015610302575f80fd5b506101a16103113660046107b2565b5c90565b348015610320575f80fd5b506101a161032f366004610623565b3b90565b34801561033e575f80fd5b506101a161034d3660046105fa565b6105d5565b34801561035d575f80fd5b50426101a1565b34801561036f575f80fd5b50466101a1565b348015610381575f80fd5b50415b6040516001600160a01b0390911681526020016101ab565b3480156103a7575f80fd5b506101a16103b6366004610623565b6001600160a01b03163190565b3480156103ce575f80fd5b5033610384565b346101a1565b3480156103e6575f80fd5b50486101a1565b3480156103f8575f80fd5b50610224005b348015610409575f80fd5b5030610384565b34801561041b575f80fd5b506101a161042a3660046106cd565b6105ef565b34801561043a575f80fd5b5032610384565b5f8180610450576104506107c9565b838509949350505050565b5f828260405161046c9291906107dd565b6040518091039020905092915050565b5f5a905090565b80825d5050565b5f87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093945050505086810b90036104d757805160208201a061057e565b855f0b6001036104ee5784815160208301a161057e565b855f0b600203610506578385825160208401a261057e565b855f0b60030361051f57828486835160208501a361057e565b855f0b6004036105395781838587845160208601a461057e565b60405162461bcd60e51b8152602060048201526016602482015275696e76616c6964206e20666f7220656d6974206c6f6760501b604482015260640160405180910390fd5b5050505050505050565b5f61059382846107ec565b9392505050565b604080516127108082526127408201909252606091905f9082602082018180368337019050509050815f60208301863c923b83525090919050565b5f81806105e4576105e46107c9565b838508949350505050565b5f61059382846107ff565b5f805f6060848603121561060c575f80fd5b505081359360208301359350604090920135919050565b5f60208284031215610633575f80fd5b81356001600160a01b0381168114610593575f80fd5b5f8083601f840112610659575f80fd5b50813567ffffffffffffffff811115610670575f80fd5b602083019150836020828501011115610687575f80fd5b9250929050565b5f806020838503121561069f575f80fd5b823567ffffffffffffffff8111156106b5575f80fd5b6106c185828601610649565b90969095509350505050565b5f80604083850312156106de575f80fd5b50508035926020909101359150565b5f805f805f805f60c0888a031215610703575f80fd5b873567ffffffffffffffff811115610719575f80fd5b6107258a828b01610649565b90985096505060208801355f81900b811461073e575f80fd5b96999598509596604081013596506060810135956080820135955060a0909101359350915050565b5f602080835283518060208501525f5b8181101561079257858101830151858201604001528201610776565b505f604082860101526040601f19601f8301168501019250505092915050565b5f602082840312156107c2575f80fd5b5035919050565b634e487b7160e01b5f52601260045260245ffd5b818382375f9101908152919050565b5f826107fa576107fa6107c9565b500490565b5f8261080d5761080d6107c9565b50069056fea2646970667358221220b8a238aafe3fdbfea9be288ac225ff167466dcd9b857d846f81cea9c4088294064736f6c63430008180033",
}

// HostioTestABI is the input ABI used to generate the binding from.
// Deprecated: Use HostioTestMetaData.ABI instead.
var HostioTestABI = HostioTestMetaData.ABI

// HostioTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HostioTestMetaData.Bin instead.
var HostioTestBin = HostioTestMetaData.Bin

// DeployHostioTest deploys a new Ethereum contract, binding an instance of HostioTest to it.
func DeployHostioTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *HostioTest, error) {
	parsed, err := HostioTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HostioTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HostioTest{HostioTestCaller: HostioTestCaller{contract: contract}, HostioTestTransactor: HostioTestTransactor{contract: contract}, HostioTestFilterer: HostioTestFilterer{contract: contract}}, nil
}

// HostioTest is an auto generated Go binding around an Ethereum contract.
type HostioTest struct {
	HostioTestCaller     // Read-only binding to the contract
	HostioTestTransactor // Write-only binding to the contract
	HostioTestFilterer   // Log filterer for contract events
}

// HostioTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type HostioTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HostioTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HostioTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HostioTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HostioTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HostioTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HostioTestSession struct {
	Contract     *HostioTest       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HostioTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HostioTestCallerSession struct {
	Contract *HostioTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// HostioTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HostioTestTransactorSession struct {
	Contract     *HostioTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// HostioTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type HostioTestRaw struct {
	Contract *HostioTest // Generic contract binding to access the raw methods on
}

// HostioTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HostioTestCallerRaw struct {
	Contract *HostioTestCaller // Generic read-only contract binding to access the raw methods on
}

// HostioTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HostioTestTransactorRaw struct {
	Contract *HostioTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHostioTest creates a new instance of HostioTest, bound to a specific deployed contract.
func NewHostioTest(address common.Address, backend bind.ContractBackend) (*HostioTest, error) {
	contract, err := bindHostioTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HostioTest{HostioTestCaller: HostioTestCaller{contract: contract}, HostioTestTransactor: HostioTestTransactor{contract: contract}, HostioTestFilterer: HostioTestFilterer{contract: contract}}, nil
}

// NewHostioTestCaller creates a new read-only instance of HostioTest, bound to a specific deployed contract.
func NewHostioTestCaller(address common.Address, caller bind.ContractCaller) (*HostioTestCaller, error) {
	contract, err := bindHostioTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HostioTestCaller{contract: contract}, nil
}

// NewHostioTestTransactor creates a new write-only instance of HostioTest, bound to a specific deployed contract.
func NewHostioTestTransactor(address common.Address, transactor bind.ContractTransactor) (*HostioTestTransactor, error) {
	contract, err := bindHostioTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HostioTestTransactor{contract: contract}, nil
}

// NewHostioTestFilterer creates a new log filterer instance of HostioTest, bound to a specific deployed contract.
func NewHostioTestFilterer(address common.Address, filterer bind.ContractFilterer) (*HostioTestFilterer, error) {
	contract, err := bindHostioTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HostioTestFilterer{contract: contract}, nil
}

// bindHostioTest binds a generic wrapper to an already deployed contract.
func bindHostioTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := HostioTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HostioTest *HostioTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HostioTest.Contract.HostioTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HostioTest *HostioTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HostioTest.Contract.HostioTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HostioTest *HostioTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HostioTest.Contract.HostioTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HostioTest *HostioTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HostioTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HostioTest *HostioTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HostioTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HostioTest *HostioTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HostioTest.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xd294cb0f.
//
// Solidity: function accountBalance(address account) view returns(uint256)
func (_HostioTest *HostioTestCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xd294cb0f.
//
// Solidity: function accountBalance(address account) view returns(uint256)
func (_HostioTest *HostioTestSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountBalance(&_HostioTest.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xd294cb0f.
//
// Solidity: function accountBalance(address account) view returns(uint256)
func (_HostioTest *HostioTestCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountBalance(&_HostioTest.CallOpts, account)
}

// AccountCode is a free data retrieval call binding the contract method 0x98071112.
//
// Solidity: function accountCode(address account) view returns(bytes)
func (_HostioTest *HostioTestCaller) AccountCode(opts *bind.CallOpts, account common.Address) ([]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountCode", account)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AccountCode is a free data retrieval call binding the contract method 0x98071112.
//
// Solidity: function accountCode(address account) view returns(bytes)
func (_HostioTest *HostioTestSession) AccountCode(account common.Address) ([]byte, error) {
	return _HostioTest.Contract.AccountCode(&_HostioTest.CallOpts, account)
}

// AccountCode is a free data retrieval call binding the contract method 0x98071112.
//
// Solidity: function accountCode(address account) view returns(bytes)
func (_HostioTest *HostioTestCallerSession) AccountCode(account common.Address) ([]byte, error) {
	return _HostioTest.Contract.AccountCode(&_HostioTest.CallOpts, account)
}

// AccountCodeSize is a free data retrieval call binding the contract method 0xa520508f.
//
// Solidity: function accountCodeSize(address account) view returns(uint256)
func (_HostioTest *HostioTestCaller) AccountCodeSize(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountCodeSize", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountCodeSize is a free data retrieval call binding the contract method 0xa520508f.
//
// Solidity: function accountCodeSize(address account) view returns(uint256)
func (_HostioTest *HostioTestSession) AccountCodeSize(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountCodeSize(&_HostioTest.CallOpts, account)
}

// AccountCodeSize is a free data retrieval call binding the contract method 0xa520508f.
//
// Solidity: function accountCodeSize(address account) view returns(uint256)
func (_HostioTest *HostioTestCallerSession) AccountCodeSize(account common.Address) (*big.Int, error) {
	return _HostioTest.Contract.AccountCodeSize(&_HostioTest.CallOpts, account)
}

// AccountCodehash is a free data retrieval call binding the contract method 0x2233a918.
//
// Solidity: function accountCodehash(address account) view returns(bytes32)
func (_HostioTest *HostioTestCaller) AccountCodehash(opts *bind.CallOpts, account common.Address) ([32]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "accountCodehash", account)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountCodehash is a free data retrieval call binding the contract method 0x2233a918.
//
// Solidity: function accountCodehash(address account) view returns(bytes32)
func (_HostioTest *HostioTestSession) AccountCodehash(account common.Address) ([32]byte, error) {
	return _HostioTest.Contract.AccountCodehash(&_HostioTest.CallOpts, account)
}

// AccountCodehash is a free data retrieval call binding the contract method 0x2233a918.
//
// Solidity: function accountCodehash(address account) view returns(bytes32)
func (_HostioTest *HostioTestCallerSession) AccountCodehash(account common.Address) ([32]byte, error) {
	return _HostioTest.Contract.AccountCodehash(&_HostioTest.CallOpts, account)
}

// BlockBasefee is a free data retrieval call binding the contract method 0xe5c47e1d.
//
// Solidity: function blockBasefee() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockBasefee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockBasefee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockBasefee is a free data retrieval call binding the contract method 0xe5c47e1d.
//
// Solidity: function blockBasefee() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockBasefee() (*big.Int, error) {
	return _HostioTest.Contract.BlockBasefee(&_HostioTest.CallOpts)
}

// BlockBasefee is a free data retrieval call binding the contract method 0xe5c47e1d.
//
// Solidity: function blockBasefee() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockBasefee() (*big.Int, error) {
	return _HostioTest.Contract.BlockBasefee(&_HostioTest.CallOpts)
}

// BlockCoinbase is a free data retrieval call binding the contract method 0xcebcbba9.
//
// Solidity: function blockCoinbase() view returns(address)
func (_HostioTest *HostioTestCaller) BlockCoinbase(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockCoinbase")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlockCoinbase is a free data retrieval call binding the contract method 0xcebcbba9.
//
// Solidity: function blockCoinbase() view returns(address)
func (_HostioTest *HostioTestSession) BlockCoinbase() (common.Address, error) {
	return _HostioTest.Contract.BlockCoinbase(&_HostioTest.CallOpts)
}

// BlockCoinbase is a free data retrieval call binding the contract method 0xcebcbba9.
//
// Solidity: function blockCoinbase() view returns(address)
func (_HostioTest *HostioTestCallerSession) BlockCoinbase() (common.Address, error) {
	return _HostioTest.Contract.BlockCoinbase(&_HostioTest.CallOpts)
}

// BlockGasLimit is a free data retrieval call binding the contract method 0x7877a797.
//
// Solidity: function blockGasLimit() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockGasLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockGasLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockGasLimit is a free data retrieval call binding the contract method 0x7877a797.
//
// Solidity: function blockGasLimit() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockGasLimit() (*big.Int, error) {
	return _HostioTest.Contract.BlockGasLimit(&_HostioTest.CallOpts)
}

// BlockGasLimit is a free data retrieval call binding the contract method 0x7877a797.
//
// Solidity: function blockGasLimit() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockGasLimit() (*big.Int, error) {
	return _HostioTest.Contract.BlockGasLimit(&_HostioTest.CallOpts)
}

// BlockNumber is a free data retrieval call binding the contract method 0x57e871e7.
//
// Solidity: function blockNumber() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockNumber is a free data retrieval call binding the contract method 0x57e871e7.
//
// Solidity: function blockNumber() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockNumber() (*big.Int, error) {
	return _HostioTest.Contract.BlockNumber(&_HostioTest.CallOpts)
}

// BlockNumber is a free data retrieval call binding the contract method 0x57e871e7.
//
// Solidity: function blockNumber() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockNumber() (*big.Int, error) {
	return _HostioTest.Contract.BlockNumber(&_HostioTest.CallOpts)
}

// BlockTimestamp is a free data retrieval call binding the contract method 0xadb61832.
//
// Solidity: function blockTimestamp() view returns(uint256)
func (_HostioTest *HostioTestCaller) BlockTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "blockTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockTimestamp is a free data retrieval call binding the contract method 0xadb61832.
//
// Solidity: function blockTimestamp() view returns(uint256)
func (_HostioTest *HostioTestSession) BlockTimestamp() (*big.Int, error) {
	return _HostioTest.Contract.BlockTimestamp(&_HostioTest.CallOpts)
}

// BlockTimestamp is a free data retrieval call binding the contract method 0xadb61832.
//
// Solidity: function blockTimestamp() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) BlockTimestamp() (*big.Int, error) {
	return _HostioTest.Contract.BlockTimestamp(&_HostioTest.CallOpts)
}

// Chainid is a free data retrieval call binding the contract method 0xcd84980e.
//
// Solidity: function chainid() view returns(uint256)
func (_HostioTest *HostioTestCaller) Chainid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "chainid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Chainid is a free data retrieval call binding the contract method 0xcd84980e.
//
// Solidity: function chainid() view returns(uint256)
func (_HostioTest *HostioTestSession) Chainid() (*big.Int, error) {
	return _HostioTest.Contract.Chainid(&_HostioTest.CallOpts)
}

// Chainid is a free data retrieval call binding the contract method 0xcd84980e.
//
// Solidity: function chainid() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) Chainid() (*big.Int, error) {
	return _HostioTest.Contract.Chainid(&_HostioTest.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0xf6b4dfb4.
//
// Solidity: function contractAddress() view returns(address)
func (_HostioTest *HostioTestCaller) ContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "contractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractAddress is a free data retrieval call binding the contract method 0xf6b4dfb4.
//
// Solidity: function contractAddress() view returns(address)
func (_HostioTest *HostioTestSession) ContractAddress() (common.Address, error) {
	return _HostioTest.Contract.ContractAddress(&_HostioTest.CallOpts)
}

// ContractAddress is a free data retrieval call binding the contract method 0xf6b4dfb4.
//
// Solidity: function contractAddress() view returns(address)
func (_HostioTest *HostioTestCallerSession) ContractAddress() (common.Address, error) {
	return _HostioTest.Contract.ContractAddress(&_HostioTest.CallOpts)
}

// EvmGasLeft is a free data retrieval call binding the contract method 0x28ed15d5.
//
// Solidity: function evmGasLeft() view returns(uint256)
func (_HostioTest *HostioTestCaller) EvmGasLeft(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "evmGasLeft")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EvmGasLeft is a free data retrieval call binding the contract method 0x28ed15d5.
//
// Solidity: function evmGasLeft() view returns(uint256)
func (_HostioTest *HostioTestSession) EvmGasLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmGasLeft(&_HostioTest.CallOpts)
}

// EvmGasLeft is a free data retrieval call binding the contract method 0x28ed15d5.
//
// Solidity: function evmGasLeft() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) EvmGasLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmGasLeft(&_HostioTest.CallOpts)
}

// EvmInkLeft is a free data retrieval call binding the contract method 0x2dc26516.
//
// Solidity: function evmInkLeft() view returns(uint256)
func (_HostioTest *HostioTestCaller) EvmInkLeft(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "evmInkLeft")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EvmInkLeft is a free data retrieval call binding the contract method 0x2dc26516.
//
// Solidity: function evmInkLeft() view returns(uint256)
func (_HostioTest *HostioTestSession) EvmInkLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmInkLeft(&_HostioTest.CallOpts)
}

// EvmInkLeft is a free data retrieval call binding the contract method 0x2dc26516.
//
// Solidity: function evmInkLeft() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) EvmInkLeft() (*big.Int, error) {
	return _HostioTest.Contract.EvmInkLeft(&_HostioTest.CallOpts)
}

// ExitEarly is a free data retrieval call binding the contract method 0xe6334eea.
//
// Solidity: function exitEarly() pure returns()
func (_HostioTest *HostioTestCaller) ExitEarly(opts *bind.CallOpts) error {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "exitEarly")

	if err != nil {
		return err
	}

	return err

}

// ExitEarly is a free data retrieval call binding the contract method 0xe6334eea.
//
// Solidity: function exitEarly() pure returns()
func (_HostioTest *HostioTestSession) ExitEarly() error {
	return _HostioTest.Contract.ExitEarly(&_HostioTest.CallOpts)
}

// ExitEarly is a free data retrieval call binding the contract method 0xe6334eea.
//
// Solidity: function exitEarly() pure returns()
func (_HostioTest *HostioTestCallerSession) ExitEarly() error {
	return _HostioTest.Contract.ExitEarly(&_HostioTest.CallOpts)
}

// Keccak is a free data retrieval call binding the contract method 0x23fc7ef3.
//
// Solidity: function keccak(bytes preimage) pure returns(bytes32)
func (_HostioTest *HostioTestCaller) Keccak(opts *bind.CallOpts, preimage []byte) ([32]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "keccak", preimage)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Keccak is a free data retrieval call binding the contract method 0x23fc7ef3.
//
// Solidity: function keccak(bytes preimage) pure returns(bytes32)
func (_HostioTest *HostioTestSession) Keccak(preimage []byte) ([32]byte, error) {
	return _HostioTest.Contract.Keccak(&_HostioTest.CallOpts, preimage)
}

// Keccak is a free data retrieval call binding the contract method 0x23fc7ef3.
//
// Solidity: function keccak(bytes preimage) pure returns(bytes32)
func (_HostioTest *HostioTestCallerSession) Keccak(preimage []byte) ([32]byte, error) {
	return _HostioTest.Contract.Keccak(&_HostioTest.CallOpts, preimage)
}

// MathAddMod is a free data retrieval call binding the contract method 0xa83ede1c.
//
// Solidity: function mathAddMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathAddMod(opts *bind.CallOpts, a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathAddMod", a, b, c)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathAddMod is a free data retrieval call binding the contract method 0xa83ede1c.
//
// Solidity: function mathAddMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathAddMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathAddMod(&_HostioTest.CallOpts, a, b, c)
}

// MathAddMod is a free data retrieval call binding the contract method 0xa83ede1c.
//
// Solidity: function mathAddMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathAddMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathAddMod(&_HostioTest.CallOpts, a, b, c)
}

// MathDiv is a free data retrieval call binding the contract method 0x7c6aa466.
//
// Solidity: function mathDiv(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathDiv(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathDiv", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathDiv is a free data retrieval call binding the contract method 0x7c6aa466.
//
// Solidity: function mathDiv(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathDiv(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathDiv(&_HostioTest.CallOpts, a, b)
}

// MathDiv is a free data retrieval call binding the contract method 0x7c6aa466.
//
// Solidity: function mathDiv(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathDiv(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathDiv(&_HostioTest.CallOpts, a, b)
}

// MathMod is a free data retrieval call binding the contract method 0xf7be3e8d.
//
// Solidity: function mathMod(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathMod(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathMod", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathMod is a free data retrieval call binding the contract method 0xf7be3e8d.
//
// Solidity: function mathMod(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathMod(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMod(&_HostioTest.CallOpts, a, b)
}

// MathMod is a free data retrieval call binding the contract method 0xf7be3e8d.
//
// Solidity: function mathMod(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathMod(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMod(&_HostioTest.CallOpts, a, b)
}

// MathMulMod is a free data retrieval call binding the contract method 0x131260d0.
//
// Solidity: function mathMulMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathMulMod(opts *bind.CallOpts, a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathMulMod", a, b, c)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathMulMod is a free data retrieval call binding the contract method 0x131260d0.
//
// Solidity: function mathMulMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathMulMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMulMod(&_HostioTest.CallOpts, a, b, c)
}

// MathMulMod is a free data retrieval call binding the contract method 0x131260d0.
//
// Solidity: function mathMulMod(uint256 a, uint256 b, uint256 c) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathMulMod(a *big.Int, b *big.Int, c *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathMulMod(&_HostioTest.CallOpts, a, b, c)
}

// MathPow is a free data retrieval call binding the contract method 0x89995319.
//
// Solidity: function mathPow(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCaller) MathPow(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "mathPow", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MathPow is a free data retrieval call binding the contract method 0x89995319.
//
// Solidity: function mathPow(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestSession) MathPow(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathPow(&_HostioTest.CallOpts, a, b)
}

// MathPow is a free data retrieval call binding the contract method 0x89995319.
//
// Solidity: function mathPow(uint256 a, uint256 b) pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) MathPow(a *big.Int, b *big.Int) (*big.Int, error) {
	return _HostioTest.Contract.MathPow(&_HostioTest.CallOpts, a, b)
}

// MsgSender is a free data retrieval call binding the contract method 0xd737d0c7.
//
// Solidity: function msgSender() view returns(address)
func (_HostioTest *HostioTestCaller) MsgSender(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "msgSender")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MsgSender is a free data retrieval call binding the contract method 0xd737d0c7.
//
// Solidity: function msgSender() view returns(address)
func (_HostioTest *HostioTestSession) MsgSender() (common.Address, error) {
	return _HostioTest.Contract.MsgSender(&_HostioTest.CallOpts)
}

// MsgSender is a free data retrieval call binding the contract method 0xd737d0c7.
//
// Solidity: function msgSender() view returns(address)
func (_HostioTest *HostioTestCallerSession) MsgSender() (common.Address, error) {
	return _HostioTest.Contract.MsgSender(&_HostioTest.CallOpts)
}

// ReturnDataSize is a free data retrieval call binding the contract method 0x860e6199.
//
// Solidity: function returnDataSize() pure returns(uint256)
func (_HostioTest *HostioTestCaller) ReturnDataSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "returnDataSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReturnDataSize is a free data retrieval call binding the contract method 0x860e6199.
//
// Solidity: function returnDataSize() pure returns(uint256)
func (_HostioTest *HostioTestSession) ReturnDataSize() (*big.Int, error) {
	return _HostioTest.Contract.ReturnDataSize(&_HostioTest.CallOpts)
}

// ReturnDataSize is a free data retrieval call binding the contract method 0x860e6199.
//
// Solidity: function returnDataSize() pure returns(uint256)
func (_HostioTest *HostioTestCallerSession) ReturnDataSize() (*big.Int, error) {
	return _HostioTest.Contract.ReturnDataSize(&_HostioTest.CallOpts)
}

// TransientLoadBytes32 is a free data retrieval call binding the contract method 0x9c16cfe8.
//
// Solidity: function transientLoadBytes32(bytes32 key) view returns(bytes32)
func (_HostioTest *HostioTestCaller) TransientLoadBytes32(opts *bind.CallOpts, key [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "transientLoadBytes32", key)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TransientLoadBytes32 is a free data retrieval call binding the contract method 0x9c16cfe8.
//
// Solidity: function transientLoadBytes32(bytes32 key) view returns(bytes32)
func (_HostioTest *HostioTestSession) TransientLoadBytes32(key [32]byte) ([32]byte, error) {
	return _HostioTest.Contract.TransientLoadBytes32(&_HostioTest.CallOpts, key)
}

// TransientLoadBytes32 is a free data retrieval call binding the contract method 0x9c16cfe8.
//
// Solidity: function transientLoadBytes32(bytes32 key) view returns(bytes32)
func (_HostioTest *HostioTestCallerSession) TransientLoadBytes32(key [32]byte) ([32]byte, error) {
	return _HostioTest.Contract.TransientLoadBytes32(&_HostioTest.CallOpts, key)
}

// TxGasPrice is a free data retrieval call binding the contract method 0x534ca054.
//
// Solidity: function txGasPrice() view returns(uint256)
func (_HostioTest *HostioTestCaller) TxGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "txGasPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TxGasPrice is a free data retrieval call binding the contract method 0x534ca054.
//
// Solidity: function txGasPrice() view returns(uint256)
func (_HostioTest *HostioTestSession) TxGasPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxGasPrice(&_HostioTest.CallOpts)
}

// TxGasPrice is a free data retrieval call binding the contract method 0x534ca054.
//
// Solidity: function txGasPrice() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) TxGasPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxGasPrice(&_HostioTest.CallOpts)
}

// TxInkPrice is a free data retrieval call binding the contract method 0x7d006296.
//
// Solidity: function txInkPrice() view returns(uint256)
func (_HostioTest *HostioTestCaller) TxInkPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "txInkPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TxInkPrice is a free data retrieval call binding the contract method 0x7d006296.
//
// Solidity: function txInkPrice() view returns(uint256)
func (_HostioTest *HostioTestSession) TxInkPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxInkPrice(&_HostioTest.CallOpts)
}

// TxInkPrice is a free data retrieval call binding the contract method 0x7d006296.
//
// Solidity: function txInkPrice() view returns(uint256)
func (_HostioTest *HostioTestCallerSession) TxInkPrice() (*big.Int, error) {
	return _HostioTest.Contract.TxInkPrice(&_HostioTest.CallOpts)
}

// TxOrigin is a free data retrieval call binding the contract method 0xf96757d1.
//
// Solidity: function txOrigin() view returns(address)
func (_HostioTest *HostioTestCaller) TxOrigin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HostioTest.contract.Call(opts, &out, "txOrigin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TxOrigin is a free data retrieval call binding the contract method 0xf96757d1.
//
// Solidity: function txOrigin() view returns(address)
func (_HostioTest *HostioTestSession) TxOrigin() (common.Address, error) {
	return _HostioTest.Contract.TxOrigin(&_HostioTest.CallOpts)
}

// TxOrigin is a free data retrieval call binding the contract method 0xf96757d1.
//
// Solidity: function txOrigin() view returns(address)
func (_HostioTest *HostioTestCallerSession) TxOrigin() (common.Address, error) {
	return _HostioTest.Contract.TxOrigin(&_HostioTest.CallOpts)
}

// EmitLog is a paid mutator transaction binding the contract method 0x6417b4d5.
//
// Solidity: function emitLog(bytes _data, int8 n, bytes32 t1, bytes32 t2, bytes32 t3, bytes32 t4) returns()
func (_HostioTest *HostioTestTransactor) EmitLog(opts *bind.TransactOpts, _data []byte, n int8, t1 [32]byte, t2 [32]byte, t3 [32]byte, t4 [32]byte) (*types.Transaction, error) {
	return _HostioTest.contract.Transact(opts, "emitLog", _data, n, t1, t2, t3, t4)
}

// EmitLog is a paid mutator transaction binding the contract method 0x6417b4d5.
//
// Solidity: function emitLog(bytes _data, int8 n, bytes32 t1, bytes32 t2, bytes32 t3, bytes32 t4) returns()
func (_HostioTest *HostioTestSession) EmitLog(_data []byte, n int8, t1 [32]byte, t2 [32]byte, t3 [32]byte, t4 [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.EmitLog(&_HostioTest.TransactOpts, _data, n, t1, t2, t3, t4)
}

// EmitLog is a paid mutator transaction binding the contract method 0x6417b4d5.
//
// Solidity: function emitLog(bytes _data, int8 n, bytes32 t1, bytes32 t2, bytes32 t3, bytes32 t4) returns()
func (_HostioTest *HostioTestTransactorSession) EmitLog(_data []byte, n int8, t1 [32]byte, t2 [32]byte, t3 [32]byte, t4 [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.EmitLog(&_HostioTest.TransactOpts, _data, n, t1, t2, t3, t4)
}

// MsgValue is a paid mutator transaction binding the contract method 0xddf363d7.
//
// Solidity: function msgValue() payable returns(uint256)
func (_HostioTest *HostioTestTransactor) MsgValue(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HostioTest.contract.Transact(opts, "msgValue")
}

// MsgValue is a paid mutator transaction binding the contract method 0xddf363d7.
//
// Solidity: function msgValue() payable returns(uint256)
func (_HostioTest *HostioTestSession) MsgValue() (*types.Transaction, error) {
	return _HostioTest.Contract.MsgValue(&_HostioTest.TransactOpts)
}

// MsgValue is a paid mutator transaction binding the contract method 0xddf363d7.
//
// Solidity: function msgValue() payable returns(uint256)
func (_HostioTest *HostioTestTransactorSession) MsgValue() (*types.Transaction, error) {
	return _HostioTest.Contract.MsgValue(&_HostioTest.TransactOpts)
}

// TransientStoreBytes32 is a paid mutator transaction binding the contract method 0x34eb2d6b.
//
// Solidity: function transientStoreBytes32(bytes32 key, bytes32 value) returns()
func (_HostioTest *HostioTestTransactor) TransientStoreBytes32(opts *bind.TransactOpts, key [32]byte, value [32]byte) (*types.Transaction, error) {
	return _HostioTest.contract.Transact(opts, "transientStoreBytes32", key, value)
}

// TransientStoreBytes32 is a paid mutator transaction binding the contract method 0x34eb2d6b.
//
// Solidity: function transientStoreBytes32(bytes32 key, bytes32 value) returns()
func (_HostioTest *HostioTestSession) TransientStoreBytes32(key [32]byte, value [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.TransientStoreBytes32(&_HostioTest.TransactOpts, key, value)
}

// TransientStoreBytes32 is a paid mutator transaction binding the contract method 0x34eb2d6b.
//
// Solidity: function transientStoreBytes32(bytes32 key, bytes32 value) returns()
func (_HostioTest *HostioTestTransactorSession) TransientStoreBytes32(key [32]byte, value [32]byte) (*types.Transaction, error) {
	return _HostioTest.Contract.TransientStoreBytes32(&_HostioTest.TransactOpts, key, value)
}

// InboxStubMetaData contains all meta data concerning the InboxStub contract.
var InboxStubMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowListEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calculateRetryableSubmissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createRetryableTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDataSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sendContractTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sendL1FundedContractTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sendL1FundedUnsignedTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sendL1FundedUnsignedTransactionToFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"sendL2Message\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"sendL2MessageFromOrigin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sendUnsignedTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sendUnsignedTransactionToFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sendWithdrawEthToFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"name\":\"setAllowList\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setAllowListEnabled\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"unsafeCreateRetryableTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a080604052346025576201cccc60805261096f908161002b8239608051816101a20152f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c908162f72382146104f55781631fe927cf1461058b57816322bd5c1c146104005781633f4ba83a14610456578163439370b11461057b578163485cc955146104fa5781635075788b146104f55781635c975abb146104ce5781635e91675814610499578163679b6ded1461048257816367ef3ab8146101ed5781636e6e8a6a1461048257816370665f141461045b5781638456cb59146104565781638a631aa6146104155781638b3240a014610400578163a66b327d146103eb578163b75436bb14610347578163babcc53914610327578163c474d2c514610309578163e3de72a514610201578163e6bd12cf146101ed578163e78cea92146101c5578163e8eb1dc31461018a578163ee35f32714610161575063efeadb6d1461013f57600080fd5b3461015d57602036600319011261015d573580151514610831575b80fd5b5080fd5b83903461015d578160031936011261015d5760015490516001600160a01b039091168152602090f35b83903461015d578160031936011261015d57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83903461015d578160031936011261015d57905490516001600160a01b039091168152602090f35b6101f636610797565b505050505050610831565b9050346102de57806003193601126102de578135926001600160401b039283851161015d573660238601121561015d57848101359461023f8661081a565b9561024c855197886107e1565b808752602460208098019160051b8301019136831161030557602401905b8282106102e25750505060243593841161015d573660238501121561015d5784846024920135936102a661029d8661081a565b915191826107e1565b848152019260051b8401019236841161015d57602401915b8383101561083157823580151581036102de5781529184019184016102be565b8280fd5b81356001600160a01b038116810361030157815290870190870161026a565b8580fd5b8480fd5b833461015a57602036600319011261015a5761032361065b565b5080f35b833461015a57602036600319011261015a5761034161065b565b50610831565b919050346102de5760203660031901126102de5780356001600160401b0381116103e757927fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b61039d8493602096369101610671565b9485916103ba6103ae368584610868565b898151910120336108ae565b96879583519485938b8552818c86015285850137828201840152601f01601f19168101030190a251908152f35b8380fd5b83903461015d57366003190112156108315780fd5b833461015a5780600319360112156108315780fd5b50503461015d5760a036600319011261015d57610430610640565b506084356001600160401b0381116102de5761044f9250369101610671565b5050610831565b6106e0565b833461015a5760a036600319011261015a576084356001600160a01b038116146108315780fd5b61048b36610728565b505050505050505050610831565b5050608036600319011261015d576104af610640565b506064356001600160401b0381116102de5761044f9250369101610671565b83903461015d578160031936011261015d5760209060ff60015460a01c1690519015158152f35b61069e565b919050346102de57816003193601126102de5761051561065b565b6001600160a01b039160243583811603610305578454938385166105495750506001600160a01b0319909216911617815580f35b906020606492519162461bcd60e51b8352820152600c60248201526b1053149150511657d253925560a21b6044820152fd5b8380600319360112156108315780fd5b83833461015d57602036600319011261015d5780356001600160401b0381116102de576105bb9036908301610671565b909132330361060f5750926106046105f87fab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c936020963691610868565b858151910120336108ae565b918291519380a28152f35b606490602086519162461bcd60e51b8352820152600b60248201526a6f726967696e206f6e6c7960a81b6044820152fd5b604435906001600160a01b038216820361065657565b600080fd5b600435906001600160a01b038216820361065657565b9181601f84011215610656578235916001600160401b038311610656576020838186019501011161065657565b346106565760c0366003190112610656576064356001600160a01b038116036106565760a4356001600160401b0381116106565761044f903690600401610671565b346106565760003660031901126106565760405162461bcd60e51b815260206004820152600f60248201526e1393d5081253541311535153951151608a1b6044820152606490fd5b610100600319820112610656576001600160a01b0391600435838116810361065657926024359260443592606435838116810361065657926084359081168103610656579160a4359160c4359160e435906001600160401b0382116106565761079391600401610671565b9091565b60a0600319820112610656576004359160243591604435916064356001600160a01b03811681036106565791608435906001600160401b0382116106565761079391600401610671565b601f909101601f19168101906001600160401b0382119082101761080457604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116108045760051b60200190565b60405162461bcd60e51b815260206004820152600f60248201526e1393d517d253541311535153951151608a1b6044820152606490fd5b9192916001600160401b0382116108045760405191610891601f8201601f1916602001846107e1565b829481845281830111610656578281602093846000960137010152565b600054604051638db5993b60e01b8152600360048201526001600160a01b0392831660248201526044810193909352602091839160649183913491165af190811561092d576000916108fe575090565b90506020813d602011610925575b81610919602093836107e1565b81010312610656575190565b3d915061090c565b6040513d6000823e3d90fdfea26469706673582212204344ed39952e7ff1f39465dd5cdd66c61933c00808bb1f16fa2516824ab4502564736f6c63430008190033",
}

// InboxStubABI is the input ABI used to generate the binding from.
// Deprecated: Use InboxStubMetaData.ABI instead.
var InboxStubABI = InboxStubMetaData.ABI

// InboxStubBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InboxStubMetaData.Bin instead.
var InboxStubBin = InboxStubMetaData.Bin

// DeployInboxStub deploys a new Ethereum contract, binding an instance of InboxStub to it.
func DeployInboxStub(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *InboxStub, error) {
	parsed, err := InboxStubMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InboxStubBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InboxStub{InboxStubCaller: InboxStubCaller{contract: contract}, InboxStubTransactor: InboxStubTransactor{contract: contract}, InboxStubFilterer: InboxStubFilterer{contract: contract}}, nil
}

// InboxStub is an auto generated Go binding around an Ethereum contract.
type InboxStub struct {
	InboxStubCaller     // Read-only binding to the contract
	InboxStubTransactor // Write-only binding to the contract
	InboxStubFilterer   // Log filterer for contract events
}

// InboxStubCaller is an auto generated read-only Go binding around an Ethereum contract.
type InboxStubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InboxStubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InboxStubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InboxStubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InboxStubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InboxStubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InboxStubSession struct {
	Contract     *InboxStub        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InboxStubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InboxStubCallerSession struct {
	Contract *InboxStubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// InboxStubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InboxStubTransactorSession struct {
	Contract     *InboxStubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// InboxStubRaw is an auto generated low-level Go binding around an Ethereum contract.
type InboxStubRaw struct {
	Contract *InboxStub // Generic contract binding to access the raw methods on
}

// InboxStubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InboxStubCallerRaw struct {
	Contract *InboxStubCaller // Generic read-only contract binding to access the raw methods on
}

// InboxStubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InboxStubTransactorRaw struct {
	Contract *InboxStubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInboxStub creates a new instance of InboxStub, bound to a specific deployed contract.
func NewInboxStub(address common.Address, backend bind.ContractBackend) (*InboxStub, error) {
	contract, err := bindInboxStub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InboxStub{InboxStubCaller: InboxStubCaller{contract: contract}, InboxStubTransactor: InboxStubTransactor{contract: contract}, InboxStubFilterer: InboxStubFilterer{contract: contract}}, nil
}

// NewInboxStubCaller creates a new read-only instance of InboxStub, bound to a specific deployed contract.
func NewInboxStubCaller(address common.Address, caller bind.ContractCaller) (*InboxStubCaller, error) {
	contract, err := bindInboxStub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InboxStubCaller{contract: contract}, nil
}

// NewInboxStubTransactor creates a new write-only instance of InboxStub, bound to a specific deployed contract.
func NewInboxStubTransactor(address common.Address, transactor bind.ContractTransactor) (*InboxStubTransactor, error) {
	contract, err := bindInboxStub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InboxStubTransactor{contract: contract}, nil
}

// NewInboxStubFilterer creates a new log filterer instance of InboxStub, bound to a specific deployed contract.
func NewInboxStubFilterer(address common.Address, filterer bind.ContractFilterer) (*InboxStubFilterer, error) {
	contract, err := bindInboxStub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InboxStubFilterer{contract: contract}, nil
}

// bindInboxStub binds a generic wrapper to an already deployed contract.
func bindInboxStub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := InboxStubMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InboxStub *InboxStubRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InboxStub.Contract.InboxStubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InboxStub *InboxStubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InboxStub.Contract.InboxStubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InboxStub *InboxStubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InboxStub.Contract.InboxStubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InboxStub *InboxStubCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InboxStub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InboxStub *InboxStubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InboxStub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InboxStub *InboxStubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InboxStub.Contract.contract.Transact(opts, method, params...)
}

// AllowListEnabled is a free data retrieval call binding the contract method 0x22bd5c1c.
//
// Solidity: function allowListEnabled() pure returns(bool)
func (_InboxStub *InboxStubCaller) AllowListEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "allowListEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowListEnabled is a free data retrieval call binding the contract method 0x22bd5c1c.
//
// Solidity: function allowListEnabled() pure returns(bool)
func (_InboxStub *InboxStubSession) AllowListEnabled() (bool, error) {
	return _InboxStub.Contract.AllowListEnabled(&_InboxStub.CallOpts)
}

// AllowListEnabled is a free data retrieval call binding the contract method 0x22bd5c1c.
//
// Solidity: function allowListEnabled() pure returns(bool)
func (_InboxStub *InboxStubCallerSession) AllowListEnabled() (bool, error) {
	return _InboxStub.Contract.AllowListEnabled(&_InboxStub.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_InboxStub *InboxStubCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_InboxStub *InboxStubSession) Bridge() (common.Address, error) {
	return _InboxStub.Contract.Bridge(&_InboxStub.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_InboxStub *InboxStubCallerSession) Bridge() (common.Address, error) {
	return _InboxStub.Contract.Bridge(&_InboxStub.CallOpts)
}

// CalculateRetryableSubmissionFee is a free data retrieval call binding the contract method 0xa66b327d.
//
// Solidity: function calculateRetryableSubmissionFee(uint256 , uint256 ) pure returns(uint256)
func (_InboxStub *InboxStubCaller) CalculateRetryableSubmissionFee(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "calculateRetryableSubmissionFee", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRetryableSubmissionFee is a free data retrieval call binding the contract method 0xa66b327d.
//
// Solidity: function calculateRetryableSubmissionFee(uint256 , uint256 ) pure returns(uint256)
func (_InboxStub *InboxStubSession) CalculateRetryableSubmissionFee(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _InboxStub.Contract.CalculateRetryableSubmissionFee(&_InboxStub.CallOpts, arg0, arg1)
}

// CalculateRetryableSubmissionFee is a free data retrieval call binding the contract method 0xa66b327d.
//
// Solidity: function calculateRetryableSubmissionFee(uint256 , uint256 ) pure returns(uint256)
func (_InboxStub *InboxStubCallerSession) CalculateRetryableSubmissionFee(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _InboxStub.Contract.CalculateRetryableSubmissionFee(&_InboxStub.CallOpts, arg0, arg1)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0x8b3240a0.
//
// Solidity: function getProxyAdmin() pure returns(address)
func (_InboxStub *InboxStubCaller) GetProxyAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "getProxyAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyAdmin is a free data retrieval call binding the contract method 0x8b3240a0.
//
// Solidity: function getProxyAdmin() pure returns(address)
func (_InboxStub *InboxStubSession) GetProxyAdmin() (common.Address, error) {
	return _InboxStub.Contract.GetProxyAdmin(&_InboxStub.CallOpts)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0x8b3240a0.
//
// Solidity: function getProxyAdmin() pure returns(address)
func (_InboxStub *InboxStubCallerSession) GetProxyAdmin() (common.Address, error) {
	return _InboxStub.Contract.GetProxyAdmin(&_InboxStub.CallOpts)
}

// IsAllowed is a free data retrieval call binding the contract method 0xbabcc539.
//
// Solidity: function isAllowed(address ) pure returns(bool)
func (_InboxStub *InboxStubCaller) IsAllowed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "isAllowed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowed is a free data retrieval call binding the contract method 0xbabcc539.
//
// Solidity: function isAllowed(address ) pure returns(bool)
func (_InboxStub *InboxStubSession) IsAllowed(arg0 common.Address) (bool, error) {
	return _InboxStub.Contract.IsAllowed(&_InboxStub.CallOpts, arg0)
}

// IsAllowed is a free data retrieval call binding the contract method 0xbabcc539.
//
// Solidity: function isAllowed(address ) pure returns(bool)
func (_InboxStub *InboxStubCallerSession) IsAllowed(arg0 common.Address) (bool, error) {
	return _InboxStub.Contract.IsAllowed(&_InboxStub.CallOpts, arg0)
}

// MaxDataSize is a free data retrieval call binding the contract method 0xe8eb1dc3.
//
// Solidity: function maxDataSize() view returns(uint256)
func (_InboxStub *InboxStubCaller) MaxDataSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "maxDataSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxDataSize is a free data retrieval call binding the contract method 0xe8eb1dc3.
//
// Solidity: function maxDataSize() view returns(uint256)
func (_InboxStub *InboxStubSession) MaxDataSize() (*big.Int, error) {
	return _InboxStub.Contract.MaxDataSize(&_InboxStub.CallOpts)
}

// MaxDataSize is a free data retrieval call binding the contract method 0xe8eb1dc3.
//
// Solidity: function maxDataSize() view returns(uint256)
func (_InboxStub *InboxStubCallerSession) MaxDataSize() (*big.Int, error) {
	return _InboxStub.Contract.MaxDataSize(&_InboxStub.CallOpts)
}

// Pause is a free data retrieval call binding the contract method 0x8456cb59.
//
// Solidity: function pause() pure returns()
func (_InboxStub *InboxStubCaller) Pause(opts *bind.CallOpts) error {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "pause")

	if err != nil {
		return err
	}

	return err

}

// Pause is a free data retrieval call binding the contract method 0x8456cb59.
//
// Solidity: function pause() pure returns()
func (_InboxStub *InboxStubSession) Pause() error {
	return _InboxStub.Contract.Pause(&_InboxStub.CallOpts)
}

// Pause is a free data retrieval call binding the contract method 0x8456cb59.
//
// Solidity: function pause() pure returns()
func (_InboxStub *InboxStubCallerSession) Pause() error {
	return _InboxStub.Contract.Pause(&_InboxStub.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_InboxStub *InboxStubCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_InboxStub *InboxStubSession) Paused() (bool, error) {
	return _InboxStub.Contract.Paused(&_InboxStub.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_InboxStub *InboxStubCallerSession) Paused() (bool, error) {
	return _InboxStub.Contract.Paused(&_InboxStub.CallOpts)
}

// SendContractTransaction is a free data retrieval call binding the contract method 0x8a631aa6.
//
// Solidity: function sendContractTransaction(uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubCaller) SendContractTransaction(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address, arg3 *big.Int, arg4 []byte) (*big.Int, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "sendContractTransaction", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SendContractTransaction is a free data retrieval call binding the contract method 0x8a631aa6.
//
// Solidity: function sendContractTransaction(uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubSession) SendContractTransaction(arg0 *big.Int, arg1 *big.Int, arg2 common.Address, arg3 *big.Int, arg4 []byte) (*big.Int, error) {
	return _InboxStub.Contract.SendContractTransaction(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendContractTransaction is a free data retrieval call binding the contract method 0x8a631aa6.
//
// Solidity: function sendContractTransaction(uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubCallerSession) SendContractTransaction(arg0 *big.Int, arg1 *big.Int, arg2 common.Address, arg3 *big.Int, arg4 []byte) (*big.Int, error) {
	return _InboxStub.Contract.SendContractTransaction(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendUnsignedTransaction is a free data retrieval call binding the contract method 0x5075788b.
//
// Solidity: function sendUnsignedTransaction(uint256 , uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubCaller) SendUnsignedTransaction(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 *big.Int, arg5 []byte) (*big.Int, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "sendUnsignedTransaction", arg0, arg1, arg2, arg3, arg4, arg5)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SendUnsignedTransaction is a free data retrieval call binding the contract method 0x5075788b.
//
// Solidity: function sendUnsignedTransaction(uint256 , uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubSession) SendUnsignedTransaction(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 *big.Int, arg5 []byte) (*big.Int, error) {
	return _InboxStub.Contract.SendUnsignedTransaction(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendUnsignedTransaction is a free data retrieval call binding the contract method 0x5075788b.
//
// Solidity: function sendUnsignedTransaction(uint256 , uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubCallerSession) SendUnsignedTransaction(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 *big.Int, arg5 []byte) (*big.Int, error) {
	return _InboxStub.Contract.SendUnsignedTransaction(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendUnsignedTransactionToFork is a free data retrieval call binding the contract method 0x00f72382.
//
// Solidity: function sendUnsignedTransactionToFork(uint256 , uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubCaller) SendUnsignedTransactionToFork(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 *big.Int, arg5 []byte) (*big.Int, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "sendUnsignedTransactionToFork", arg0, arg1, arg2, arg3, arg4, arg5)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SendUnsignedTransactionToFork is a free data retrieval call binding the contract method 0x00f72382.
//
// Solidity: function sendUnsignedTransactionToFork(uint256 , uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubSession) SendUnsignedTransactionToFork(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 *big.Int, arg5 []byte) (*big.Int, error) {
	return _InboxStub.Contract.SendUnsignedTransactionToFork(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendUnsignedTransactionToFork is a free data retrieval call binding the contract method 0x00f72382.
//
// Solidity: function sendUnsignedTransactionToFork(uint256 , uint256 , uint256 , address , uint256 , bytes ) pure returns(uint256)
func (_InboxStub *InboxStubCallerSession) SendUnsignedTransactionToFork(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 *big.Int, arg5 []byte) (*big.Int, error) {
	return _InboxStub.Contract.SendUnsignedTransactionToFork(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendWithdrawEthToFork is a free data retrieval call binding the contract method 0x70665f14.
//
// Solidity: function sendWithdrawEthToFork(uint256 , uint256 , uint256 , uint256 , address ) pure returns(uint256)
func (_InboxStub *InboxStubCaller) SendWithdrawEthToFork(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "sendWithdrawEthToFork", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SendWithdrawEthToFork is a free data retrieval call binding the contract method 0x70665f14.
//
// Solidity: function sendWithdrawEthToFork(uint256 , uint256 , uint256 , uint256 , address ) pure returns(uint256)
func (_InboxStub *InboxStubSession) SendWithdrawEthToFork(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*big.Int, error) {
	return _InboxStub.Contract.SendWithdrawEthToFork(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendWithdrawEthToFork is a free data retrieval call binding the contract method 0x70665f14.
//
// Solidity: function sendWithdrawEthToFork(uint256 , uint256 , uint256 , uint256 , address ) pure returns(uint256)
func (_InboxStub *InboxStubCallerSession) SendWithdrawEthToFork(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*big.Int, error) {
	return _InboxStub.Contract.SendWithdrawEthToFork(&_InboxStub.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_InboxStub *InboxStubCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_InboxStub *InboxStubSession) SequencerInbox() (common.Address, error) {
	return _InboxStub.Contract.SequencerInbox(&_InboxStub.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_InboxStub *InboxStubCallerSession) SequencerInbox() (common.Address, error) {
	return _InboxStub.Contract.SequencerInbox(&_InboxStub.CallOpts)
}

// SetAllowList is a free data retrieval call binding the contract method 0xe3de72a5.
//
// Solidity: function setAllowList(address[] , bool[] ) pure returns()
func (_InboxStub *InboxStubCaller) SetAllowList(opts *bind.CallOpts, arg0 []common.Address, arg1 []bool) error {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "setAllowList", arg0, arg1)

	if err != nil {
		return err
	}

	return err

}

// SetAllowList is a free data retrieval call binding the contract method 0xe3de72a5.
//
// Solidity: function setAllowList(address[] , bool[] ) pure returns()
func (_InboxStub *InboxStubSession) SetAllowList(arg0 []common.Address, arg1 []bool) error {
	return _InboxStub.Contract.SetAllowList(&_InboxStub.CallOpts, arg0, arg1)
}

// SetAllowList is a free data retrieval call binding the contract method 0xe3de72a5.
//
// Solidity: function setAllowList(address[] , bool[] ) pure returns()
func (_InboxStub *InboxStubCallerSession) SetAllowList(arg0 []common.Address, arg1 []bool) error {
	return _InboxStub.Contract.SetAllowList(&_InboxStub.CallOpts, arg0, arg1)
}

// SetAllowListEnabled is a free data retrieval call binding the contract method 0xefeadb6d.
//
// Solidity: function setAllowListEnabled(bool ) pure returns()
func (_InboxStub *InboxStubCaller) SetAllowListEnabled(opts *bind.CallOpts, arg0 bool) error {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "setAllowListEnabled", arg0)

	if err != nil {
		return err
	}

	return err

}

// SetAllowListEnabled is a free data retrieval call binding the contract method 0xefeadb6d.
//
// Solidity: function setAllowListEnabled(bool ) pure returns()
func (_InboxStub *InboxStubSession) SetAllowListEnabled(arg0 bool) error {
	return _InboxStub.Contract.SetAllowListEnabled(&_InboxStub.CallOpts, arg0)
}

// SetAllowListEnabled is a free data retrieval call binding the contract method 0xefeadb6d.
//
// Solidity: function setAllowListEnabled(bool ) pure returns()
func (_InboxStub *InboxStubCallerSession) SetAllowListEnabled(arg0 bool) error {
	return _InboxStub.Contract.SetAllowListEnabled(&_InboxStub.CallOpts, arg0)
}

// Unpause is a free data retrieval call binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() pure returns()
func (_InboxStub *InboxStubCaller) Unpause(opts *bind.CallOpts) error {
	var out []interface{}
	err := _InboxStub.contract.Call(opts, &out, "unpause")

	if err != nil {
		return err
	}

	return err

}

// Unpause is a free data retrieval call binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() pure returns()
func (_InboxStub *InboxStubSession) Unpause() error {
	return _InboxStub.Contract.Unpause(&_InboxStub.CallOpts)
}

// Unpause is a free data retrieval call binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() pure returns()
func (_InboxStub *InboxStubCallerSession) Unpause() error {
	return _InboxStub.Contract.Unpause(&_InboxStub.CallOpts)
}

// CreateRetryableTicket is a paid mutator transaction binding the contract method 0x679b6ded.
//
// Solidity: function createRetryableTicket(address , uint256 , uint256 , address , address , uint256 , uint256 , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactor) CreateRetryableTicket(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 common.Address, arg5 *big.Int, arg6 *big.Int, arg7 []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "createRetryableTicket", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// CreateRetryableTicket is a paid mutator transaction binding the contract method 0x679b6ded.
//
// Solidity: function createRetryableTicket(address , uint256 , uint256 , address , address , uint256 , uint256 , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubSession) CreateRetryableTicket(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 common.Address, arg5 *big.Int, arg6 *big.Int, arg7 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.CreateRetryableTicket(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// CreateRetryableTicket is a paid mutator transaction binding the contract method 0x679b6ded.
//
// Solidity: function createRetryableTicket(address , uint256 , uint256 , address , address , uint256 , uint256 , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactorSession) CreateRetryableTicket(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 common.Address, arg5 *big.Int, arg6 *big.Int, arg7 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.CreateRetryableTicket(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// DepositEth is a paid mutator transaction binding the contract method 0x439370b1.
//
// Solidity: function depositEth() payable returns(uint256)
func (_InboxStub *InboxStubTransactor) DepositEth(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "depositEth")
}

// DepositEth is a paid mutator transaction binding the contract method 0x439370b1.
//
// Solidity: function depositEth() payable returns(uint256)
func (_InboxStub *InboxStubSession) DepositEth() (*types.Transaction, error) {
	return _InboxStub.Contract.DepositEth(&_InboxStub.TransactOpts)
}

// DepositEth is a paid mutator transaction binding the contract method 0x439370b1.
//
// Solidity: function depositEth() payable returns(uint256)
func (_InboxStub *InboxStubTransactorSession) DepositEth() (*types.Transaction, error) {
	return _InboxStub.Contract.DepositEth(&_InboxStub.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bridge, address ) returns()
func (_InboxStub *InboxStubTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address, arg1 common.Address) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "initialize", _bridge, arg1)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bridge, address ) returns()
func (_InboxStub *InboxStubSession) Initialize(_bridge common.Address, arg1 common.Address) (*types.Transaction, error) {
	return _InboxStub.Contract.Initialize(&_InboxStub.TransactOpts, _bridge, arg1)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bridge, address ) returns()
func (_InboxStub *InboxStubTransactorSession) Initialize(_bridge common.Address, arg1 common.Address) (*types.Transaction, error) {
	return _InboxStub.Contract.Initialize(&_InboxStub.TransactOpts, _bridge, arg1)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xc474d2c5.
//
// Solidity: function postUpgradeInit(address _bridge) returns()
func (_InboxStub *InboxStubTransactor) PostUpgradeInit(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "postUpgradeInit", _bridge)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xc474d2c5.
//
// Solidity: function postUpgradeInit(address _bridge) returns()
func (_InboxStub *InboxStubSession) PostUpgradeInit(_bridge common.Address) (*types.Transaction, error) {
	return _InboxStub.Contract.PostUpgradeInit(&_InboxStub.TransactOpts, _bridge)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xc474d2c5.
//
// Solidity: function postUpgradeInit(address _bridge) returns()
func (_InboxStub *InboxStubTransactorSession) PostUpgradeInit(_bridge common.Address) (*types.Transaction, error) {
	return _InboxStub.Contract.PostUpgradeInit(&_InboxStub.TransactOpts, _bridge)
}

// SendL1FundedContractTransaction is a paid mutator transaction binding the contract method 0x5e916758.
//
// Solidity: function sendL1FundedContractTransaction(uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactor) SendL1FundedContractTransaction(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address, arg3 []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "sendL1FundedContractTransaction", arg0, arg1, arg2, arg3)
}

// SendL1FundedContractTransaction is a paid mutator transaction binding the contract method 0x5e916758.
//
// Solidity: function sendL1FundedContractTransaction(uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubSession) SendL1FundedContractTransaction(arg0 *big.Int, arg1 *big.Int, arg2 common.Address, arg3 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL1FundedContractTransaction(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3)
}

// SendL1FundedContractTransaction is a paid mutator transaction binding the contract method 0x5e916758.
//
// Solidity: function sendL1FundedContractTransaction(uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactorSession) SendL1FundedContractTransaction(arg0 *big.Int, arg1 *big.Int, arg2 common.Address, arg3 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL1FundedContractTransaction(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3)
}

// SendL1FundedUnsignedTransaction is a paid mutator transaction binding the contract method 0x67ef3ab8.
//
// Solidity: function sendL1FundedUnsignedTransaction(uint256 , uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactor) SendL1FundedUnsignedTransaction(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "sendL1FundedUnsignedTransaction", arg0, arg1, arg2, arg3, arg4)
}

// SendL1FundedUnsignedTransaction is a paid mutator transaction binding the contract method 0x67ef3ab8.
//
// Solidity: function sendL1FundedUnsignedTransaction(uint256 , uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubSession) SendL1FundedUnsignedTransaction(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL1FundedUnsignedTransaction(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendL1FundedUnsignedTransaction is a paid mutator transaction binding the contract method 0x67ef3ab8.
//
// Solidity: function sendL1FundedUnsignedTransaction(uint256 , uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactorSession) SendL1FundedUnsignedTransaction(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL1FundedUnsignedTransaction(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendL1FundedUnsignedTransactionToFork is a paid mutator transaction binding the contract method 0xe6bd12cf.
//
// Solidity: function sendL1FundedUnsignedTransactionToFork(uint256 , uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactor) SendL1FundedUnsignedTransactionToFork(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "sendL1FundedUnsignedTransactionToFork", arg0, arg1, arg2, arg3, arg4)
}

// SendL1FundedUnsignedTransactionToFork is a paid mutator transaction binding the contract method 0xe6bd12cf.
//
// Solidity: function sendL1FundedUnsignedTransactionToFork(uint256 , uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubSession) SendL1FundedUnsignedTransactionToFork(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL1FundedUnsignedTransactionToFork(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendL1FundedUnsignedTransactionToFork is a paid mutator transaction binding the contract method 0xe6bd12cf.
//
// Solidity: function sendL1FundedUnsignedTransactionToFork(uint256 , uint256 , uint256 , address , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactorSession) SendL1FundedUnsignedTransactionToFork(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL1FundedUnsignedTransactionToFork(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SendL2Message is a paid mutator transaction binding the contract method 0xb75436bb.
//
// Solidity: function sendL2Message(bytes messageData) returns(uint256)
func (_InboxStub *InboxStubTransactor) SendL2Message(opts *bind.TransactOpts, messageData []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "sendL2Message", messageData)
}

// SendL2Message is a paid mutator transaction binding the contract method 0xb75436bb.
//
// Solidity: function sendL2Message(bytes messageData) returns(uint256)
func (_InboxStub *InboxStubSession) SendL2Message(messageData []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL2Message(&_InboxStub.TransactOpts, messageData)
}

// SendL2Message is a paid mutator transaction binding the contract method 0xb75436bb.
//
// Solidity: function sendL2Message(bytes messageData) returns(uint256)
func (_InboxStub *InboxStubTransactorSession) SendL2Message(messageData []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL2Message(&_InboxStub.TransactOpts, messageData)
}

// SendL2MessageFromOrigin is a paid mutator transaction binding the contract method 0x1fe927cf.
//
// Solidity: function sendL2MessageFromOrigin(bytes messageData) returns(uint256)
func (_InboxStub *InboxStubTransactor) SendL2MessageFromOrigin(opts *bind.TransactOpts, messageData []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "sendL2MessageFromOrigin", messageData)
}

// SendL2MessageFromOrigin is a paid mutator transaction binding the contract method 0x1fe927cf.
//
// Solidity: function sendL2MessageFromOrigin(bytes messageData) returns(uint256)
func (_InboxStub *InboxStubSession) SendL2MessageFromOrigin(messageData []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL2MessageFromOrigin(&_InboxStub.TransactOpts, messageData)
}

// SendL2MessageFromOrigin is a paid mutator transaction binding the contract method 0x1fe927cf.
//
// Solidity: function sendL2MessageFromOrigin(bytes messageData) returns(uint256)
func (_InboxStub *InboxStubTransactorSession) SendL2MessageFromOrigin(messageData []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.SendL2MessageFromOrigin(&_InboxStub.TransactOpts, messageData)
}

// UnsafeCreateRetryableTicket is a paid mutator transaction binding the contract method 0x6e6e8a6a.
//
// Solidity: function unsafeCreateRetryableTicket(address , uint256 , uint256 , address , address , uint256 , uint256 , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactor) UnsafeCreateRetryableTicket(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 common.Address, arg5 *big.Int, arg6 *big.Int, arg7 []byte) (*types.Transaction, error) {
	return _InboxStub.contract.Transact(opts, "unsafeCreateRetryableTicket", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// UnsafeCreateRetryableTicket is a paid mutator transaction binding the contract method 0x6e6e8a6a.
//
// Solidity: function unsafeCreateRetryableTicket(address , uint256 , uint256 , address , address , uint256 , uint256 , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubSession) UnsafeCreateRetryableTicket(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 common.Address, arg5 *big.Int, arg6 *big.Int, arg7 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.UnsafeCreateRetryableTicket(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// UnsafeCreateRetryableTicket is a paid mutator transaction binding the contract method 0x6e6e8a6a.
//
// Solidity: function unsafeCreateRetryableTicket(address , uint256 , uint256 , address , address , uint256 , uint256 , bytes ) payable returns(uint256)
func (_InboxStub *InboxStubTransactorSession) UnsafeCreateRetryableTicket(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 common.Address, arg4 common.Address, arg5 *big.Int, arg6 *big.Int, arg7 []byte) (*types.Transaction, error) {
	return _InboxStub.Contract.UnsafeCreateRetryableTicket(&_InboxStub.TransactOpts, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// InboxStubInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the InboxStub contract.
type InboxStubInboxMessageDeliveredIterator struct {
	Event *InboxStubInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InboxStubInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InboxStubInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InboxStubInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InboxStubInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InboxStubInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InboxStubInboxMessageDelivered represents a InboxMessageDelivered event raised by the InboxStub contract.
type InboxStubInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_InboxStub *InboxStubFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*InboxStubInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _InboxStub.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &InboxStubInboxMessageDeliveredIterator{contract: _InboxStub.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_InboxStub *InboxStubFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *InboxStubInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _InboxStub.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InboxStubInboxMessageDelivered)
				if err := _InboxStub.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_InboxStub *InboxStubFilterer) ParseInboxMessageDelivered(log types.Log) (*InboxStubInboxMessageDelivered, error) {
	event := new(InboxStubInboxMessageDelivered)
	if err := _InboxStub.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InboxStubInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the InboxStub contract.
type InboxStubInboxMessageDeliveredFromOriginIterator struct {
	Event *InboxStubInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InboxStubInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InboxStubInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InboxStubInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InboxStubInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InboxStubInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InboxStubInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the InboxStub contract.
type InboxStubInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_InboxStub *InboxStubFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*InboxStubInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _InboxStub.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &InboxStubInboxMessageDeliveredFromOriginIterator{contract: _InboxStub.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_InboxStub *InboxStubFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *InboxStubInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _InboxStub.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InboxStubInboxMessageDeliveredFromOrigin)
				if err := _InboxStub.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_InboxStub *InboxStubFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*InboxStubInboxMessageDeliveredFromOrigin, error) {
	event := new(InboxStubInboxMessageDeliveredFromOrigin)
	if err := _InboxStub.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockResultReceiverMetaData contains all meta data concerning the MockResultReceiver contract.
var MockResultReceiverMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"manager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"}],\"name\":\"ChallengeCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"challengeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loser_\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"startAndEndMachineStatuses_\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"startAndEndGlobalStates_\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asserter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asserterTimeLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengerTimeLeft_\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608034607057601f61044038819003918201601f19168301916001600160401b03831184841017607557808492602094604052833981010312607057516001600160a01b03811690819003607057600080546001600160a01b0319169190911790556040516103b4908161008c8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80630357aa491461030057806314eab5e7146100fc578063481c6a75146100d3578063d6853748146100b5578063dfbf53ae1461008c5763e82898b31461005e57600080fd5b34610087576000366003190112610087576002546040516001600160a01b039091168152602090f35b600080fd5b34610087576000366003190112610087576001546040516001600160a01b039091168152602090f35b34610087576000366003190112610087576020600354604051908152f35b34610087576000366003190112610087576000546040516001600160a01b039091168152602090f35b3461008757610200366003190112610087573660641161008757366101641161008757610164356001600160401b038116810361008757610184356001600160a01b038082168203610087576101a4803590828216820361008757600080546314eab5e760e01b6080526004356084529293928316916101e4916101c49190602460a45b600283106102d957506064976000979250905060e45b6002808910156101fb5760408a8337604082019060408b01916000905b8282106101d157505050506001906080809101990197019697610196565b83356001600160401b038116919082900361008757600191815260208091019401910190926101b3565b50506020965081898b60018060401b0316610164608001521661018460800152169060800152803590608001528035906080015261020460809160006080915af180156102cd5760009061025f575b6040516001600160401b039091168152602090f35b5060203d6020116102c6575b6080601f8201601f1916810191906001600160401b038311908310176102b057604091909152602013610087576080516001600160401b038116811461024a57600080fd5b634e487b7160e01b600052604160045260246000fd5b503d61026b565b6040513d6000823e3d90fd5b81989798359060048210156100875760019181526020809101920192019190979697610180565b34610087576060366003190112610087576001600160a01b03602435818116906004359082900361008757604435928316809303610087578260018060a01b0319838160015416176001556002541617600255806003557f88cb1f3fe351f3ac338db9c36bff1ece1750423c7ae6dfc427cd194b1c69b127600080a400fea26469706673582212205c3b23826729d8f34382e14f73d54672e6356beea60cbbea2ac982e6b70f814c64736f6c63430008190033",
}

// MockResultReceiverABI is the input ABI used to generate the binding from.
// Deprecated: Use MockResultReceiverMetaData.ABI instead.
var MockResultReceiverABI = MockResultReceiverMetaData.ABI

// MockResultReceiverBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MockResultReceiverMetaData.Bin instead.
var MockResultReceiverBin = MockResultReceiverMetaData.Bin

// DeployMockResultReceiver deploys a new Ethereum contract, binding an instance of MockResultReceiver to it.
func DeployMockResultReceiver(auth *bind.TransactOpts, backend bind.ContractBackend, manager_ common.Address) (common.Address, *types.Transaction, *MockResultReceiver, error) {
	parsed, err := MockResultReceiverMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MockResultReceiverBin), backend, manager_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockResultReceiver{MockResultReceiverCaller: MockResultReceiverCaller{contract: contract}, MockResultReceiverTransactor: MockResultReceiverTransactor{contract: contract}, MockResultReceiverFilterer: MockResultReceiverFilterer{contract: contract}}, nil
}

// MockResultReceiver is an auto generated Go binding around an Ethereum contract.
type MockResultReceiver struct {
	MockResultReceiverCaller     // Read-only binding to the contract
	MockResultReceiverTransactor // Write-only binding to the contract
	MockResultReceiverFilterer   // Log filterer for contract events
}

// MockResultReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockResultReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockResultReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockResultReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockResultReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockResultReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockResultReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockResultReceiverSession struct {
	Contract     *MockResultReceiver // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MockResultReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockResultReceiverCallerSession struct {
	Contract *MockResultReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MockResultReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockResultReceiverTransactorSession struct {
	Contract     *MockResultReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MockResultReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockResultReceiverRaw struct {
	Contract *MockResultReceiver // Generic contract binding to access the raw methods on
}

// MockResultReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockResultReceiverCallerRaw struct {
	Contract *MockResultReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// MockResultReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockResultReceiverTransactorRaw struct {
	Contract *MockResultReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockResultReceiver creates a new instance of MockResultReceiver, bound to a specific deployed contract.
func NewMockResultReceiver(address common.Address, backend bind.ContractBackend) (*MockResultReceiver, error) {
	contract, err := bindMockResultReceiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockResultReceiver{MockResultReceiverCaller: MockResultReceiverCaller{contract: contract}, MockResultReceiverTransactor: MockResultReceiverTransactor{contract: contract}, MockResultReceiverFilterer: MockResultReceiverFilterer{contract: contract}}, nil
}

// NewMockResultReceiverCaller creates a new read-only instance of MockResultReceiver, bound to a specific deployed contract.
func NewMockResultReceiverCaller(address common.Address, caller bind.ContractCaller) (*MockResultReceiverCaller, error) {
	contract, err := bindMockResultReceiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockResultReceiverCaller{contract: contract}, nil
}

// NewMockResultReceiverTransactor creates a new write-only instance of MockResultReceiver, bound to a specific deployed contract.
func NewMockResultReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*MockResultReceiverTransactor, error) {
	contract, err := bindMockResultReceiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockResultReceiverTransactor{contract: contract}, nil
}

// NewMockResultReceiverFilterer creates a new log filterer instance of MockResultReceiver, bound to a specific deployed contract.
func NewMockResultReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*MockResultReceiverFilterer, error) {
	contract, err := bindMockResultReceiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockResultReceiverFilterer{contract: contract}, nil
}

// bindMockResultReceiver binds a generic wrapper to an already deployed contract.
func bindMockResultReceiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MockResultReceiverMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockResultReceiver *MockResultReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockResultReceiver.Contract.MockResultReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockResultReceiver *MockResultReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.MockResultReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockResultReceiver *MockResultReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.MockResultReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockResultReceiver *MockResultReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockResultReceiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockResultReceiver *MockResultReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockResultReceiver *MockResultReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.contract.Transact(opts, method, params...)
}

// ChallengeIndex is a free data retrieval call binding the contract method 0xd6853748.
//
// Solidity: function challengeIndex() view returns(uint256)
func (_MockResultReceiver *MockResultReceiverCaller) ChallengeIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockResultReceiver.contract.Call(opts, &out, "challengeIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChallengeIndex is a free data retrieval call binding the contract method 0xd6853748.
//
// Solidity: function challengeIndex() view returns(uint256)
func (_MockResultReceiver *MockResultReceiverSession) ChallengeIndex() (*big.Int, error) {
	return _MockResultReceiver.Contract.ChallengeIndex(&_MockResultReceiver.CallOpts)
}

// ChallengeIndex is a free data retrieval call binding the contract method 0xd6853748.
//
// Solidity: function challengeIndex() view returns(uint256)
func (_MockResultReceiver *MockResultReceiverCallerSession) ChallengeIndex() (*big.Int, error) {
	return _MockResultReceiver.Contract.ChallengeIndex(&_MockResultReceiver.CallOpts)
}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_MockResultReceiver *MockResultReceiverCaller) Loser(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockResultReceiver.contract.Call(opts, &out, "loser")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_MockResultReceiver *MockResultReceiverSession) Loser() (common.Address, error) {
	return _MockResultReceiver.Contract.Loser(&_MockResultReceiver.CallOpts)
}

// Loser is a free data retrieval call binding the contract method 0xe82898b3.
//
// Solidity: function loser() view returns(address)
func (_MockResultReceiver *MockResultReceiverCallerSession) Loser() (common.Address, error) {
	return _MockResultReceiver.Contract.Loser(&_MockResultReceiver.CallOpts)
}

// Manager is a free data retrieval call binding the contract method 0x481c6a75.
//
// Solidity: function manager() view returns(address)
func (_MockResultReceiver *MockResultReceiverCaller) Manager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockResultReceiver.contract.Call(opts, &out, "manager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Manager is a free data retrieval call binding the contract method 0x481c6a75.
//
// Solidity: function manager() view returns(address)
func (_MockResultReceiver *MockResultReceiverSession) Manager() (common.Address, error) {
	return _MockResultReceiver.Contract.Manager(&_MockResultReceiver.CallOpts)
}

// Manager is a free data retrieval call binding the contract method 0x481c6a75.
//
// Solidity: function manager() view returns(address)
func (_MockResultReceiver *MockResultReceiverCallerSession) Manager() (common.Address, error) {
	return _MockResultReceiver.Contract.Manager(&_MockResultReceiver.CallOpts)
}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_MockResultReceiver *MockResultReceiverCaller) Winner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockResultReceiver.contract.Call(opts, &out, "winner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_MockResultReceiver *MockResultReceiverSession) Winner() (common.Address, error) {
	return _MockResultReceiver.Contract.Winner(&_MockResultReceiver.CallOpts)
}

// Winner is a free data retrieval call binding the contract method 0xdfbf53ae.
//
// Solidity: function winner() view returns(address)
func (_MockResultReceiver *MockResultReceiverCallerSession) Winner() (common.Address, error) {
	return _MockResultReceiver.Contract.Winner(&_MockResultReceiver.CallOpts)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex_, address winner_, address loser_) returns()
func (_MockResultReceiver *MockResultReceiverTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex_ *big.Int, winner_ common.Address, loser_ common.Address) (*types.Transaction, error) {
	return _MockResultReceiver.contract.Transact(opts, "completeChallenge", challengeIndex_, winner_, loser_)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex_, address winner_, address loser_) returns()
func (_MockResultReceiver *MockResultReceiverSession) CompleteChallenge(challengeIndex_ *big.Int, winner_ common.Address, loser_ common.Address) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.CompleteChallenge(&_MockResultReceiver.TransactOpts, challengeIndex_, winner_, loser_)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex_, address winner_, address loser_) returns()
func (_MockResultReceiver *MockResultReceiverTransactorSession) CompleteChallenge(challengeIndex_ *big.Int, winner_ common.Address, loser_ common.Address) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.CompleteChallenge(&_MockResultReceiver.TransactOpts, challengeIndex_, winner_, loser_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_MockResultReceiver *MockResultReceiverTransactor) CreateChallenge(opts *bind.TransactOpts, wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _MockResultReceiver.contract.Transact(opts, "createChallenge", wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_MockResultReceiver *MockResultReceiverSession) CreateChallenge(wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.CreateChallenge(&_MockResultReceiver.TransactOpts, wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_MockResultReceiver *MockResultReceiverTransactorSession) CreateChallenge(wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _MockResultReceiver.Contract.CreateChallenge(&_MockResultReceiver.TransactOpts, wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// MockResultReceiverChallengeCompletedIterator is returned from FilterChallengeCompleted and is used to iterate over the raw logs and unpacked data for ChallengeCompleted events raised by the MockResultReceiver contract.
type MockResultReceiverChallengeCompletedIterator struct {
	Event *MockResultReceiverChallengeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockResultReceiverChallengeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockResultReceiverChallengeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockResultReceiverChallengeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockResultReceiverChallengeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockResultReceiverChallengeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockResultReceiverChallengeCompleted represents a ChallengeCompleted event raised by the MockResultReceiver contract.
type MockResultReceiverChallengeCompleted struct {
	ChallengeIndex *big.Int
	Winner         common.Address
	Loser          common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChallengeCompleted is a free log retrieval operation binding the contract event 0x88cb1f3fe351f3ac338db9c36bff1ece1750423c7ae6dfc427cd194b1c69b127.
//
// Solidity: event ChallengeCompleted(uint256 indexed challengeIndex, address indexed winner, address indexed loser)
func (_MockResultReceiver *MockResultReceiverFilterer) FilterChallengeCompleted(opts *bind.FilterOpts, challengeIndex []*big.Int, winner []common.Address, loser []common.Address) (*MockResultReceiverChallengeCompletedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _MockResultReceiver.contract.FilterLogs(opts, "ChallengeCompleted", challengeIndexRule, winnerRule, loserRule)
	if err != nil {
		return nil, err
	}
	return &MockResultReceiverChallengeCompletedIterator{contract: _MockResultReceiver.contract, event: "ChallengeCompleted", logs: logs, sub: sub}, nil
}

// WatchChallengeCompleted is a free log subscription operation binding the contract event 0x88cb1f3fe351f3ac338db9c36bff1ece1750423c7ae6dfc427cd194b1c69b127.
//
// Solidity: event ChallengeCompleted(uint256 indexed challengeIndex, address indexed winner, address indexed loser)
func (_MockResultReceiver *MockResultReceiverFilterer) WatchChallengeCompleted(opts *bind.WatchOpts, sink chan<- *MockResultReceiverChallengeCompleted, challengeIndex []*big.Int, winner []common.Address, loser []common.Address) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _MockResultReceiver.contract.WatchLogs(opts, "ChallengeCompleted", challengeIndexRule, winnerRule, loserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockResultReceiverChallengeCompleted)
				if err := _MockResultReceiver.contract.UnpackLog(event, "ChallengeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCompleted is a log parse operation binding the contract event 0x88cb1f3fe351f3ac338db9c36bff1ece1750423c7ae6dfc427cd194b1c69b127.
//
// Solidity: event ChallengeCompleted(uint256 indexed challengeIndex, address indexed winner, address indexed loser)
func (_MockResultReceiver *MockResultReceiverFilterer) ParseChallengeCompleted(log types.Log) (*MockResultReceiverChallengeCompleted, error) {
	event := new(MockResultReceiverChallengeCompleted)
	if err := _MockResultReceiver.contract.UnpackLog(event, "ChallengeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockstreamMetaData contains all meta data concerning the Mockstream contract.
var MockstreamMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ContractFrozen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataCommitment\",\"type\":\"bytes32\"}],\"name\":\"DataCommitmentStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_latestBlock\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"state_dataCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_proofNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_beginBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endBlock\",\"type\":\"uint64\"}],\"name\":\"submitDataCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"updateFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_height\",\"type\":\"uint64\"}],\"name\":\"updateGenesisState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proofNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structDataRootTuple\",\"name\":\"_tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"structBinaryMerkleProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610a2a908161001b8239f35b600080fdfe608060409080825260048036101561001657600080fd5b600092833560e01c928363054f7d9c146103d15750826307e2da96146103a95782631f3302a91461027457826355ae3f221461025557826382e0cf6b14610222578263aeeed33e146101fa578263e098f57d146101075750508063eb92db27146100c15763fb0f43681461008957600080fd5b346100be5760203660031901126100be576001600160401b036100aa610442565b82546001600160401b031916911617815580f35b80fd5b50346100be5760203660031901126100be576100db610442565b6003805460ff1916905581546001600160401b0319166001600160401b03919091161781556001805580f35b909150346101f65760603660031901126101f6576001600160401b039180359060243584811691908290036101f257604435948086168096036101ee5782908754161180156101e5575b6101b25750908361019d93926001548752600260205282848820557f34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb60206001549551868152a46104e6565b60015581546001600160401b03191617815580f35b606490602085519162461bcd60e51b8352820152600d60248201526c494e56414c49442052414e474560981b6044820152fd5b50848211610151565b8680fd5b8580fd5b8280fd5b9150346101f65760203660031901126101f65760209282913581526002845220549051908152f35b83823461025157602036600319011261025157358015158091036102515760ff80196003541691161760035580f35b5080fd5b8390346102515781600319360112610251576020906001549051908152f35b909150346101f657600319916080368401126103a557816023193601126103a55781516001600160401b039181840183811183821017610392578452602435825260209560443587840152606435958487116102515760609087360301126100be57845193606085018581108282111761037f5786528683013590811161025157860190366023830112156100be57828201356103108161042b565b9261031d885194856103f2565b81845260248a85019260051b820101923684116100be57509060248a9201905b8382106103705750505050610367949560449185526024810135888601520135858401523561045d565b90519015158152f35b8135815290820190820161033d565b634e487b7160e01b835260418452602483fd5b634e487b7160e01b875260418252602487fd5b8380fd5b839034610251578160031936011261025157905490516001600160401b039091168152602090f35b84903461025157816003193601126102515760209060ff6003541615158152f35b601f909101601f19168101906001600160401b0382119082101761041557604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116104155760051b60200190565b600435906001600160401b038216820361045857565b600080fd5b60ff600354166104d457801580156104c8575b6104c0576000526002602052604060002054916020604051928051828501520151604083015260408252606082019282841060018060401b03851117610415576104bc9360405261052b565b5090565b505050600090565b50600154811015610470565b604051634051e96160e01b8152600490fd5b60001981146104f55760010190565b634e487b7160e01b600052601160045260246000fd5b6006111561051557565b634e487b7160e01b600052602160045260246000fd5b604082018051939493600181116106245750825151610617575b6020830190815181511115610609576020610578966105926040516105868160009b8c9586888401526021830190610730565b03601f1981018352826103f2565b60405191828092610730565b039060025afa156105fe5785519351918251156105e757906105b993949151905190610785565b60068110156105d357806105cd5750149190565b92915050565b634e487b7160e01b85526021600452602485fd5b50516001141590506105f857149190565b50508190565b6040513d87823e3d90fd5b505050509050600090600290565b5050509050600090600190565b610635845151916020860151610681565b14610545575050509050600090600190565b906101009182039182116104f557565b6000198101919082116104f557565b919082039182116104f557565b60010190816001116104f557565b90600190818111156104c05760005b8183821b1061070f576101009081039081116104f5576106af90610647565b92826106ba85610657565b1b906106c582610657565b81116106d2575050505090565b92935090918382036106e45750505090565b6107039350906106f7816106fd93610666565b92610666565b90610681565b61070c90610673565b90565b8281018091111561069057634e487b7160e01b600052601160045260246000fd5b9081519160005b838110610748575050016000815290565b8060208092840101518185015201610737565b805182101561076f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b939293811561086c57600182146108575784511561084c57826107a783610877565b6107ba6107b48851610657565b886108c2565b9281811061081757816106f76107da96936107d493610666565b90610785565b90916107e58261050b565b81610810575050610804836107fe61080a949551610657565b9061075b565b51610986565b90600090565b9350919050565b6108219450610785565b909161082c8261050b565b81610810575050610845836107fe61080a949551610657565b5190610986565b505090915090600590565b50509091516108665790600090565b90600490565b505090915090600390565b6001808210610458578180916000925b6108ad57505060001981019081116104f5576001901b9081146108a75790565b60011c90565b90916108b8906104e6565b91811c9081610887565b919082518111610929576108d58161042b565b906108e360405192836103f2565b808252601f196108f28261042b565b0136602084013760005b81811061090a575090925050565b806109176001928761075b565b51610922828661075b565b52016108fc565b60405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608490fd5b604051600160f81b6020820152602181019190915260418082019290925290815260808101906001600160401b038211818310176104155781600091602093604052607f19906109d68382610730565b03019060025afa156109e85760005190565b6040513d6000823e3d90fdfea2646970667358221220177a3bf7572799e54a140f65aaa6f1091aace1e24008eaee19c498dd178f1ea864736f6c63430008190033",
}

// MockstreamABI is the input ABI used to generate the binding from.
// Deprecated: Use MockstreamMetaData.ABI instead.
var MockstreamABI = MockstreamMetaData.ABI

// MockstreamBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MockstreamMetaData.Bin instead.
var MockstreamBin = MockstreamMetaData.Bin

// DeployMockstream deploys a new Ethereum contract, binding an instance of Mockstream to it.
func DeployMockstream(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Mockstream, error) {
	parsed, err := MockstreamMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MockstreamBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Mockstream{MockstreamCaller: MockstreamCaller{contract: contract}, MockstreamTransactor: MockstreamTransactor{contract: contract}, MockstreamFilterer: MockstreamFilterer{contract: contract}}, nil
}

// Mockstream is an auto generated Go binding around an Ethereum contract.
type Mockstream struct {
	MockstreamCaller     // Read-only binding to the contract
	MockstreamTransactor // Write-only binding to the contract
	MockstreamFilterer   // Log filterer for contract events
}

// MockstreamCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockstreamCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockstreamTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockstreamTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockstreamFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockstreamFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockstreamSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockstreamSession struct {
	Contract     *Mockstream       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MockstreamCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockstreamCallerSession struct {
	Contract *MockstreamCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MockstreamTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockstreamTransactorSession struct {
	Contract     *MockstreamTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MockstreamRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockstreamRaw struct {
	Contract *Mockstream // Generic contract binding to access the raw methods on
}

// MockstreamCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockstreamCallerRaw struct {
	Contract *MockstreamCaller // Generic read-only contract binding to access the raw methods on
}

// MockstreamTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockstreamTransactorRaw struct {
	Contract *MockstreamTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockstream creates a new instance of Mockstream, bound to a specific deployed contract.
func NewMockstream(address common.Address, backend bind.ContractBackend) (*Mockstream, error) {
	contract, err := bindMockstream(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mockstream{MockstreamCaller: MockstreamCaller{contract: contract}, MockstreamTransactor: MockstreamTransactor{contract: contract}, MockstreamFilterer: MockstreamFilterer{contract: contract}}, nil
}

// NewMockstreamCaller creates a new read-only instance of Mockstream, bound to a specific deployed contract.
func NewMockstreamCaller(address common.Address, caller bind.ContractCaller) (*MockstreamCaller, error) {
	contract, err := bindMockstream(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockstreamCaller{contract: contract}, nil
}

// NewMockstreamTransactor creates a new write-only instance of Mockstream, bound to a specific deployed contract.
func NewMockstreamTransactor(address common.Address, transactor bind.ContractTransactor) (*MockstreamTransactor, error) {
	contract, err := bindMockstream(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockstreamTransactor{contract: contract}, nil
}

// NewMockstreamFilterer creates a new log filterer instance of Mockstream, bound to a specific deployed contract.
func NewMockstreamFilterer(address common.Address, filterer bind.ContractFilterer) (*MockstreamFilterer, error) {
	contract, err := bindMockstream(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockstreamFilterer{contract: contract}, nil
}

// bindMockstream binds a generic wrapper to an already deployed contract.
func bindMockstream(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MockstreamMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mockstream *MockstreamRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mockstream.Contract.MockstreamCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mockstream *MockstreamRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mockstream.Contract.MockstreamTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mockstream *MockstreamRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mockstream.Contract.MockstreamTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mockstream *MockstreamCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mockstream.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mockstream *MockstreamTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mockstream.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mockstream *MockstreamTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mockstream.Contract.contract.Transact(opts, method, params...)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Mockstream *MockstreamCaller) Frozen(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Mockstream.contract.Call(opts, &out, "frozen")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Mockstream *MockstreamSession) Frozen() (bool, error) {
	return _Mockstream.Contract.Frozen(&_Mockstream.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() view returns(bool)
func (_Mockstream *MockstreamCallerSession) Frozen() (bool, error) {
	return _Mockstream.Contract.Frozen(&_Mockstream.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Mockstream *MockstreamCaller) LatestBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Mockstream.contract.Call(opts, &out, "latestBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Mockstream *MockstreamSession) LatestBlock() (uint64, error) {
	return _Mockstream.Contract.LatestBlock(&_Mockstream.CallOpts)
}

// LatestBlock is a free data retrieval call binding the contract method 0x07e2da96.
//
// Solidity: function latestBlock() view returns(uint64)
func (_Mockstream *MockstreamCallerSession) LatestBlock() (uint64, error) {
	return _Mockstream.Contract.LatestBlock(&_Mockstream.CallOpts)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Mockstream *MockstreamCaller) StateDataCommitments(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Mockstream.contract.Call(opts, &out, "state_dataCommitments", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Mockstream *MockstreamSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _Mockstream.Contract.StateDataCommitments(&_Mockstream.CallOpts, arg0)
}

// StateDataCommitments is a free data retrieval call binding the contract method 0xaeeed33e.
//
// Solidity: function state_dataCommitments(uint256 ) view returns(bytes32)
func (_Mockstream *MockstreamCallerSession) StateDataCommitments(arg0 *big.Int) ([32]byte, error) {
	return _Mockstream.Contract.StateDataCommitments(&_Mockstream.CallOpts, arg0)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Mockstream *MockstreamCaller) StateProofNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mockstream.contract.Call(opts, &out, "state_proofNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Mockstream *MockstreamSession) StateProofNonce() (*big.Int, error) {
	return _Mockstream.Contract.StateProofNonce(&_Mockstream.CallOpts)
}

// StateProofNonce is a free data retrieval call binding the contract method 0x55ae3f22.
//
// Solidity: function state_proofNonce() view returns(uint256)
func (_Mockstream *MockstreamCallerSession) StateProofNonce() (*big.Int, error) {
	return _Mockstream.Contract.StateProofNonce(&_Mockstream.CallOpts)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Mockstream *MockstreamCaller) VerifyAttestation(opts *bind.CallOpts, _proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	var out []interface{}
	err := _Mockstream.contract.Call(opts, &out, "verifyAttestation", _proofNonce, _tuple, _proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Mockstream *MockstreamSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _Mockstream.Contract.VerifyAttestation(&_Mockstream.CallOpts, _proofNonce, _tuple, _proof)
}

// VerifyAttestation is a free data retrieval call binding the contract method 0x1f3302a9.
//
// Solidity: function verifyAttestation(uint256 _proofNonce, (uint256,bytes32) _tuple, (bytes32[],uint256,uint256) _proof) view returns(bool)
func (_Mockstream *MockstreamCallerSession) VerifyAttestation(_proofNonce *big.Int, _tuple DataRootTuple, _proof BinaryMerkleProof) (bool, error) {
	return _Mockstream.Contract.VerifyAttestation(&_Mockstream.CallOpts, _proofNonce, _tuple, _proof)
}

// Initialize is a paid mutator transaction binding the contract method 0xeb92db27.
//
// Solidity: function initialize(uint64 _latestBlock) returns()
func (_Mockstream *MockstreamTransactor) Initialize(opts *bind.TransactOpts, _latestBlock uint64) (*types.Transaction, error) {
	return _Mockstream.contract.Transact(opts, "initialize", _latestBlock)
}

// Initialize is a paid mutator transaction binding the contract method 0xeb92db27.
//
// Solidity: function initialize(uint64 _latestBlock) returns()
func (_Mockstream *MockstreamSession) Initialize(_latestBlock uint64) (*types.Transaction, error) {
	return _Mockstream.Contract.Initialize(&_Mockstream.TransactOpts, _latestBlock)
}

// Initialize is a paid mutator transaction binding the contract method 0xeb92db27.
//
// Solidity: function initialize(uint64 _latestBlock) returns()
func (_Mockstream *MockstreamTransactorSession) Initialize(_latestBlock uint64) (*types.Transaction, error) {
	return _Mockstream.Contract.Initialize(&_Mockstream.TransactOpts, _latestBlock)
}

// SubmitDataCommitment is a paid mutator transaction binding the contract method 0xe098f57d.
//
// Solidity: function submitDataCommitment(bytes32 _dataCommitment, uint64 _beginBlock, uint64 _endBlock) returns()
func (_Mockstream *MockstreamTransactor) SubmitDataCommitment(opts *bind.TransactOpts, _dataCommitment [32]byte, _beginBlock uint64, _endBlock uint64) (*types.Transaction, error) {
	return _Mockstream.contract.Transact(opts, "submitDataCommitment", _dataCommitment, _beginBlock, _endBlock)
}

// SubmitDataCommitment is a paid mutator transaction binding the contract method 0xe098f57d.
//
// Solidity: function submitDataCommitment(bytes32 _dataCommitment, uint64 _beginBlock, uint64 _endBlock) returns()
func (_Mockstream *MockstreamSession) SubmitDataCommitment(_dataCommitment [32]byte, _beginBlock uint64, _endBlock uint64) (*types.Transaction, error) {
	return _Mockstream.Contract.SubmitDataCommitment(&_Mockstream.TransactOpts, _dataCommitment, _beginBlock, _endBlock)
}

// SubmitDataCommitment is a paid mutator transaction binding the contract method 0xe098f57d.
//
// Solidity: function submitDataCommitment(bytes32 _dataCommitment, uint64 _beginBlock, uint64 _endBlock) returns()
func (_Mockstream *MockstreamTransactorSession) SubmitDataCommitment(_dataCommitment [32]byte, _beginBlock uint64, _endBlock uint64) (*types.Transaction, error) {
	return _Mockstream.Contract.SubmitDataCommitment(&_Mockstream.TransactOpts, _dataCommitment, _beginBlock, _endBlock)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Mockstream *MockstreamTransactor) UpdateFreeze(opts *bind.TransactOpts, _freeze bool) (*types.Transaction, error) {
	return _Mockstream.contract.Transact(opts, "updateFreeze", _freeze)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Mockstream *MockstreamSession) UpdateFreeze(_freeze bool) (*types.Transaction, error) {
	return _Mockstream.Contract.UpdateFreeze(&_Mockstream.TransactOpts, _freeze)
}

// UpdateFreeze is a paid mutator transaction binding the contract method 0x82e0cf6b.
//
// Solidity: function updateFreeze(bool _freeze) returns()
func (_Mockstream *MockstreamTransactorSession) UpdateFreeze(_freeze bool) (*types.Transaction, error) {
	return _Mockstream.Contract.UpdateFreeze(&_Mockstream.TransactOpts, _freeze)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0xfb0f4368.
//
// Solidity: function updateGenesisState(uint64 _height) returns()
func (_Mockstream *MockstreamTransactor) UpdateGenesisState(opts *bind.TransactOpts, _height uint64) (*types.Transaction, error) {
	return _Mockstream.contract.Transact(opts, "updateGenesisState", _height)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0xfb0f4368.
//
// Solidity: function updateGenesisState(uint64 _height) returns()
func (_Mockstream *MockstreamSession) UpdateGenesisState(_height uint64) (*types.Transaction, error) {
	return _Mockstream.Contract.UpdateGenesisState(&_Mockstream.TransactOpts, _height)
}

// UpdateGenesisState is a paid mutator transaction binding the contract method 0xfb0f4368.
//
// Solidity: function updateGenesisState(uint64 _height) returns()
func (_Mockstream *MockstreamTransactorSession) UpdateGenesisState(_height uint64) (*types.Transaction, error) {
	return _Mockstream.Contract.UpdateGenesisState(&_Mockstream.TransactOpts, _height)
}

// MockstreamDataCommitmentStoredIterator is returned from FilterDataCommitmentStored and is used to iterate over the raw logs and unpacked data for DataCommitmentStored events raised by the Mockstream contract.
type MockstreamDataCommitmentStoredIterator struct {
	Event *MockstreamDataCommitmentStored // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockstreamDataCommitmentStoredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockstreamDataCommitmentStored)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockstreamDataCommitmentStored)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockstreamDataCommitmentStoredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockstreamDataCommitmentStoredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockstreamDataCommitmentStored represents a DataCommitmentStored event raised by the Mockstream contract.
type MockstreamDataCommitmentStored struct {
	ProofNonce     *big.Int
	StartBlock     uint64
	EndBlock       uint64
	DataCommitment [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDataCommitmentStored is a free log retrieval operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Mockstream *MockstreamFilterer) FilterDataCommitmentStored(opts *bind.FilterOpts, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (*MockstreamDataCommitmentStoredIterator, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _Mockstream.contract.FilterLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return &MockstreamDataCommitmentStoredIterator{contract: _Mockstream.contract, event: "DataCommitmentStored", logs: logs, sub: sub}, nil
}

// WatchDataCommitmentStored is a free log subscription operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Mockstream *MockstreamFilterer) WatchDataCommitmentStored(opts *bind.WatchOpts, sink chan<- *MockstreamDataCommitmentStored, startBlock []uint64, endBlock []uint64, dataCommitment [][32]byte) (event.Subscription, error) {

	var startBlockRule []interface{}
	for _, startBlockItem := range startBlock {
		startBlockRule = append(startBlockRule, startBlockItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}
	var dataCommitmentRule []interface{}
	for _, dataCommitmentItem := range dataCommitment {
		dataCommitmentRule = append(dataCommitmentRule, dataCommitmentItem)
	}

	logs, sub, err := _Mockstream.contract.WatchLogs(opts, "DataCommitmentStored", startBlockRule, endBlockRule, dataCommitmentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockstreamDataCommitmentStored)
				if err := _Mockstream.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDataCommitmentStored is a log parse operation binding the contract event 0x34dd3689f5bd77a60a3ff2e09483dcab032fa2f1fd7227af3e24bed21beab1cb.
//
// Solidity: event DataCommitmentStored(uint256 proofNonce, uint64 indexed startBlock, uint64 indexed endBlock, bytes32 indexed dataCommitment)
func (_Mockstream *MockstreamFilterer) ParseDataCommitmentStored(log types.Log) (*MockstreamDataCommitmentStored, error) {
	event := new(MockstreamDataCommitmentStored)
	if err := _Mockstream.contract.UnpackLog(event, "DataCommitmentStored", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MultiCallTestMetaData contains all meta data concerning the MultiCallTest contract.
var MultiCallTestMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Called\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"write\",\"type\":\"bool\"}],\"name\":\"Storage\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Bin: "0x608080604052346015576107bf908161001b8239f35b600080fdfe60406080815261001036151561042a565b61003361002d61001f36610431565b356001600160f81b03191690565b60f81c90565b61003d3636610466565b60609360009360ff9360ff8216935b848688161061005d57875160208901f35b906100c293949596976100a761008f848061008961008063ffffffff9888610716565b63ffffffff1690565b95610481565b948591941661009f81838761049e565b96909561051f565b95909593806100bc61002d61001f8388610451565b946104ac565b909290808460f08416806102e357509187918c969594938b6000936003871692831594856102ae575b5050808061010e610108610102610114958e6104f4565b906105ee565b60601c90565b9a610502565b9390926000911561020257505091600093916101358594518093819361061a565b0391885af1938961014461064b565b95935b84156101b8575b9161016d95939187600860019997951661017b575b50505050506106d5565b985b0116959493929061004c565b7f30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5946101ab92519485948561068a565b0390a13887818b85610163565b939592505092945060048216156101ef575089936001938761016d948b6008956101e0610628565b9850919395509193955061014e565b80519081156101fd57602001fd5b600080fd5b939450919290506001810361023c57505060009182916102268d518093819361061a565b0390875af4938961023561064b565b9593610147565b9094959697506002919293501460001461027657918088928d979695946102678d518093819361061a565b0390875afa938961023561064b565b895162461bcd60e51b81526020600482015260116024820152701d5b9adb9bdddb8818d85b1b081ada5b99607a1b6044820152606490fd5b6101089a5081965061011492506102d681806102d061010e9461010296610754565b996104d7565b909b5092508a90506100eb565b949c955092939091506010036103f457808061030b61030561031194866104c9565b90610537565b936104d7565b906000600385168061038c57505091610332610305600195938d97956104c9565b90600885938383555b16610349575b50505061016f565b8951908152602081019190915290151560408201527f6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa890606090a1388080610341565b949c93949092506001141590506103b957918993916001939160086103b3825480946105b5565b9d61033b565b875162461bcd60e51b81526020600482015260146024820152731d5b9adb9bdddb881cdd1bdc9859d9481ada5b9960621b6044820152606490fd5b875162461bcd60e51b815260206004820152600f60248201526e1d5b9adb9bdddb8818dbdb5b585b99608a1b6044820152606490fd5b156101fd57565b1561043b57600090565b634e487b7160e01b600052603260045260246000fd5b901561043b5790565b9082101561043b570190565b919091826001116101fd5782116101fd576001916000190190565b90929192836004116101fd5783116101fd57600401916003190190565b9092919283116101fd579190565b90929192836001116101fd5783116101fd57600101916000190190565b906020116101fd5790602090565b90929192836020116101fd5783116101fd5760200191601f190190565b906014116101fd5790601490565b90929192836014116101fd5783116101fd57601401916013190190565b909392938483116101fd5784116101fd578101920390565b359060208110610545575090565b6000199060200360031b1b1690565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761058d57604052565b610554565b60005b8381106105a55750506000910152565b8181015183820152602001610595565b60406105ec91939293815194816105d6879351809260208087019101610592565b820190602082015203602081018552018361056a565b565b6001600160601b0319903581811693926014811061060b57505050565b60140360031b82901b16169150565b908092918237016000815290565b60405190602082016001600160401b0381118382101761058d5760405260008252565b3d15610685573d906001600160401b03821161058d5760405191610679601f8201601f19166020018461056a565b82523d6000602084013e565b606090565b929060a0949260ff91600180881b0316855216602084015215156040830152608060608301526106c98151809281608086015260208686019101610592565b601f01601f1916010190565b60206105ec9193929360405194816106f68793518092868087019101610592565b820161070a82518093868085019101610592565b0103808552018361056a565b91600091825b60ff8416600481101561074b5760ff91610739600192858961045a565b3560f81c9060081b179401169261071c565b50925050915090565b91600091825b60ff8416602081101561074b5760ff91610777600192858961045a565b3560f81c9060081b179401169261075a56fea264697066735822122094f8ccee87fa7116d37a3d4c86d488f6e9fe7a73e3afa9998a059217b980804064736f6c63430008190033",
}

// MultiCallTestABI is the input ABI used to generate the binding from.
// Deprecated: Use MultiCallTestMetaData.ABI instead.
var MultiCallTestABI = MultiCallTestMetaData.ABI

// MultiCallTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MultiCallTestMetaData.Bin instead.
var MultiCallTestBin = MultiCallTestMetaData.Bin

// DeployMultiCallTest deploys a new Ethereum contract, binding an instance of MultiCallTest to it.
func DeployMultiCallTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MultiCallTest, error) {
	parsed, err := MultiCallTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MultiCallTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultiCallTest{MultiCallTestCaller: MultiCallTestCaller{contract: contract}, MultiCallTestTransactor: MultiCallTestTransactor{contract: contract}, MultiCallTestFilterer: MultiCallTestFilterer{contract: contract}}, nil
}

// MultiCallTest is an auto generated Go binding around an Ethereum contract.
type MultiCallTest struct {
	MultiCallTestCaller     // Read-only binding to the contract
	MultiCallTestTransactor // Write-only binding to the contract
	MultiCallTestFilterer   // Log filterer for contract events
}

// MultiCallTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type MultiCallTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiCallTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MultiCallTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiCallTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MultiCallTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiCallTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MultiCallTestSession struct {
	Contract     *MultiCallTest    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MultiCallTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MultiCallTestCallerSession struct {
	Contract *MultiCallTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MultiCallTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MultiCallTestTransactorSession struct {
	Contract     *MultiCallTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MultiCallTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type MultiCallTestRaw struct {
	Contract *MultiCallTest // Generic contract binding to access the raw methods on
}

// MultiCallTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MultiCallTestCallerRaw struct {
	Contract *MultiCallTestCaller // Generic read-only contract binding to access the raw methods on
}

// MultiCallTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MultiCallTestTransactorRaw struct {
	Contract *MultiCallTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMultiCallTest creates a new instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTest(address common.Address, backend bind.ContractBackend) (*MultiCallTest, error) {
	contract, err := bindMultiCallTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultiCallTest{MultiCallTestCaller: MultiCallTestCaller{contract: contract}, MultiCallTestTransactor: MultiCallTestTransactor{contract: contract}, MultiCallTestFilterer: MultiCallTestFilterer{contract: contract}}, nil
}

// NewMultiCallTestCaller creates a new read-only instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTestCaller(address common.Address, caller bind.ContractCaller) (*MultiCallTestCaller, error) {
	contract, err := bindMultiCallTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCallTestCaller{contract: contract}, nil
}

// NewMultiCallTestTransactor creates a new write-only instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTestTransactor(address common.Address, transactor bind.ContractTransactor) (*MultiCallTestTransactor, error) {
	contract, err := bindMultiCallTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultiCallTestTransactor{contract: contract}, nil
}

// NewMultiCallTestFilterer creates a new log filterer instance of MultiCallTest, bound to a specific deployed contract.
func NewMultiCallTestFilterer(address common.Address, filterer bind.ContractFilterer) (*MultiCallTestFilterer, error) {
	contract, err := bindMultiCallTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultiCallTestFilterer{contract: contract}, nil
}

// bindMultiCallTest binds a generic wrapper to an already deployed contract.
func bindMultiCallTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MultiCallTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiCallTest *MultiCallTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCallTest.Contract.MultiCallTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiCallTest *MultiCallTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCallTest.Contract.MultiCallTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiCallTest *MultiCallTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCallTest.Contract.MultiCallTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiCallTest *MultiCallTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiCallTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiCallTest *MultiCallTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiCallTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiCallTest *MultiCallTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiCallTest.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MultiCallTest *MultiCallTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _MultiCallTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MultiCallTest *MultiCallTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MultiCallTest.Contract.Fallback(&_MultiCallTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MultiCallTest *MultiCallTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MultiCallTest.Contract.Fallback(&_MultiCallTest.TransactOpts, calldata)
}

// MultiCallTestCalledIterator is returned from FilterCalled and is used to iterate over the raw logs and unpacked data for Called events raised by the MultiCallTest contract.
type MultiCallTestCalledIterator struct {
	Event *MultiCallTestCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiCallTestCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCallTestCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiCallTestCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiCallTestCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiCallTestCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiCallTestCalled represents a Called event raised by the MultiCallTest contract.
type MultiCallTestCalled struct {
	Addr       common.Address
	Count      uint8
	Success    bool
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCalled is a free log retrieval operation binding the contract event 0x30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5.
//
// Solidity: event Called(address addr, uint8 count, bool success, bytes returnData)
func (_MultiCallTest *MultiCallTestFilterer) FilterCalled(opts *bind.FilterOpts) (*MultiCallTestCalledIterator, error) {

	logs, sub, err := _MultiCallTest.contract.FilterLogs(opts, "Called")
	if err != nil {
		return nil, err
	}
	return &MultiCallTestCalledIterator{contract: _MultiCallTest.contract, event: "Called", logs: logs, sub: sub}, nil
}

// WatchCalled is a free log subscription operation binding the contract event 0x30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5.
//
// Solidity: event Called(address addr, uint8 count, bool success, bytes returnData)
func (_MultiCallTest *MultiCallTestFilterer) WatchCalled(opts *bind.WatchOpts, sink chan<- *MultiCallTestCalled) (event.Subscription, error) {

	logs, sub, err := _MultiCallTest.contract.WatchLogs(opts, "Called")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiCallTestCalled)
				if err := _MultiCallTest.contract.UnpackLog(event, "Called", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCalled is a log parse operation binding the contract event 0x30ad2f9d9b34e611e2e65d13ec9bb22af3424e51619d6006cec561bc2c322cc5.
//
// Solidity: event Called(address addr, uint8 count, bool success, bytes returnData)
func (_MultiCallTest *MultiCallTestFilterer) ParseCalled(log types.Log) (*MultiCallTestCalled, error) {
	event := new(MultiCallTestCalled)
	if err := _MultiCallTest.contract.UnpackLog(event, "Called", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MultiCallTestStorageIterator is returned from FilterStorage and is used to iterate over the raw logs and unpacked data for Storage events raised by the MultiCallTest contract.
type MultiCallTestStorageIterator struct {
	Event *MultiCallTestStorage // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MultiCallTestStorageIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MultiCallTestStorage)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MultiCallTestStorage)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MultiCallTestStorageIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MultiCallTestStorageIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MultiCallTestStorage represents a Storage event raised by the MultiCallTest contract.
type MultiCallTestStorage struct {
	Slot  [32]byte
	Data  [32]byte
	Write bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStorage is a free log retrieval operation binding the contract event 0x6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa8.
//
// Solidity: event Storage(bytes32 slot, bytes32 data, bool write)
func (_MultiCallTest *MultiCallTestFilterer) FilterStorage(opts *bind.FilterOpts) (*MultiCallTestStorageIterator, error) {

	logs, sub, err := _MultiCallTest.contract.FilterLogs(opts, "Storage")
	if err != nil {
		return nil, err
	}
	return &MultiCallTestStorageIterator{contract: _MultiCallTest.contract, event: "Storage", logs: logs, sub: sub}, nil
}

// WatchStorage is a free log subscription operation binding the contract event 0x6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa8.
//
// Solidity: event Storage(bytes32 slot, bytes32 data, bool write)
func (_MultiCallTest *MultiCallTestFilterer) WatchStorage(opts *bind.WatchOpts, sink chan<- *MultiCallTestStorage) (event.Subscription, error) {

	logs, sub, err := _MultiCallTest.contract.WatchLogs(opts, "Storage")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MultiCallTestStorage)
				if err := _MultiCallTest.contract.UnpackLog(event, "Storage", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStorage is a log parse operation binding the contract event 0x6ab08a9a891703dcd5859f8e8328215fef6d9f250e7d58267bee45aabaee2fa8.
//
// Solidity: event Storage(bytes32 slot, bytes32 data, bool write)
func (_MultiCallTest *MultiCallTestFilterer) ParseStorage(log types.Log) (*MultiCallTestStorage, error) {
	event := new(MultiCallTestStorage)
	if err := _MultiCallTest.contract.UnpackLog(event, "Storage", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OneStepProverHostIoCelestiaMockMetaData contains all meta data concerning the OneStepProverHostIoCelestiaMock contract.
var OneStepProverHostIoCelestiaMockMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"BLOBSTREAM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CELESTIA_MESSAGE_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxInboxMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"}],\"internalType\":\"structExecutionContext\",\"name\":\"execCtx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enumMachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enumValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"structValue[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"structValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inactiveStackHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiStack\",\"name\":\"valueMultiStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enumValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"structValue[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"structValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enumValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"structValue\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"structStackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structStackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inactiveStackHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiStack\",\"name\":\"frameMultiStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recoveryPc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structMachine\",\"name\":\"startMach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSize\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extraHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"structModule\",\"name\":\"startMod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"opcode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"argumentData\",\"type\":\"uint256\"}],\"internalType\":\"structInstruction\",\"name\":\"inst\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeOneStep\",\"outputs\":[{\"components\":[{\"internalType\":\"enumMachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enumValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"structValue[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"structValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inactiveStackHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiStack\",\"name\":\"valueMultiStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enumValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"structValue[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"structValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enumValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"structValue\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"structStackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structStackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inactiveStackHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"structMultiStack\",\"name\":\"frameMultiStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recoveryPc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structMachine\",\"name\":\"mach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSize\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extraHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"structModule\",\"name\":\"mod\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608080604052346015576132f5908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081633604366f14610094575080635fd9e56d146100745763dc3465471461004057600080fd5b3461006f57600036600319011261006f576020604051738f0febb820c4858e3c815f87391bde38e62b4a8a8152f35b600080fd5b3461006f57600036600319011261006f57604051606360f81b8152602090f35b3461006f5736600319016101c0811261006f5760401361006f576001600160401b036044351161006f576101c06044353603600319011261006f5761010036606319011261006f5760403661016319011261006f576101a435906001600160401b03821161006f573660238301121561006f576001600160401b0360048301351161006f5736602483600401358401011161006f5761016081610138600093610b3d565b828152610143610bcd565b602082015260405161015481610b07565b838152836020820152604082015261016a610bcd565b606082015260405161017b81610b07565b60608152836020820152608082015260405161019681610b07565b83815283602082015260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152600060a06040516101d781610b59565b8281526040516101e681610b74565b8381528360208201528360408201526020820152826040820152826060820152826080820152015260405161021a81610b3d565b6004604435810135101561006f57604435600481013582526001600160401b036024909101351161006f5761025a36604435602481013501600401610c3e565b602082015261026d366044803501610d16565b60408201526001600160401b03604435608401351161006f5761029b36604435608481013501600401610c3e565b60608201526001600160401b0360443560a401351161006f57604060443560a4810135013603600319011261006f576040516102d681610b07565b60443560a481013501600401356001600160401b03811161006f573660443560a4810135018201602301121561006f5760443560a4810135018101600401359061031f82610bf5565b9161032d6040519384610baa565b80835260208301913660443560a481013501820160a08402016024011161006f5760443560a481013501810160240192905b60443560a481013501810160a084020160240184106109fa57505050508152602460a46044350135604435010135602082015260808201526103a63660c460443501610d16565b60a0820152610104604435013560c08201526103c761012460443501610d3e565b60e08201526103db61014460443501610d3e565b6101008201526103f061016460443501610d3e565b6101208201526044356101848101356101408301526101a401356101608201526040519161041d83610b59565b6064358352606036608319011261006f5760405161043a81610b74565b6084356001600160401b038116900361006f57608435815260a4356001600160401b038116900361006f5760a435602082015260c4356040820152602084015260e435604084015261010435606084015261012435608084015263ffffffff6101443516610144350361006f576101443560a084015261ffff6101643516610164350361006f5761801061ffff61016435161015806109e7575b156109655760065b8060051461095a5780600414610945578060011461092b5760061461051157634e487b7160e01b600052605160045260246000fd5b610519611eda565b50610522611eda565b506000906040519361053385610b07565b60403686376040519061054582610b07565b60403683376000935b600260ff8616101561058a5761056f610584918560040135602487016127d9565b959061057e60ff83168a6124a9565b52612498565b9361054e565b909350949093946000915b600260ff8416101561061b57600094855b60088710156105e9576105e060019167ffffffffffffff006105d0878a6004013560248c01610d80565b3560f81c9160081b161794610da2565b960195926105a6565b9550926106129197929561060060ff8316896124a9565b6001600160401b039091169052612498565b91939095610595565b60405194969591925061062d85610b07565b8452602084015261063d836124ba565b60c0850151036108f35761801061ffff61016435161480156108e1575b156108615761068b92916106869161067d91600481013591908290602401610db1565b908387876125ea565b6124ba565b60c08201525b6040519061012082528051600481101561084b576101208301526106c760208201516101c06101408501526102e0840190610aa1565b9060206040820151805161016086015201516101808401526106fd60608201519261011f199384868303016101a0870152610aa1565b608082015192848203016101c085015282519260408252835180604084015260206060840195019060005b818110610804575050509461016063ffffffff9360a093602080899a015191015260208482015180516101e08a0152015161020088015260c08101516102208801528460e082015116610240880152846101008201511661026088015284610120820151166102808801526101408101516102a088015201516102c08601528051602086015260406020820151600180831b0381511682880152600180831b03602082015116606088015201516080860152604081015182860152606081015160c0860152608081015160e08601520151166101008301520390f35b909195602060a060019263ffffffff60608b51610822848251610a89565b858101516040850152826040820151168285015201511660808201520197019101919091610728565b634e487b7160e01b600052602160045260246000fd5b50506101643561ffff1661801203610881578061068661068b928461257a565b6101643561ffff166180130361089f578061068661068b9284612524565b60405162461bcd60e51b815260206004820152601a602482015279494e56414c49445f474c4f42414c53544154455f4f50434f444560301b6044820152606490fd5b5061801161ffff61016435161461065a565b60405162461bcd60e51b815260206004820152601060248201526f4241445f474c4f42414c5f535441544560801b6044820152606490fd5b50806024610940926004013591018484611894565b610691565b50806024610940926004013591018484610df5565b505060018152610691565b6101643561ffff166180200361097c5760016104dc565b6101643561ffff16618021036109935760046104dc565b6101643561ffff16618022036109aa5760056104dc565b60405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f4d454d4f52595f4f50434f444560581b6044820152606490fd5b5061801361ffff610164351611156104d4565b60a08436031261006f576040516001600160401b036080820190811190821117610a735760a06020602494836080849501604052610a38368a610c0c565b8152604089013583820152610a4f60608a01610d3e565b6040820152610a6060808a01610d3e565b606082015281520195019492505061035f565b634e487b7160e01b600052604160045260246000fd5b8051600781101561084b578252602090810151910152565b906040918051926040835260608301935193602080604086015285518092526020608086019601926000905b838210610ae557505050505060208091015191015290565b9091929396838282610afa6001948c51610a89565b0198019493920190610acd565b604081019081106001600160401b03821117610a7357604052565b602081019081106001600160401b03821117610a7357604052565b61018081019081106001600160401b03821117610a7357604052565b60c081019081106001600160401b03821117610a7357604052565b606081019081106001600160401b03821117610a7357604052565b608081019081106001600160401b03821117610a7357604052565b601f909101601f19168101906001600160401b03821190821017610a7357604052565b60405190610bda82610b07565b6000602083604051610beb81610b22565b6060815281520152565b6001600160401b038111610a735760051b60200190565b919082604091031261006f57604051610c2481610b07565b80928035600781101561006f578252602090810135910152565b60409291818103841361006f5760405191610c5883610b07565b829481359260018060401b039384811161006f57830191602094858484031261006f5760405193610c8885610b22565b803591821161006f570182601f8201121561006f578035610ca881610bf5565b93610cb66040519586610baa565b818552878086019260061b8401019281841161006f579088809897969594939201915b838310610cf0575050505050815284520135910152565b978495969798610d04838596979495610c0c565b81520192019088979695949392610cd9565b919082604091031261006f57604051610d2e81610b07565b6020808294803584520135910152565b359063ffffffff8216820361006f57565b6001019081600111610d5d57565b634e487b7160e01b600052601160045260246000fd5b91908201809211610d5d57565b90821015610d8c570190565b634e487b7160e01b600052603260045260246000fd5b6000198114610d5d5760010190565b9093929384831161006f57841161006f578101920390565b90610100918203918211610d5d57565b600019810191908211610d5d57565b91908203918211610d5d57565b9092939163ffffffff610e13610e0e6020850151611f13565b611fdc565b1692610e25610e0e6020850151611f13565b63ffffffff81169260018060401b03610e49610e446020880151611f13565b612063565b1697610184358015958680611773575b6117625760208101809111610d5d5760208a0151516001600160401b0316108015611756575b611746576060604051610e9181610b22565b52610eab82846307ffffff8760051c1660208d01516120f0565b999196906001600160f81b0319610ec3828789610d80565b351661170b57610ed290610da2565b9284986000146116e757506002976028840190818511610d5d57606360f81b80610efd84898b610d80565b35166115f7575b50610f1391505b848688610db1565b9990986000816003146113575750600214610f3e57634e487b7160e01b600052605160045260246000fd5b60288a1061131d5760009b60209b8d6008815b1015610f8f57610f628e8e8e610d80565b3560f81c9060081b67ffffffffffffff0016179c610f7f90610da2565b60019e909e019d9c60088f610f51565b93989d50949990959a610faa92979c509d93989d3691611822565b60208151910120600091829084611270575b6001600160401b0381166111e0575b5060405191602083019384526040830152606082015260608152610fee81610b8f565b5190206024356001600160a01b038116929083900361006f576020906024604051809581936316bf557960e01b835260048301525afa9182156111d4576000926111a0575b50036111645760015b156111555785871061111c576110528688610de8565b9860009a5b602063ffffffff8d16108b8d82611102575b5050156110bf576110a98c63ffffffff928361109d8e8e6110978f8f61109290878a1692610d73565b610d73565b91610d80565b3560f81c921690612232565b9b1663ffffffff8114610d5d576001019a611057565b906111009a50602097508793959b99506110fa98506040949650916307ffffff6110ed9360051c16906122aa565b92015101520151916123e4565b90612418565b565b61111491925063ffffffff1689610d73565b108b8d611069565b60405162461bcd60e51b81526020600482015260116024820152702120a22fa6a2a9a9a0a3a2afa82927a7a360791b6044820152606490fd5b50506002905295505050505050565b60405162461bcd60e51b81526020600482015260146024820152734241445f534551494e424f585f4d45535341474560601b6044820152606490fd5b9091506020813d6020116111cc575b816111bc60209383610baa565b8101031261006f57519038611033565b3d91506111af565b6040513d6000823e3d90fd5b6024356001600160a01b038116925082900361006f5761120160209161220f565b604051636ab8cee160e11b81526001600160401b03909116600482015291829060249082905afa9081156111d45760009161123e575b5038610fcb565b90506020813d602011611268575b8161125960209383610baa565b8101031261006f575138611237565b3d915061124c565b926024356001600160a01b038116810361131957602061128f8761220f565b6040516316bf557960e01b81526001600160401b03909116600482015291829060249082906001600160a01b03165afa91821561130d5780926112d5575b505092610fbc565b9091506020823d602011611305575b816112f160209383610baa565b8101031261130257505138806112cd565b80fd5b3d91506112e4565b604051903d90823e3d90fd5b5080fd5b60405162461bcd60e51b81526020600482015260126024820152712120a22fa9a2a8a4a72127ac2fa82927a7a360711b6044820152606490fd5b93989d92979c959a90506071819c959a92979c106115be5783918361151c575b816071116115185761139136607019840160718401611822565b602081519101208215611504578592600190875b602081106114d9575050506050602160405193602085019560ff60f81b823516875260018060601b03199060601b16828601520160358401376085820152608581526113f081610b59565b519020604051906020820192835260408201526040815261141081610b74565b519020906024356001600160a01b03811691908290036114d557602090602460405180948193636ab8cee160e11b835260048301525afa92831561130d57809361149e575b50500361146357600161103c565b60405162461bcd60e51b81526020600482015260136024820152724241445f44454c415945445f4d45535341474560681b6044820152606490fd5b909192506020823d6020116114cd575b816114bb60209383610baa565b81010312611302575051903880611455565b3d91506114ae565b8380fd5b9091946114fc6001916114ed888689610d80565b3560f81c9060081b1796610da2565b9291016113a5565b634e487b7160e01b86526032600452602486fd5b8480fd5b91506024356001600160a01b038116810361151857602061153c8561220f565b604051636ab8cee160e11b81526001600160401b03909116600482015291829060249082906001600160a01b03165afa9081156115b3578591611581575b5091611377565b90506020813d6020116115ab575b8161159c60209383610baa565b8101031261151857513861157a565b3d915061158f565b6040513d87823e3d90fd5b60405162461bcd60e51b81526020600482015260116024820152702120a22fa222a620aca2a22fa82927a7a360791b6044820152606490fd5b90506116058683818a610db1565b60009281156116d357823516611623575b5050610f13915038610f04565b806001116116cf5790600161163d92600019019101612915565b61164681612228565b600281146116935761165781612228565b6001811461168b575b61166981612228565b15611676575b8180611616565b5060818401809111610d5d57610f139061166f565b829150611660565b60405162461bcd60e51b8152602060048201526014602482015273109313d094d51491505357d553911150d251115160621b6044820152606490fd5b8280fd5b634e487b7160e01b84526032600452602484fd5b6001036116f957610f13600398610f0b565b9a505050505050505090506002915052565b60405162461bcd60e51b81526020600482015260136024820152722aa725a727aba72fa4a72127ac2fa82927a7a360691b6044820152606490fd5b5050505094505090506002915052565b50601f84161515610e7f565b505050505094505090506003915052565b506004358b1015610e59565b1561178657565b60405162461bcd60e51b81526020600482015260166024820152752aa725a727aba72fa82922a4a6a0a3a2afa82927a7a360511b6044820152606490fd5b6001600160401b038111610a7357601f01601f191660200190565b3d1561180a573d906117f0826117c4565b916117fe6040519384610baa565b82523d6000602084013e565b606090565b81810292918115918404141715610d5d57565b92919261182e826117c4565b9161183c6040519384610baa565b82948184528183011161006f578281602093846000960137010152565b1561186057565b60405162461bcd60e51b815260206004820152600c60248201526b4241445f505245494d41474560a01b6044820152606490fd5b93909192936118a9610e0e6020830151611f13565b926118ba610e0e6020840151611f13565b9463ffffffff8616601f86161590811591611eb7575b508015611eab575b611e9f5760606040516118ea81610b22565b5261190487826307ffffff8960051c1660208601516120f0565b96919092819960609461192261191b828486610d80565b3591610da2565b956101843580611a0a57505060f81c6117865761195e948161194393610db1565b939091611951368685611822565b6020815191012014611859565b602063ffffffff831601908163ffffffff841611610d5d578361199293611999958411611a00575b63ffffffff1691610db1565b3691611822565b935b6000965b85518810156119c7576119bf600191896020818a01015160f81c91612232565b97019661199f565b6110fa94975091604060206119f1819563ffffffff97956307ffffff6111009c60051c16906122aa565b920151015201519251166123e4565b9092508290611986565b600181989594969814600014611a9957505092809291611a30611a359560f81c1561177f565b610db1565b92602060006040518685823780878101838152039060025afa156111d457611a609060005114611859565b602063ffffffff831601908163ffffffff841611610d5d578361199293611a93958411611a005763ffffffff1691610db1565b9361199b565b909a96959492939190600203611e6257611abb93611a30849260f81c1561177f565b9190928260201161006f57833503611e265760008060405184868237808581018381520390600a5afa611aec6117df565b9015611ded57805115611daf5760408180518101031261006f5760406020820151910151917f73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff000000018303611d74578160051b821590838104602014821715610d5d5763ffffffff831610611b64575b50505050505061199b565b6307ffffff60009b979b9260051c1660015b848110611d4d575050611d3757611b9291600160201b0461180f565b60405191602083019160208352602060408501526020878501527f16a2a19edfe81f20d09b681922c813b4b63683508c2280b93829971f439f0d2b608085015260a084015260c083015260c0825260e082019082821060018060401b03831117610a73576000928392604052519060055afa611c0c6117df565b9015611d02576020815103611cc757602081519101519060208110611cb5575b508160401161006f57602083013503611c7c57821161006f5760405191611c5283610b07565b60208352369082011161006f57604060209101818301376000604082015293388080808080611b59565b60405162461bcd60e51b815260206004820152601160248201527025ad23afa82927a7a32faba927a723afad60791b6044820152606490fd5b6000199060200360031b1b1638611c2c565b60405162461bcd60e51b815260206004820152601360248201527209a9e888ab0a0beaea49e9c8ebe988a9c8ea89606b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c1353d111561417d19052531151609a1b6044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b909260011b92600180821614611d6a575b60011c9060011b611b76565b9260011792611d5e565b60405162461bcd60e51b8152602060048201526013602482015272554e4b4e4f574e5f424c535f4d4f44554c555360681b6044820152606490fd5b60405162461bcd60e51b81526020600482015260166024820152754b5a475f505245434f4d50494c455f4d495353494e4760501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601160248201527024a72b20a624a22fa5ad23afa82927a7a360791b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273096b48ebea0a49e9e8cbeaea49e9c8ebe9082a6960631b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274554e4b4e4f574e5f505245494d4147455f5459504560581b6044820152606490fd5b50506002905292505050565b50601f861615156118d8565b905060208101809111610d5d576020830151516001600160401b031610386118d0565b60405190611ee782610b07565b81604051611ef481610b07565b60403682378152602060405191611f0a83610b07565b60403684370152565b90602091604051611f2381610b07565b600093818580935201525191806020604051611f3e81610b07565b8281520152825180516000199391848201918211611fc85790611f6091612730565b5192845151908101908111611fb457611f7890612744565b915b8251811015611fae5780611f916001928751612730565b51611f9c8286612730565b52611fa78185612730565b5001611f7a565b50925290565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526011600452602484fd5b60208101519051600781101561084b5761203457600160201b8110156120055763ffffffff1690565b60405162461bcd60e51b81526020600482015260076024820152662120a22fa4999960c91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260076024820152662727aa2fa4999960c91b6044820152606490fd5b60208101519051600781101561084b576001036120c157600160401b811015612092576001600160401b031690565b60405162461bcd60e51b815260206004820152600760248201526610905117d24d8d60ca1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260076024820152661393d517d24d8d60ca1b6044820152606490fd5b9192939093606060405161210381610b22565b52600093600095865b602081106121e657508590606060405161212581610b22565b5261213e612134898686610d80565b3560f81c98610da2565b94612148896127a7565b9660005b60ff8116978b89101561217e5760ff9161217661216c6001938b8b6127d9565b9190919b8d612730565b52011661214c565b9297505094506121a69298506040935096909683519661219d88610b22565b875296866122aa565b910151036121b057565b60405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d3515357d493d3d560921b6044820152606490fd5b96956122086001916121f9898787610d80565b3560f81c9060081b1797610da2565b970161210c565b6001600160401b039081166000190191908211610d5d57565b6003111561084b57565b9091602083101561226d5782601f0392601f8411610d5d578360031b93840460081490601f141715610d5d5760ff809116831b921b19161790565b60405162461bcd60e51b81526020600482015260156024820152740848288bea68aa8be988a828cbe84b2a88abe9288b605b1b6044820152606490fd5b926040916040519360209460208101916b26b2b6b7b93c903632b0b31d60a11b8352602c820152602c81526122de81610b74565b51902092604051916122ef83610b07565b601383527226b2b6b7b93c9036b2b935b632903a3932b29d60691b6020840152936000945b875191825187101561239d579060019182938885841615600014612372576123569150612345612364918d51612730565b5187519283918d8301958b87612c96565b03601f198101835282610baa565b519020925b1c950194612314565b6123826123949161235693612730565b519287519283918d8301958b87612c96565b51902092612369565b9650945050505092506123ad5790565b60405162461bcd60e51b815260206004820152600f60248201526e141493d3d197d513d3d7d4d213d495608a1b6044820152606490fd5b600060206040516123f481610b07565b828152015263ffffffff6040519161240b83610b07565b6000835216602082015290565b518051519160019260018101809111610d5d5761243490612744565b926000815b61245c575b5050815151612458916124518286612730565b5283612730565b5052565b83518051821015612492578161247484938493612730565b5161247f8289612730565b5261248a8188612730565b500190612439565b5061243e565b60ff1660ff8114610d5d5760010190565b906002811015610d8c5760051b0190565b8051906020808351930151910151602081519101516040519260208401946c23b637b130b61039ba30ba329d60991b8652602d850152604d84015260018060c01b0319809260c01b16606d84015260c01b166075820152605d815261251e81610b8f565b51902090565b602081019163ffffffff612548610e0e612541610e448751611f13565b9551611f13565b1691600283101561257157509060206125629201516124a9565b6001600160401b039091169052565b60029052505050565b602081019163ffffffff612591610e0e8551611f13565b1691600283101561257157506125b7611100935192602060018060401b039301516124a9565b511690600060206040516125ca81610b07565b8281520152604051916125dc83610b07565b600183526020830152612418565b939291926020850194612600610e0e8751611f13565b9063ffffffff612616610e0e8285169951611f13565b169360028510156127235760208801809811610d5d576020019660018060401b0388515116108015612717575b61270b5750906307ffffff61266e9260051c1693606060405161266581610b22565b528487516120f0565b949190506101643561ffff811680910361006f5761801081036126ac5750509161269f604094926126a694516124a9565b51916122aa565b91510152565b9194509450618011919250146000146126cc576126c991516124a9565b52565b60405162461bcd60e51b81526020600482015260176024820152764241445f474c4f42414c5f53544154455f4f50434f444560481b6044820152606490fd5b60029052505050505050565b50601f82161515612643565b5060029052505050505050565b8051821015610d8c5760209160051b010190565b9061274e82610bf5565b60409061275e6040519182610baa565b838152809361276f601f1991610bf5565b019160009060005b848110612785575050505050565b602090825161279381610b07565b848152828581830152828701015201612777565b906127b182610bf5565b6127be6040519182610baa565b82815280926127cf601f1991610bf5565b0190602036910137565b600093918491905b602083106127ee57505050565b909193946128036001916114ed888587610d80565b940191906127e1565b9081602091031261006f57516001600160401b038116810361006f5790565b919082604091031261006f5760405161284381610b07565b9182908035906001600160f81b03198216820361006f57908252602001359063ffffffff198216820361006f5760200152565b91909160608184031261006f576040519061289082610b74565b909283919081356001600160401b03811161006f57820181601f8201121561006f5760209181356128c081610bf5565b926128ce6040519485610baa565b818452848085019260051b82010192831161006f578401905b8282106129065750505083528082013590830152604090810135910152565b813581529084019084016128e7565b8160081161006f57803560c01c906040908151926303f16d4b60e11b928385526020600494738f0febb820c4858e3c815f87391bde38e62b4a8a9082888881855afa978815612c6857600098612c49575b506001600160401b039788166103e801888111612c345788168511612c265782908785518094819382525afa908115612c1b57908791600091612bee575b50168311612be2578660581161006f578387018481039360571993916101008587011261006f5760588701356001600160a01b0381160361006f5760a06077198097011261006f578251946129f886610b74565b612a058260788a0161282b565b8652612a148260b88a0161282b565b8587015260f8880135848701526101188801358a811161006f57826058612a3d928b0101612876565b966101388901358b811161006f5789019060808285039384011261006f578590815193612a6985610b74565b60588401358552011261006f57845196612a8288610b07565b6078820135885260988201358789015286830197885260b88201358c811161006f57612ad9946058612ab7928c950101612876565b868401526000868051612ac981610b74565b60608152828a8201520152612cd7565b509351908382519201519415612baf5703612b78575050603883013503612b6e57612b0390612cb9565b50938415612b6e578060101161006f5760181161006f576008601082013560c01c91013560c01c0190828211612b595750612b40612b479161220f565b928061180f565b91161015612b5457600090565b600190565b601190634e487b7160e01b6000525260246000fd5b5050505050600190565b5162461bcd60e51b81528086019190915260116024820152704d69736d6174636865644865696768747360781b6044820152606490fd5b825162461bcd60e51b8152808901859052600d60248201526c24a72b20a624a22fa82927a7a360991b6044820152606490fd5b50505050505050600290565b612c0e9150833d8511612c14575b612c068183610baa565b81019061280c565b386129a4565b503d612bfc565b83513d6000823e3d90fd5b505050505050505050600190565b601188634e487b7160e01b6000525260246000fd5b612c61919850833d8511612c1457612c068183610baa565b9638612966565b84513d6000823e3d90fd5b60005b838110612c865750506000910152565b8181015183820152602001612c76565b602090612cac6040959382815194859201612c73565b0191825260208201520190565b6040015160038116612cce5760021c90600090565b50600090600890565b9082519260209081808201956040875193015182604051948593631f3302a960e01b8552600485015280516024850152015160448301526080606483015260e482019080519160606084850152825180915284610104850193019060005b818110612dd4575050508381015160a48401526040015160c483015281900381738f0febb820c4858e3c815f87391bde38e62b4a8a5afa9081156111d457600091612d9e575b5015612d9257612d8e9351015191612ded565b9091565b50505050600090600490565b8281813d8311612dcd575b612db38183610baa565b810103126113195751908115158203611302575038612d7b565b503d612da9565b8251855288968896509485019490920191600101612d35565b90612e3d92612dfc8351612e53565b6040612e0b6020860151612e53565b940151906040519462ffffff19809216602087015216603d850152605a840152605a8352612e3883610b8f565b612ec6565b5015612e4b57600190600090565b600090600390565b80516020918201516040516001600160f81b031990921692820192835263ffffffff19166021820152601d8152612e8981610b07565b51905162ffffff19918282169190601d8110612ea7575b5050905090565b83919250601d0360031b1b1616803880612ea0565b6006111561084b57565b60408201805193949360018111612fc55750825151612fb8575b6020830190815181511115612faa57602060405196612f3c82890189612f2b602160009c8d96878652612f1b815180928b8686019101612c73565b8101036001810184520182610baa565b604051928392839251928391612c73565b8101039060025afa156115b3578551935191825115612f935790612f659394915190519061309f565b6006811015612f7f5780612f795750149190565b92915050565b634e487b7160e01b85526021600452602485fd5b5051600114159050612fa457149190565b50508190565b505050509050600090600290565b5050509050600090600190565b612fd6845151916020860151612fe8565b14612ee0575050509050600090600190565b90600190818111156130975760005b8183821b1061307657610100908103908111610d5d5761301690610dc9565b928261302185610dd9565b1b9061302c82610dd9565b8111613039575050505090565b929350909183820361304b5750505090565b61306a93509061305e8161306493610de8565b92610de8565b90612fe8565b61307390610d4f565b90565b82810180911115612ff757634e487b7160e01b600052601160045260246000fd5b505050600090565b939293811561318657600182146131715784511561316657826130c183613191565b6130d46130ce8851610dd9565b886131dc565b92818110613131578161305e6130f496936130ee93610de8565b9061309f565b90916130ff82612ebc565b8161312a57505061311e83613118613124949551610dd9565b90612730565b5161327d565b90600090565b9350919050565b61313b945061309f565b909161314682612ebc565b8161312a57505061315f83613118613124949551610dd9565b519061327d565b505090915090600590565b50509091516131805790600090565b90600490565b505090915090600390565b600180821061006f578180916000925b6131c75750506000198101908111610d5d576001901b9081146131c15790565b60011c90565b90916131d290610da2565b91811c90816131a1565b919082518111613220576131ef816127a7565b9060005b818110613201575090925050565b8061320e60019287612730565b516132198286612730565b52016131f3565b60405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608490fd5b6132ac6000916020936040519085820192600160f81b84526021830152604182015260418152612f2b81610b8f565b8101039060025afa156111d4576000519056fea264697066735822122025a8142dc5e93688e9e7883fa6ce029b6cc1334d745d9b3d526b4d252e6f7d4b64736f6c63430008190033",
}

// OneStepProverHostIoCelestiaMockABI is the input ABI used to generate the binding from.
// Deprecated: Use OneStepProverHostIoCelestiaMockMetaData.ABI instead.
var OneStepProverHostIoCelestiaMockABI = OneStepProverHostIoCelestiaMockMetaData.ABI

// OneStepProverHostIoCelestiaMockBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OneStepProverHostIoCelestiaMockMetaData.Bin instead.
var OneStepProverHostIoCelestiaMockBin = OneStepProverHostIoCelestiaMockMetaData.Bin

// DeployOneStepProverHostIoCelestiaMock deploys a new Ethereum contract, binding an instance of OneStepProverHostIoCelestiaMock to it.
func DeployOneStepProverHostIoCelestiaMock(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProverHostIoCelestiaMock, error) {
	parsed, err := OneStepProverHostIoCelestiaMockMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OneStepProverHostIoCelestiaMockBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProverHostIoCelestiaMock{OneStepProverHostIoCelestiaMockCaller: OneStepProverHostIoCelestiaMockCaller{contract: contract}, OneStepProverHostIoCelestiaMockTransactor: OneStepProverHostIoCelestiaMockTransactor{contract: contract}, OneStepProverHostIoCelestiaMockFilterer: OneStepProverHostIoCelestiaMockFilterer{contract: contract}}, nil
}

// OneStepProverHostIoCelestiaMock is an auto generated Go binding around an Ethereum contract.
type OneStepProverHostIoCelestiaMock struct {
	OneStepProverHostIoCelestiaMockCaller     // Read-only binding to the contract
	OneStepProverHostIoCelestiaMockTransactor // Write-only binding to the contract
	OneStepProverHostIoCelestiaMockFilterer   // Log filterer for contract events
}

// OneStepProverHostIoCelestiaMockCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProverHostIoCelestiaMockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProverHostIoCelestiaMockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProverHostIoCelestiaMockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProverHostIoCelestiaMockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProverHostIoCelestiaMockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProverHostIoCelestiaMockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProverHostIoCelestiaMockSession struct {
	Contract     *OneStepProverHostIoCelestiaMock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                    // Call options to use throughout this session
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// OneStepProverHostIoCelestiaMockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProverHostIoCelestiaMockCallerSession struct {
	Contract *OneStepProverHostIoCelestiaMockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                          // Call options to use throughout this session
}

// OneStepProverHostIoCelestiaMockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProverHostIoCelestiaMockTransactorSession struct {
	Contract     *OneStepProverHostIoCelestiaMockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// OneStepProverHostIoCelestiaMockRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProverHostIoCelestiaMockRaw struct {
	Contract *OneStepProverHostIoCelestiaMock // Generic contract binding to access the raw methods on
}

// OneStepProverHostIoCelestiaMockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProverHostIoCelestiaMockCallerRaw struct {
	Contract *OneStepProverHostIoCelestiaMockCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProverHostIoCelestiaMockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProverHostIoCelestiaMockTransactorRaw struct {
	Contract *OneStepProverHostIoCelestiaMockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProverHostIoCelestiaMock creates a new instance of OneStepProverHostIoCelestiaMock, bound to a specific deployed contract.
func NewOneStepProverHostIoCelestiaMock(address common.Address, backend bind.ContractBackend) (*OneStepProverHostIoCelestiaMock, error) {
	contract, err := bindOneStepProverHostIoCelestiaMock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProverHostIoCelestiaMock{OneStepProverHostIoCelestiaMockCaller: OneStepProverHostIoCelestiaMockCaller{contract: contract}, OneStepProverHostIoCelestiaMockTransactor: OneStepProverHostIoCelestiaMockTransactor{contract: contract}, OneStepProverHostIoCelestiaMockFilterer: OneStepProverHostIoCelestiaMockFilterer{contract: contract}}, nil
}

// NewOneStepProverHostIoCelestiaMockCaller creates a new read-only instance of OneStepProverHostIoCelestiaMock, bound to a specific deployed contract.
func NewOneStepProverHostIoCelestiaMockCaller(address common.Address, caller bind.ContractCaller) (*OneStepProverHostIoCelestiaMockCaller, error) {
	contract, err := bindOneStepProverHostIoCelestiaMock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProverHostIoCelestiaMockCaller{contract: contract}, nil
}

// NewOneStepProverHostIoCelestiaMockTransactor creates a new write-only instance of OneStepProverHostIoCelestiaMock, bound to a specific deployed contract.
func NewOneStepProverHostIoCelestiaMockTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProverHostIoCelestiaMockTransactor, error) {
	contract, err := bindOneStepProverHostIoCelestiaMock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProverHostIoCelestiaMockTransactor{contract: contract}, nil
}

// NewOneStepProverHostIoCelestiaMockFilterer creates a new log filterer instance of OneStepProverHostIoCelestiaMock, bound to a specific deployed contract.
func NewOneStepProverHostIoCelestiaMockFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProverHostIoCelestiaMockFilterer, error) {
	contract, err := bindOneStepProverHostIoCelestiaMock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProverHostIoCelestiaMockFilterer{contract: contract}, nil
}

// bindOneStepProverHostIoCelestiaMock binds a generic wrapper to an already deployed contract.
func bindOneStepProverHostIoCelestiaMock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OneStepProverHostIoCelestiaMockMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProverHostIoCelestiaMock.Contract.OneStepProverHostIoCelestiaMockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.OneStepProverHostIoCelestiaMockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.OneStepProverHostIoCelestiaMockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProverHostIoCelestiaMock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.contract.Transact(opts, method, params...)
}

// BLOBSTREAM is a free data retrieval call binding the contract method 0xdc346547.
//
// Solidity: function BLOBSTREAM() view returns(address)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCaller) BLOBSTREAM(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OneStepProverHostIoCelestiaMock.contract.Call(opts, &out, "BLOBSTREAM")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BLOBSTREAM is a free data retrieval call binding the contract method 0xdc346547.
//
// Solidity: function BLOBSTREAM() view returns(address)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockSession) BLOBSTREAM() (common.Address, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.BLOBSTREAM(&_OneStepProverHostIoCelestiaMock.CallOpts)
}

// BLOBSTREAM is a free data retrieval call binding the contract method 0xdc346547.
//
// Solidity: function BLOBSTREAM() view returns(address)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCallerSession) BLOBSTREAM() (common.Address, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.BLOBSTREAM(&_OneStepProverHostIoCelestiaMock.CallOpts)
}

// CELESTIAMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x5fd9e56d.
//
// Solidity: function CELESTIA_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCaller) CELESTIAMESSAGEHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _OneStepProverHostIoCelestiaMock.contract.Call(opts, &out, "CELESTIA_MESSAGE_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// CELESTIAMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x5fd9e56d.
//
// Solidity: function CELESTIA_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockSession) CELESTIAMESSAGEHEADERFLAG() ([1]byte, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.CELESTIAMESSAGEHEADERFLAG(&_OneStepProverHostIoCelestiaMock.CallOpts)
}

// CELESTIAMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x5fd9e56d.
//
// Solidity: function CELESTIA_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCallerSession) CELESTIAMESSAGEHEADERFLAG() ([1]byte, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.CELESTIAMESSAGEHEADERFLAG(&_OneStepProverHostIoCelestiaMock.CallOpts)
}

// ExecuteOneStep is a free data retrieval call binding the contract method 0x3604366f.
//
// Solidity: function executeOneStep((uint256,address) execCtx, (uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32) startMach, (bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32) startMod, (uint16,uint256) inst, bytes proof) view returns((uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32) mach, (bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32) mod)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCaller) ExecuteOneStep(opts *bind.CallOpts, execCtx ExecutionContext, startMach Machine, startMod Module, inst Instruction, proof []byte) (struct {
	Mach Machine
	Mod  Module
}, error) {
	var out []interface{}
	err := _OneStepProverHostIoCelestiaMock.contract.Call(opts, &out, "executeOneStep", execCtx, startMach, startMod, inst, proof)

	outstruct := new(struct {
		Mach Machine
		Mod  Module
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Mach = *abi.ConvertType(out[0], new(Machine)).(*Machine)
	outstruct.Mod = *abi.ConvertType(out[1], new(Module)).(*Module)

	return *outstruct, err

}

// ExecuteOneStep is a free data retrieval call binding the contract method 0x3604366f.
//
// Solidity: function executeOneStep((uint256,address) execCtx, (uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32) startMach, (bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32) startMod, (uint16,uint256) inst, bytes proof) view returns((uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32) mach, (bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32) mod)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockSession) ExecuteOneStep(execCtx ExecutionContext, startMach Machine, startMod Module, inst Instruction, proof []byte) (struct {
	Mach Machine
	Mod  Module
}, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.ExecuteOneStep(&_OneStepProverHostIoCelestiaMock.CallOpts, execCtx, startMach, startMod, inst, proof)
}

// ExecuteOneStep is a free data retrieval call binding the contract method 0x3604366f.
//
// Solidity: function executeOneStep((uint256,address) execCtx, (uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32) startMach, (bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32) startMod, (uint16,uint256) inst, bytes proof) view returns((uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32) mach, (bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32) mod)
func (_OneStepProverHostIoCelestiaMock *OneStepProverHostIoCelestiaMockCallerSession) ExecuteOneStep(execCtx ExecutionContext, startMach Machine, startMod Module, inst Instruction, proof []byte) (struct {
	Mach Machine
	Mod  Module
}, error) {
	return _OneStepProverHostIoCelestiaMock.Contract.ExecuteOneStep(&_OneStepProverHostIoCelestiaMock.CallOpts, execCtx, startMach, startMod, inst, proof)
}

// PendingBlkTimeAndNrAdvanceCheckMetaData contains all meta data concerning the PendingBlkTimeAndNrAdvanceCheck contract.
var PendingBlkTimeAndNrAdvanceCheckMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"checkArbBlockHashReturnsLatest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdvancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c080604052346100c0574260805263a3b1b31d60e01b815260208160048160645afa9081156100b457600091610056575b5060a05260405161034790816100c68239608051816101b5015260a051816102020152f35b9060203d6020116100ad575b601f8101601f191683016001600160401b038111848210176100995760209184916040528101031261009657505138610031565b80fd5b634e487b7160e01b83526041600452602483fd5b503d610062565b6040513d6000823e3d90fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081634bc05a23146101a1575063e46c80b61461003a57600080fd5b3461019d576020908160031936011261019957805163a3b1b31d60e01b81528281858160645afa90811561014f57859161016c575b506000198101908111610159578151906315a03d4160e11b825284820152828160248160645afa90811561014f57859161011e575b5080156100ea578335036100b6578380f35b5162461bcd60e51b815291820152601060248201526f0aea49e9c8ebe84989e8696be9082a6960831b604482015260649150fd5b505162461bcd60e51b815291820152600f60248201526e0b48aa49ebe84989e8696be9082a69608b1b604482015260649150fd5b90508281813d8311610148575b61013581836102d8565b810103126101445751386100a4565b8480fd5b503d61012b565b82513d87823e3d90fd5b634e487b7160e01b855260118452602485fd5b90508281813d8311610192575b61018381836102d8565b8101031261014457513861006f565b503d610179565b8380fd5b8280fd5b9050346101995783600319360112610199577f00000000000000000000000000000000000000000000000000000000000000004211156102a15750805163a3b1b31d60e01b8152602081848160645afa908115610297578491610265575b507f0000000000000000000000000000000000000000000000000000000000000000101561022b578280f35b906020606492519162461bcd60e51b83528201526014602482015273426c6f636b206469646e277420616476616e636560601b6044820152fd5b90506020813d60201161028f575b81610280602093836102d8565b810103126101995751386101ff565b3d9150610273565b82513d86823e3d90fd5b62461bcd60e51b8152602083820152601360248201527254696d65206469646e277420616476616e636560681b6044820152606490fd5b601f909101601f19168101906001600160401b038211908210176102fb57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220062f6aa591d96d380fc4cafa07575b60e8f9e1b1c4d27efdd5a7ed3ad406370564736f6c63430008190033",
}

// PendingBlkTimeAndNrAdvanceCheckABI is the input ABI used to generate the binding from.
// Deprecated: Use PendingBlkTimeAndNrAdvanceCheckMetaData.ABI instead.
var PendingBlkTimeAndNrAdvanceCheckABI = PendingBlkTimeAndNrAdvanceCheckMetaData.ABI

// PendingBlkTimeAndNrAdvanceCheckBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PendingBlkTimeAndNrAdvanceCheckMetaData.Bin instead.
var PendingBlkTimeAndNrAdvanceCheckBin = PendingBlkTimeAndNrAdvanceCheckMetaData.Bin

// DeployPendingBlkTimeAndNrAdvanceCheck deploys a new Ethereum contract, binding an instance of PendingBlkTimeAndNrAdvanceCheck to it.
func DeployPendingBlkTimeAndNrAdvanceCheck(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PendingBlkTimeAndNrAdvanceCheck, error) {
	parsed, err := PendingBlkTimeAndNrAdvanceCheckMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PendingBlkTimeAndNrAdvanceCheckBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PendingBlkTimeAndNrAdvanceCheck{PendingBlkTimeAndNrAdvanceCheckCaller: PendingBlkTimeAndNrAdvanceCheckCaller{contract: contract}, PendingBlkTimeAndNrAdvanceCheckTransactor: PendingBlkTimeAndNrAdvanceCheckTransactor{contract: contract}, PendingBlkTimeAndNrAdvanceCheckFilterer: PendingBlkTimeAndNrAdvanceCheckFilterer{contract: contract}}, nil
}

// PendingBlkTimeAndNrAdvanceCheck is an auto generated Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheck struct {
	PendingBlkTimeAndNrAdvanceCheckCaller     // Read-only binding to the contract
	PendingBlkTimeAndNrAdvanceCheckTransactor // Write-only binding to the contract
	PendingBlkTimeAndNrAdvanceCheckFilterer   // Log filterer for contract events
}

// PendingBlkTimeAndNrAdvanceCheckCaller is an auto generated read-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PendingBlkTimeAndNrAdvanceCheckTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PendingBlkTimeAndNrAdvanceCheckFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PendingBlkTimeAndNrAdvanceCheckFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PendingBlkTimeAndNrAdvanceCheckSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PendingBlkTimeAndNrAdvanceCheckSession struct {
	Contract     *PendingBlkTimeAndNrAdvanceCheck // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                    // Call options to use throughout this session
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// PendingBlkTimeAndNrAdvanceCheckCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PendingBlkTimeAndNrAdvanceCheckCallerSession struct {
	Contract *PendingBlkTimeAndNrAdvanceCheckCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                          // Call options to use throughout this session
}

// PendingBlkTimeAndNrAdvanceCheckTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PendingBlkTimeAndNrAdvanceCheckTransactorSession struct {
	Contract     *PendingBlkTimeAndNrAdvanceCheckTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// PendingBlkTimeAndNrAdvanceCheckRaw is an auto generated low-level Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckRaw struct {
	Contract *PendingBlkTimeAndNrAdvanceCheck // Generic contract binding to access the raw methods on
}

// PendingBlkTimeAndNrAdvanceCheckCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckCallerRaw struct {
	Contract *PendingBlkTimeAndNrAdvanceCheckCaller // Generic read-only contract binding to access the raw methods on
}

// PendingBlkTimeAndNrAdvanceCheckTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PendingBlkTimeAndNrAdvanceCheckTransactorRaw struct {
	Contract *PendingBlkTimeAndNrAdvanceCheckTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPendingBlkTimeAndNrAdvanceCheck creates a new instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheck(address common.Address, backend bind.ContractBackend) (*PendingBlkTimeAndNrAdvanceCheck, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheck{PendingBlkTimeAndNrAdvanceCheckCaller: PendingBlkTimeAndNrAdvanceCheckCaller{contract: contract}, PendingBlkTimeAndNrAdvanceCheckTransactor: PendingBlkTimeAndNrAdvanceCheckTransactor{contract: contract}, PendingBlkTimeAndNrAdvanceCheckFilterer: PendingBlkTimeAndNrAdvanceCheckFilterer{contract: contract}}, nil
}

// NewPendingBlkTimeAndNrAdvanceCheckCaller creates a new read-only instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheckCaller(address common.Address, caller bind.ContractCaller) (*PendingBlkTimeAndNrAdvanceCheckCaller, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheckCaller{contract: contract}, nil
}

// NewPendingBlkTimeAndNrAdvanceCheckTransactor creates a new write-only instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheckTransactor(address common.Address, transactor bind.ContractTransactor) (*PendingBlkTimeAndNrAdvanceCheckTransactor, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheckTransactor{contract: contract}, nil
}

// NewPendingBlkTimeAndNrAdvanceCheckFilterer creates a new log filterer instance of PendingBlkTimeAndNrAdvanceCheck, bound to a specific deployed contract.
func NewPendingBlkTimeAndNrAdvanceCheckFilterer(address common.Address, filterer bind.ContractFilterer) (*PendingBlkTimeAndNrAdvanceCheckFilterer, error) {
	contract, err := bindPendingBlkTimeAndNrAdvanceCheck(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PendingBlkTimeAndNrAdvanceCheckFilterer{contract: contract}, nil
}

// bindPendingBlkTimeAndNrAdvanceCheck binds a generic wrapper to an already deployed contract.
func bindPendingBlkTimeAndNrAdvanceCheck(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PendingBlkTimeAndNrAdvanceCheckMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.PendingBlkTimeAndNrAdvanceCheckCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.PendingBlkTimeAndNrAdvanceCheckTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.PendingBlkTimeAndNrAdvanceCheckTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.contract.Transact(opts, method, params...)
}

// CheckArbBlockHashReturnsLatest is a paid mutator transaction binding the contract method 0xe46c80b6.
//
// Solidity: function checkArbBlockHashReturnsLatest(bytes32 expected) returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactor) CheckArbBlockHashReturnsLatest(opts *bind.TransactOpts, expected [32]byte) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.contract.Transact(opts, "checkArbBlockHashReturnsLatest", expected)
}

// CheckArbBlockHashReturnsLatest is a paid mutator transaction binding the contract method 0xe46c80b6.
//
// Solidity: function checkArbBlockHashReturnsLatest(bytes32 expected) returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckSession) CheckArbBlockHashReturnsLatest(expected [32]byte) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.CheckArbBlockHashReturnsLatest(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts, expected)
}

// CheckArbBlockHashReturnsLatest is a paid mutator transaction binding the contract method 0xe46c80b6.
//
// Solidity: function checkArbBlockHashReturnsLatest(bytes32 expected) returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorSession) CheckArbBlockHashReturnsLatest(expected [32]byte) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.CheckArbBlockHashReturnsLatest(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts, expected)
}

// IsAdvancing is a paid mutator transaction binding the contract method 0x4bc05a23.
//
// Solidity: function isAdvancing() returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactor) IsAdvancing(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.contract.Transact(opts, "isAdvancing")
}

// IsAdvancing is a paid mutator transaction binding the contract method 0x4bc05a23.
//
// Solidity: function isAdvancing() returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckSession) IsAdvancing() (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.IsAdvancing(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts)
}

// IsAdvancing is a paid mutator transaction binding the contract method 0x4bc05a23.
//
// Solidity: function isAdvancing() returns()
func (_PendingBlkTimeAndNrAdvanceCheck *PendingBlkTimeAndNrAdvanceCheckTransactorSession) IsAdvancing() (*types.Transaction, error) {
	return _PendingBlkTimeAndNrAdvanceCheck.Contract.IsAdvancing(&_PendingBlkTimeAndNrAdvanceCheck.TransactOpts)
}

// ProgramTestMetaData contains all meta data concerning the ProgramTest contract.
var ProgramTestMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"name\":\"Hash\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callKeccak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"expected\",\"type\":\"bytes\"}],\"name\":\"checkRevertData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"mathTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundedAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"staticcallEvmData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"staticcallProgram\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610bcc908161001b8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918483631d00bae4146107e557505081633fdd58e21461079a57816396ec12e514610605578163aba8c4ba146100c7575063fd4244621461005e57600080fd5b346100c35760203660031901126100c357818080808061007c6108be565b5af161008f6100896109f8565b91610a28565b60208151910120905160208101906715d41b922f2eafc58252602081526100b581610989565b519020036100c05780f35b80fd5b5080fd5b8383346100c35760803660031901126100c3576100e26108be565b60248035936001600160a01b03939091908486168603610601576044356001600160401b03818116918290036105fd576064359081116105fd5784918661012d849336908d016108d9565b9190828751938492833781018581520392fa61014a6100896109f8565b6000194301914383116105eb5761023d6102136101e96101bf61019585519761017289610989565b600d988981526020986c0313637b1b590373ab6b132b91609d1b8a830152610ade565b85516101a081610989565b8881526c031b430b4b71034b2101010101609d1b888201524691610ade565b84516101ca81610989565b8781526c03130b9b2903332b2901010101609d1b878201524891610ade565b83516101f481610989565b8681526c033b0b990383934b1b29010101609d1b868201523a91610ade565b825161021e81610989565b8581526c033b0b9903634b6b4ba1010101609d1b858201524591610ade565b92815161024981610989565b8181526c03b30b63ab2901010101010101609d1b8482015283858051810103126105e757838501516105c357508351601f1997908881019081116105b15761029090610aac565b98845b86518110156102e6576001600160f81b03196102af8289610a62565b51168a8201908282116102d4576102cd600193928e928d1a92610a62565b5301610293565b634e487b7160e01b8b5260118f52898bfd5b508695508b61049561046661043a61040f8f8f6103918f988b8d918f6c0393ab9ba1030b2323932b9b99609d1b906103786103e59861034c6103bb99885161032d81610989565b8881526c03a34b6b2b9ba30b6b81010101609d1b868201524291610ade565b90319087519061035b82610989565b8782526c03130b630b731b290101010101609d1b85830152610ade565b94519361038485610989565b84528301528c1691610ade565b8b516c039b2b73232b91010101010101609d1b8e6103ae83610989565b8d83528201523091610ade565b8a516103c681610989565b8a81526c037b934b3b4b71010101010101609d1b8d8201523291610ade565b89516103f081610989565b8981526c031b7b4b73130b9b2901010101609d1b8c8201524191610ade565b8851873f9161041d82610989565b8982526c0e4eae6e840c6dec8cad0c2e6d609b1b8c830152610ade565b875160693f9161044982610989565b8882526c030b9311031b7b232b430b9b41609d1b8b830152610ade565b60019560013f9188519161047983610989565b82526c032ba341031b7b232b430b9b41609d1b8a830152610ade565b966104a0843b610aac565b843b86855b82811061058757505050878151910120843b6104c0816109dd565b6104cc895191826109ba565b818152898101918683893c51902003610560575050826104fb6104f6889695949651873b90610a89565b610aac565b96853b953b915b61051d575b845187815280610519818a018b610949565b0390f35b805186101561055b578380959660ff60f81b6105398285610a62565b51166105526105488684610a89565b91871a918c610a62565b53019594610502565b610507565b606491879187519262461bcd60e51b84528284015282015263636f646560e01b6044820152fd5b6001600160f81b031961059a828e610a62565b5116871a6105a88286610a62565b530187906104a5565b634e487b7160e01b885260118c528688fd5b6105e39150858b935194859462461bcd60e51b8652850152830190610949565b0390fd5b8680fd5b634e487b7160e01b8552601189528385fd5b8480fd5b8280fd5b91905060603660031901126106015761061c6108be565b90602490846001600160401b0383358181116106015761063f90369088016108d9565b9290916044966044359182116106015761065d839236908b016108d9565b95909481885192839283378101848152039134905af19661067c6109f8565b97610762578288510361072457805b885181101561070f576001600160f81b0319806106a8838c610a62565b511690858310156106fd578285013516036106c55760010161068b565b845162461bcd60e51b81526020818a0152601481880152730e4caeccae4e840c8c2e8c240dad2e6dac2e8c6d60631b81890152606490fd5b634e487b7160e01b845260328a528784fd5b8451602080825281906105199082018c610949565b835162461bcd60e51b815260208189015260186024820152770eee4dedcce40e4caeccae4e840c8c2e8c240d8cadccee8d60431b6044820152606490fd5b835162461bcd60e51b81526020818901526012602482015271756e6578706563746564207375636365737360701b6044820152606490fd5b5050346100c35781610519926107af36610906565b908186519283928337810184815203915afa906107d36107cd6109f8565b92610a28565b51918291602083526020830190610949565b908185346100c35781806107f836610906565b9591909686888237828188810182815203925af19361081e6108186109f8565b95610a28565b6020855195015194602081106108a8575b507f224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba4360208451878152a1836001116100c35760001984019361087c610873866109dd565b945194856109ba565b848452602084019436828401116108a4576001601f9301863783010152519020036100c05780f35b8380fd5b6000959195199060200360031b1b16938661082f565b600435906001600160a01b03821682036108d457565b600080fd5b9181601f840112156108d4578235916001600160401b0383116108d457602083818601950101116108d457565b9060406003198301126108d4576004356001600160a01b03811681036108d45791602435906001600160401b0382116108d457610945916004016108d9565b9091565b919082519283825260005b848110610975575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610954565b604081019081106001600160401b038211176109a457604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176109a457604052565b6001600160401b0381116109a457601f01601f191660200190565b3d15610a23573d90610a09826109dd565b91610a1760405193846109ba565b82523d6000602084013e565b606090565b15610a2f57565b60405162461bcd60e51b815260206004820152600b60248201526a18d85b1b0819985a5b195960aa1b6044820152606490fd5b908151811015610a73570160200190565b634e487b7160e01b600052603260045260246000fd5b91908203918211610a9657565b634e487b7160e01b600052601160045260246000fd5b90610ab6826109dd565b610ac360405191826109ba565b8281528092610ad4601f19916109dd565b0190602036910137565b92916020848051810103126108d457602084015103610b7257508151601f199290838101908111610a9657610b1290610aac565b9060205b8151811015610b6b576001600160f81b0319610b328284610a62565b511690858101818111610b5657610b4f60019360001a9186610a62565b5301610b16565b60246000634e487b7160e01b81526011600452fd5b5090925050565b60405162461bcd60e51b8152602060048201529081906105e390602483019061094956fea2646970667358221220b5780eb27b5027fa791a3b423e4108a034fca4c13d86df56913ca8ffa2a9989864736f6c63430008190033",
}

// ProgramTestABI is the input ABI used to generate the binding from.
// Deprecated: Use ProgramTestMetaData.ABI instead.
var ProgramTestABI = ProgramTestMetaData.ABI

// ProgramTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProgramTestMetaData.Bin instead.
var ProgramTestBin = ProgramTestMetaData.Bin

// DeployProgramTest deploys a new Ethereum contract, binding an instance of ProgramTest to it.
func DeployProgramTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProgramTest, error) {
	parsed, err := ProgramTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProgramTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProgramTest{ProgramTestCaller: ProgramTestCaller{contract: contract}, ProgramTestTransactor: ProgramTestTransactor{contract: contract}, ProgramTestFilterer: ProgramTestFilterer{contract: contract}}, nil
}

// ProgramTest is an auto generated Go binding around an Ethereum contract.
type ProgramTest struct {
	ProgramTestCaller     // Read-only binding to the contract
	ProgramTestTransactor // Write-only binding to the contract
	ProgramTestFilterer   // Log filterer for contract events
}

// ProgramTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProgramTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProgramTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProgramTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProgramTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProgramTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProgramTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProgramTestSession struct {
	Contract     *ProgramTest      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProgramTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProgramTestCallerSession struct {
	Contract *ProgramTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ProgramTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProgramTestTransactorSession struct {
	Contract     *ProgramTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ProgramTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProgramTestRaw struct {
	Contract *ProgramTest // Generic contract binding to access the raw methods on
}

// ProgramTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProgramTestCallerRaw struct {
	Contract *ProgramTestCaller // Generic read-only contract binding to access the raw methods on
}

// ProgramTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProgramTestTransactorRaw struct {
	Contract *ProgramTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProgramTest creates a new instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTest(address common.Address, backend bind.ContractBackend) (*ProgramTest, error) {
	contract, err := bindProgramTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProgramTest{ProgramTestCaller: ProgramTestCaller{contract: contract}, ProgramTestTransactor: ProgramTestTransactor{contract: contract}, ProgramTestFilterer: ProgramTestFilterer{contract: contract}}, nil
}

// NewProgramTestCaller creates a new read-only instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTestCaller(address common.Address, caller bind.ContractCaller) (*ProgramTestCaller, error) {
	contract, err := bindProgramTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProgramTestCaller{contract: contract}, nil
}

// NewProgramTestTransactor creates a new write-only instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ProgramTestTransactor, error) {
	contract, err := bindProgramTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProgramTestTransactor{contract: contract}, nil
}

// NewProgramTestFilterer creates a new log filterer instance of ProgramTest, bound to a specific deployed contract.
func NewProgramTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ProgramTestFilterer, error) {
	contract, err := bindProgramTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProgramTestFilterer{contract: contract}, nil
}

// bindProgramTest binds a generic wrapper to an already deployed contract.
func bindProgramTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProgramTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProgramTest *ProgramTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProgramTest.Contract.ProgramTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProgramTest *ProgramTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProgramTest.Contract.ProgramTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProgramTest *ProgramTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProgramTest.Contract.ProgramTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProgramTest *ProgramTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProgramTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProgramTest *ProgramTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProgramTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProgramTest *ProgramTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProgramTest.Contract.contract.Transact(opts, method, params...)
}

// StaticcallEvmData is a free data retrieval call binding the contract method 0xaba8c4ba.
//
// Solidity: function staticcallEvmData(address program, address fundedAccount, uint64 gas, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCaller) StaticcallEvmData(opts *bind.CallOpts, program common.Address, fundedAccount common.Address, gas uint64, data []byte) ([]byte, error) {
	var out []interface{}
	err := _ProgramTest.contract.Call(opts, &out, "staticcallEvmData", program, fundedAccount, gas, data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// StaticcallEvmData is a free data retrieval call binding the contract method 0xaba8c4ba.
//
// Solidity: function staticcallEvmData(address program, address fundedAccount, uint64 gas, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestSession) StaticcallEvmData(program common.Address, fundedAccount common.Address, gas uint64, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallEvmData(&_ProgramTest.CallOpts, program, fundedAccount, gas, data)
}

// StaticcallEvmData is a free data retrieval call binding the contract method 0xaba8c4ba.
//
// Solidity: function staticcallEvmData(address program, address fundedAccount, uint64 gas, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCallerSession) StaticcallEvmData(program common.Address, fundedAccount common.Address, gas uint64, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallEvmData(&_ProgramTest.CallOpts, program, fundedAccount, gas, data)
}

// StaticcallProgram is a free data retrieval call binding the contract method 0x3fdd58e2.
//
// Solidity: function staticcallProgram(address program, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCaller) StaticcallProgram(opts *bind.CallOpts, program common.Address, data []byte) ([]byte, error) {
	var out []interface{}
	err := _ProgramTest.contract.Call(opts, &out, "staticcallProgram", program, data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// StaticcallProgram is a free data retrieval call binding the contract method 0x3fdd58e2.
//
// Solidity: function staticcallProgram(address program, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestSession) StaticcallProgram(program common.Address, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallProgram(&_ProgramTest.CallOpts, program, data)
}

// StaticcallProgram is a free data retrieval call binding the contract method 0x3fdd58e2.
//
// Solidity: function staticcallProgram(address program, bytes data) view returns(bytes)
func (_ProgramTest *ProgramTestCallerSession) StaticcallProgram(program common.Address, data []byte) ([]byte, error) {
	return _ProgramTest.Contract.StaticcallProgram(&_ProgramTest.CallOpts, program, data)
}

// CallKeccak is a paid mutator transaction binding the contract method 0x1d00bae4.
//
// Solidity: function callKeccak(address program, bytes data) returns()
func (_ProgramTest *ProgramTestTransactor) CallKeccak(opts *bind.TransactOpts, program common.Address, data []byte) (*types.Transaction, error) {
	return _ProgramTest.contract.Transact(opts, "callKeccak", program, data)
}

// CallKeccak is a paid mutator transaction binding the contract method 0x1d00bae4.
//
// Solidity: function callKeccak(address program, bytes data) returns()
func (_ProgramTest *ProgramTestSession) CallKeccak(program common.Address, data []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CallKeccak(&_ProgramTest.TransactOpts, program, data)
}

// CallKeccak is a paid mutator transaction binding the contract method 0x1d00bae4.
//
// Solidity: function callKeccak(address program, bytes data) returns()
func (_ProgramTest *ProgramTestTransactorSession) CallKeccak(program common.Address, data []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CallKeccak(&_ProgramTest.TransactOpts, program, data)
}

// CheckRevertData is a paid mutator transaction binding the contract method 0x96ec12e5.
//
// Solidity: function checkRevertData(address program, bytes data, bytes expected) payable returns(bytes)
func (_ProgramTest *ProgramTestTransactor) CheckRevertData(opts *bind.TransactOpts, program common.Address, data []byte, expected []byte) (*types.Transaction, error) {
	return _ProgramTest.contract.Transact(opts, "checkRevertData", program, data, expected)
}

// CheckRevertData is a paid mutator transaction binding the contract method 0x96ec12e5.
//
// Solidity: function checkRevertData(address program, bytes data, bytes expected) payable returns(bytes)
func (_ProgramTest *ProgramTestSession) CheckRevertData(program common.Address, data []byte, expected []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CheckRevertData(&_ProgramTest.TransactOpts, program, data, expected)
}

// CheckRevertData is a paid mutator transaction binding the contract method 0x96ec12e5.
//
// Solidity: function checkRevertData(address program, bytes data, bytes expected) payable returns(bytes)
func (_ProgramTest *ProgramTestTransactorSession) CheckRevertData(program common.Address, data []byte, expected []byte) (*types.Transaction, error) {
	return _ProgramTest.Contract.CheckRevertData(&_ProgramTest.TransactOpts, program, data, expected)
}

// MathTest is a paid mutator transaction binding the contract method 0xfd424462.
//
// Solidity: function mathTest(address program) returns()
func (_ProgramTest *ProgramTestTransactor) MathTest(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _ProgramTest.contract.Transact(opts, "mathTest", program)
}

// MathTest is a paid mutator transaction binding the contract method 0xfd424462.
//
// Solidity: function mathTest(address program) returns()
func (_ProgramTest *ProgramTestSession) MathTest(program common.Address) (*types.Transaction, error) {
	return _ProgramTest.Contract.MathTest(&_ProgramTest.TransactOpts, program)
}

// MathTest is a paid mutator transaction binding the contract method 0xfd424462.
//
// Solidity: function mathTest(address program) returns()
func (_ProgramTest *ProgramTestTransactorSession) MathTest(program common.Address) (*types.Transaction, error) {
	return _ProgramTest.Contract.MathTest(&_ProgramTest.TransactOpts, program)
}

// ProgramTestHashIterator is returned from FilterHash and is used to iterate over the raw logs and unpacked data for Hash events raised by the ProgramTest contract.
type ProgramTestHashIterator struct {
	Event *ProgramTestHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProgramTestHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProgramTestHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProgramTestHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProgramTestHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProgramTestHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProgramTestHash represents a Hash event raised by the ProgramTest contract.
type ProgramTestHash struct {
	Result [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterHash is a free log retrieval operation binding the contract event 0x224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba43.
//
// Solidity: event Hash(bytes32 result)
func (_ProgramTest *ProgramTestFilterer) FilterHash(opts *bind.FilterOpts) (*ProgramTestHashIterator, error) {

	logs, sub, err := _ProgramTest.contract.FilterLogs(opts, "Hash")
	if err != nil {
		return nil, err
	}
	return &ProgramTestHashIterator{contract: _ProgramTest.contract, event: "Hash", logs: logs, sub: sub}, nil
}

// WatchHash is a free log subscription operation binding the contract event 0x224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba43.
//
// Solidity: event Hash(bytes32 result)
func (_ProgramTest *ProgramTestFilterer) WatchHash(opts *bind.WatchOpts, sink chan<- *ProgramTestHash) (event.Subscription, error) {

	logs, sub, err := _ProgramTest.contract.WatchLogs(opts, "Hash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProgramTestHash)
				if err := _ProgramTest.contract.UnpackLog(event, "Hash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHash is a log parse operation binding the contract event 0x224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba43.
//
// Solidity: event Hash(bytes32 result)
func (_ProgramTest *ProgramTestFilterer) ParseHash(log types.Log) (*ProgramTestHash, error) {
	event := new(ProgramTestHash)
	if err := _ProgramTest.contract.UnpackLog(event, "Hash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProxyAdminForBindingMetaData contains all meta data concerning the ProxyAdminForBinding contract.
var ProxyAdminForBindingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60808060405234605a5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36105fb90816100608239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90848263204e1c7a146104275750508063715018a6146103df5780637eff275e146103655780638da5cb5b1461033d5780639623609d146102275783816399a88ec41461019b57508063f2fde38b146100e95763f3b7dead1461007f57600080fd5b346100e55760203660031901126100e5576001600160a01b039083908190836100a6610466565b86516303e1469160e61b815291165afa926100bf6104fe565b93156100e257506100da83602080809651830101910161052e565b169051908152f35b80fd5b8280fd5b50346100e55760203660031901126100e557610103610466565b9061010c61054d565b6001600160a01b039182169283156101495750506000548260018060a01b0319821617600055166000805160206105a6833981519152600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b929050346102235780600319360112610223576101b6610466565b6101be610481565b906101c761054d565b6001600160a01b03908116803b1561021f5785928360249286519788958694631b2ce7f360e11b865216908401525af190811561021657506102065750f35b61020f90610497565b6100e25780f35b513d84823e3d90fd5b8580fd5b5050fd5b50829060603660031901126103395761023e610466565b92610247610481565b916044356001600160401b0381116103355736602382011215610335578082013591610272836104e3565b9261027f855194856104c0565b80845260209236602483830101116103315781889260246020930183880137850101526102aa61054d565b6001600160a01b0396871696873b1561032d5784519563278f794360e11b87521690850152826024850152815191826044860152855b8381106103195750505082849581606481858983819884010152601f8019910116810103019134905af190811561021657506102065750f35b8181018301518682016064015282016102e0565b8680fd5b8780fd5b8480fd5b5080fd5b505034610339578160031936011261033957905490516001600160a01b039091168152602090f35b5090346100e557806003193601126100e55782610380610466565b610388610481565b61039061054d565b6001600160a01b0391821690813b156103db5783602492865197889586946308f2839760e41b865216908401525af190811561021657506103cf575080f35b6103d890610497565b80f35b8380fd5b83346100e257806003193601126100e2576103f861054d565b80546001600160a01b03198116825581906001600160a01b03166000805160206105a68339815191528280a380f35b91509134610339576020366003190112610339576001600160a01b039282919084610450610466565b635c60da1b60e01b8352165afa926100bf6104fe565b600435906001600160a01b038216820361047c57565b600080fd5b602435906001600160a01b038216820361047c57565b6001600160401b0381116104aa57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176104aa57604052565b6001600160401b0381116104aa57601f01601f191660200190565b3d15610529573d9061050f826104e3565b9161051d60405193846104c0565b82523d6000602084013e565b606090565b9081602091031261047c57516001600160a01b038116810361047c5790565b6000546001600160a01b0316330361056157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212205c33e839e7cca87c34bfdc803c8aa5537f6c99acec2995411c76d82b85c8472d64736f6c63430008190033",
}

// ProxyAdminForBindingABI is the input ABI used to generate the binding from.
// Deprecated: Use ProxyAdminForBindingMetaData.ABI instead.
var ProxyAdminForBindingABI = ProxyAdminForBindingMetaData.ABI

// ProxyAdminForBindingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProxyAdminForBindingMetaData.Bin instead.
var ProxyAdminForBindingBin = ProxyAdminForBindingMetaData.Bin

// DeployProxyAdminForBinding deploys a new Ethereum contract, binding an instance of ProxyAdminForBinding to it.
func DeployProxyAdminForBinding(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProxyAdminForBinding, error) {
	parsed, err := ProxyAdminForBindingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProxyAdminForBindingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProxyAdminForBinding{ProxyAdminForBindingCaller: ProxyAdminForBindingCaller{contract: contract}, ProxyAdminForBindingTransactor: ProxyAdminForBindingTransactor{contract: contract}, ProxyAdminForBindingFilterer: ProxyAdminForBindingFilterer{contract: contract}}, nil
}

// ProxyAdminForBinding is an auto generated Go binding around an Ethereum contract.
type ProxyAdminForBinding struct {
	ProxyAdminForBindingCaller     // Read-only binding to the contract
	ProxyAdminForBindingTransactor // Write-only binding to the contract
	ProxyAdminForBindingFilterer   // Log filterer for contract events
}

// ProxyAdminForBindingCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyAdminForBindingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminForBindingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyAdminForBindingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminForBindingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyAdminForBindingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminForBindingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxyAdminForBindingSession struct {
	Contract     *ProxyAdminForBinding // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ProxyAdminForBindingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyAdminForBindingCallerSession struct {
	Contract *ProxyAdminForBindingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ProxyAdminForBindingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyAdminForBindingTransactorSession struct {
	Contract     *ProxyAdminForBindingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ProxyAdminForBindingRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyAdminForBindingRaw struct {
	Contract *ProxyAdminForBinding // Generic contract binding to access the raw methods on
}

// ProxyAdminForBindingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyAdminForBindingCallerRaw struct {
	Contract *ProxyAdminForBindingCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyAdminForBindingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyAdminForBindingTransactorRaw struct {
	Contract *ProxyAdminForBindingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxyAdminForBinding creates a new instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBinding(address common.Address, backend bind.ContractBackend) (*ProxyAdminForBinding, error) {
	contract, err := bindProxyAdminForBinding(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBinding{ProxyAdminForBindingCaller: ProxyAdminForBindingCaller{contract: contract}, ProxyAdminForBindingTransactor: ProxyAdminForBindingTransactor{contract: contract}, ProxyAdminForBindingFilterer: ProxyAdminForBindingFilterer{contract: contract}}, nil
}

// NewProxyAdminForBindingCaller creates a new read-only instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBindingCaller(address common.Address, caller bind.ContractCaller) (*ProxyAdminForBindingCaller, error) {
	contract, err := bindProxyAdminForBinding(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingCaller{contract: contract}, nil
}

// NewProxyAdminForBindingTransactor creates a new write-only instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBindingTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyAdminForBindingTransactor, error) {
	contract, err := bindProxyAdminForBinding(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingTransactor{contract: contract}, nil
}

// NewProxyAdminForBindingFilterer creates a new log filterer instance of ProxyAdminForBinding, bound to a specific deployed contract.
func NewProxyAdminForBindingFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyAdminForBindingFilterer, error) {
	contract, err := bindProxyAdminForBinding(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingFilterer{contract: contract}, nil
}

// bindProxyAdminForBinding binds a generic wrapper to an already deployed contract.
func bindProxyAdminForBinding(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProxyAdminForBindingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdminForBinding *ProxyAdminForBindingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProxyAdminForBinding.Contract.ProxyAdminForBindingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdminForBinding *ProxyAdminForBindingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ProxyAdminForBindingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdminForBinding *ProxyAdminForBindingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ProxyAdminForBindingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProxyAdminForBinding.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.contract.Transact(opts, method, params...)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCaller) GetProxyAdmin(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdminForBinding.contract.Call(opts, &out, "getProxyAdmin", proxy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyAdmin(&_ProxyAdminForBinding.CallOpts, proxy)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyAdmin(&_ProxyAdminForBinding.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCaller) GetProxyImplementation(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdminForBinding.contract.Call(opts, &out, "getProxyImplementation", proxy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyImplementation(&_ProxyAdminForBinding.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdminForBinding.Contract.GetProxyImplementation(&_ProxyAdminForBinding.CallOpts, proxy)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ProxyAdminForBinding.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) Owner() (common.Address, error) {
	return _ProxyAdminForBinding.Contract.Owner(&_ProxyAdminForBinding.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdminForBinding *ProxyAdminForBindingCallerSession) Owner() (common.Address, error) {
	return _ProxyAdminForBinding.Contract.Owner(&_ProxyAdminForBinding.CallOpts)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) ChangeProxyAdmin(opts *bind.TransactOpts, proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "changeProxyAdmin", proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ChangeProxyAdmin(&_ProxyAdminForBinding.TransactOpts, proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.ChangeProxyAdmin(&_ProxyAdminForBinding.TransactOpts, proxy, newAdmin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.RenounceOwnership(&_ProxyAdminForBinding.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.RenounceOwnership(&_ProxyAdminForBinding.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.TransferOwnership(&_ProxyAdminForBinding.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.TransferOwnership(&_ProxyAdminForBinding.TransactOpts, newOwner)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) Upgrade(opts *bind.TransactOpts, proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "upgrade", proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.Upgrade(&_ProxyAdminForBinding.TransactOpts, proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.Upgrade(&_ProxyAdminForBinding.TransactOpts, proxy, implementation)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactor) UpgradeAndCall(opts *bind.TransactOpts, proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdminForBinding.contract.Transact(opts, "upgradeAndCall", proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.UpgradeAndCall(&_ProxyAdminForBinding.TransactOpts, proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdminForBinding *ProxyAdminForBindingTransactorSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdminForBinding.Contract.UpgradeAndCall(&_ProxyAdminForBinding.TransactOpts, proxy, implementation, data)
}

// ProxyAdminForBindingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ProxyAdminForBinding contract.
type ProxyAdminForBindingOwnershipTransferredIterator struct {
	Event *ProxyAdminForBindingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProxyAdminForBindingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProxyAdminForBindingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProxyAdminForBindingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProxyAdminForBindingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProxyAdminForBindingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProxyAdminForBindingOwnershipTransferred represents a OwnershipTransferred event raised by the ProxyAdminForBinding contract.
type ProxyAdminForBindingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdminForBinding *ProxyAdminForBindingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProxyAdminForBindingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdminForBinding.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminForBindingOwnershipTransferredIterator{contract: _ProxyAdminForBinding.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdminForBinding *ProxyAdminForBindingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProxyAdminForBindingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdminForBinding.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProxyAdminForBindingOwnershipTransferred)
				if err := _ProxyAdminForBinding.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdminForBinding *ProxyAdminForBindingFilterer) ParseOwnershipTransferred(log types.Log) (*ProxyAdminForBindingOwnershipTransferred, error) {
	event := new(ProxyAdminForBindingOwnershipTransferred)
	if err := _ProxyAdminForBinding.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Reader4844MetaData contains all meta data concerning the Reader4844 contract.
var Reader4844MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"BLOB_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlobBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610177908161001b8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816307a7d2da14610126575080631f6d6ef71461010b5763e83a2d821461004357600080fd5b346101075781600319360112610107578051918282016001600160401b038111848210176100f357825260019260018152602080820192813685378251156100df5791907f014e8e17947683a76729b8efd62f59785227e0011c4ace32d7887589acd46ee7849694528451948186019282875251809352850195925b8281106100cc5785870386f35b83518752958101959281019284016100bf565b634e487b7160e01b81526032600452602490fd5b634e487b7160e01b82526041600452602482fd5b5080fd5b50346101075781600319360112610107576020905160648152f35b83903461010757816003193601126101075780606460209252f3fea26469706673582212207740b6af48e5b389887349b73b3e7e9f4cd6d5de99505ad8b9e839c829a017e564736f6c63430008190033",
}

// Reader4844ABI is the input ABI used to generate the binding from.
// Deprecated: Use Reader4844MetaData.ABI instead.
var Reader4844ABI = Reader4844MetaData.ABI

// Reader4844Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Reader4844MetaData.Bin instead.
var Reader4844Bin = Reader4844MetaData.Bin

// DeployReader4844 deploys a new Ethereum contract, binding an instance of Reader4844 to it.
func DeployReader4844(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Reader4844, error) {
	parsed, err := Reader4844MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Reader4844Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Reader4844{Reader4844Caller: Reader4844Caller{contract: contract}, Reader4844Transactor: Reader4844Transactor{contract: contract}, Reader4844Filterer: Reader4844Filterer{contract: contract}}, nil
}

// Reader4844 is an auto generated Go binding around an Ethereum contract.
type Reader4844 struct {
	Reader4844Caller     // Read-only binding to the contract
	Reader4844Transactor // Write-only binding to the contract
	Reader4844Filterer   // Log filterer for contract events
}

// Reader4844Caller is an auto generated read-only Go binding around an Ethereum contract.
type Reader4844Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Reader4844Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Reader4844Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Reader4844Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Reader4844Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Reader4844Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Reader4844Session struct {
	Contract     *Reader4844       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Reader4844CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Reader4844CallerSession struct {
	Contract *Reader4844Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// Reader4844TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Reader4844TransactorSession struct {
	Contract     *Reader4844Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// Reader4844Raw is an auto generated low-level Go binding around an Ethereum contract.
type Reader4844Raw struct {
	Contract *Reader4844 // Generic contract binding to access the raw methods on
}

// Reader4844CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Reader4844CallerRaw struct {
	Contract *Reader4844Caller // Generic read-only contract binding to access the raw methods on
}

// Reader4844TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Reader4844TransactorRaw struct {
	Contract *Reader4844Transactor // Generic write-only contract binding to access the raw methods on
}

// NewReader4844 creates a new instance of Reader4844, bound to a specific deployed contract.
func NewReader4844(address common.Address, backend bind.ContractBackend) (*Reader4844, error) {
	contract, err := bindReader4844(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Reader4844{Reader4844Caller: Reader4844Caller{contract: contract}, Reader4844Transactor: Reader4844Transactor{contract: contract}, Reader4844Filterer: Reader4844Filterer{contract: contract}}, nil
}

// NewReader4844Caller creates a new read-only instance of Reader4844, bound to a specific deployed contract.
func NewReader4844Caller(address common.Address, caller bind.ContractCaller) (*Reader4844Caller, error) {
	contract, err := bindReader4844(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Reader4844Caller{contract: contract}, nil
}

// NewReader4844Transactor creates a new write-only instance of Reader4844, bound to a specific deployed contract.
func NewReader4844Transactor(address common.Address, transactor bind.ContractTransactor) (*Reader4844Transactor, error) {
	contract, err := bindReader4844(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Reader4844Transactor{contract: contract}, nil
}

// NewReader4844Filterer creates a new log filterer instance of Reader4844, bound to a specific deployed contract.
func NewReader4844Filterer(address common.Address, filterer bind.ContractFilterer) (*Reader4844Filterer, error) {
	contract, err := bindReader4844(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Reader4844Filterer{contract: contract}, nil
}

// bindReader4844 binds a generic wrapper to an already deployed contract.
func bindReader4844(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Reader4844MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Reader4844 *Reader4844Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Reader4844.Contract.Reader4844Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Reader4844 *Reader4844Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Reader4844.Contract.Reader4844Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Reader4844 *Reader4844Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Reader4844.Contract.Reader4844Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Reader4844 *Reader4844CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Reader4844.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Reader4844 *Reader4844TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Reader4844.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Reader4844 *Reader4844TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Reader4844.Contract.contract.Transact(opts, method, params...)
}

// BLOBBASEFEE is a free data retrieval call binding the contract method 0x07a7d2da.
//
// Solidity: function BLOB_BASE_FEE() view returns(uint256)
func (_Reader4844 *Reader4844Caller) BLOBBASEFEE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Reader4844.contract.Call(opts, &out, "BLOB_BASE_FEE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BLOBBASEFEE is a free data retrieval call binding the contract method 0x07a7d2da.
//
// Solidity: function BLOB_BASE_FEE() view returns(uint256)
func (_Reader4844 *Reader4844Session) BLOBBASEFEE() (*big.Int, error) {
	return _Reader4844.Contract.BLOBBASEFEE(&_Reader4844.CallOpts)
}

// BLOBBASEFEE is a free data retrieval call binding the contract method 0x07a7d2da.
//
// Solidity: function BLOB_BASE_FEE() view returns(uint256)
func (_Reader4844 *Reader4844CallerSession) BLOBBASEFEE() (*big.Int, error) {
	return _Reader4844.Contract.BLOBBASEFEE(&_Reader4844.CallOpts)
}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256)
func (_Reader4844 *Reader4844Caller) GetBlobBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Reader4844.contract.Call(opts, &out, "getBlobBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256)
func (_Reader4844 *Reader4844Session) GetBlobBaseFee() (*big.Int, error) {
	return _Reader4844.Contract.GetBlobBaseFee(&_Reader4844.CallOpts)
}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256)
func (_Reader4844 *Reader4844CallerSession) GetBlobBaseFee() (*big.Int, error) {
	return _Reader4844.Contract.GetBlobBaseFee(&_Reader4844.CallOpts)
}

// GetDataHashes is a free data retrieval call binding the contract method 0xe83a2d82.
//
// Solidity: function getDataHashes() view returns(bytes32[])
func (_Reader4844 *Reader4844Caller) GetDataHashes(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _Reader4844.contract.Call(opts, &out, "getDataHashes")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetDataHashes is a free data retrieval call binding the contract method 0xe83a2d82.
//
// Solidity: function getDataHashes() view returns(bytes32[])
func (_Reader4844 *Reader4844Session) GetDataHashes() ([][32]byte, error) {
	return _Reader4844.Contract.GetDataHashes(&_Reader4844.CallOpts)
}

// GetDataHashes is a free data retrieval call binding the contract method 0xe83a2d82.
//
// Solidity: function getDataHashes() view returns(bytes32[])
func (_Reader4844 *Reader4844CallerSession) GetDataHashes() ([][32]byte, error) {
	return _Reader4844.Contract.GetDataHashes(&_Reader4844.CallOpts)
}

// SdkStorageMetaData contains all meta data concerning the SdkStorage contract.
var SdkStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"populate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608080604052346015576113f6908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063a7f4377914610db25763f809f2051461003257600080fd5b34610dad576000366003190112610dad57600080546001600160a81b031916617001178155600180546001600160a01b03191660301790556002805465ffffffffffff1916657fffffff002017905560406003555b6001600160401b0381811660208110156100f55760058054600160401b8110156100df576100ba91600182019055611235565b815460039190911b93841b19169190921b1790556001016001600160401b0316610087565b634e487b7160e01b600052604160045260246000fd5b600554600710156104be57600560009081527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db180546001600160c01b0316604d60c01b1790555b600a8110610be95760005b600a8110610b8b5760005b601f60ff8216101561033b5760405160075491908060006101728561118b565b600186168015610319576001146102d4575b506101a79160019160ff60f81b8660f81b16815203601e198101845201826112e9565b8051926001600160401b0384116100df576101c19061118b565b601f811161027a575b50602090601f841160011461020a578360ff94600194936101f4936000926101ff575b50506111c5565b6007555b0116610152565b0151905086806101ed565b90600760005260206000209160005b601f198616811061026257509360019392849260ff9683601f19811610610249575b505050811b016007556101f8565b015160001960f88460031b161c1916905585808061023b565b91926020600181928685015181550194019201610219565b60076000526102c4907fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688601f860160051c810191602087106102ca575b601f0160051c01906111d8565b836101ca565b90915081906102b7565b91505060076000528160206000206000905b8382106102ff57509091820160200190506101a7610184565b6020919250806001915483858801015201910183916102e6565b5060ff19861660208085019190915281151590910283010190506101a7610184565b60005b605060ff8216106109d85761035c61035760095461118b565b6111ef565b601e6e617262697472756d207374796c757360881b0160095560005b601081106109a95760005b60046001600160a01b03821610156105c0576040516001600160401b0360208201818111838210176100df57604081815260008085526001600160a01b0386168152600b6020522092519182116100df57600160401b82116100df578254828455808310610569575b509160005260206000209060005b8160051c81106105235750601f198116928382036104d4575b5050505060005b6001600160a01b03821681111561043d57506001016001600160a01b0316610383565b6001600160a01b0382166000908152600b60205260409020805490600160401b8210156100df57600182018082558210156104be5760005260206000208160051c019060f882549160031b169060ff6001831b921b191617905560001981146104a85760010161041a565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60009360005b81840381106104f45750505060051c015581808080610413565b90919460206105196001928489511515919060ff809160031b9316831b921b19161790565b96019291016104da565b6000805b6020811061053c5750838201556001016103fa565b949060206105606001928885511515919060ff809160031b9316831b921b19161790565b92019501610527565b61059790601f8560005260206000209080860160051c8201928187168061059d575b500160051c01906111d8565b846103ec565b6105ba906000198601908154906000199060200360031b1c169055565b8961058b565b60005b8060030b90600482121561062b57600c80549290600160401b8410156100df57836105f49160018096019055611291565b505063ffffffff82169061060782611291565b5090600052602052604060002090838060a01b03198254161790550160030b6105c3565b60005b60ff60048183161015610678578160019161064a60ff9461135d565b168360f81b8260f81b16600052600d602052604060002083831615600052602052604060002055011661062e565b6106996026604051657374796c757360d01b8152600e60068201522061136f565b60005b6004811061092a576106af60115461118b565b601f81116108eb575b50601c6d4c3220697320666f7220796f752160901b01601155601c60005b600581106108bc575060005b60028110610897575060005b60048110610868575060005b600381106107a25760005b6004811015908161077e5760005b80600b0b90600482121561077257836104be57601d8301805490600160401b8210156100df57600182018082558210156104be5760019361076791600052600c85602060002085821c0194160283546113a7565b905501600b0b610713565b50506001915001610705565b60005b6003811061078b57005b8061079c600192831b60210161136f565b01610781565b60405160808082016001600160401b038111838210176100df5760405236823760005b6004811261084b57508254600160401b8110156100df57600181018085558110156104be578360005260206000209060011b019060005b6002811061080f575050506001016106fa565b6000805b600281106108285750838201556001016107fc565b929060206108426001928451600b0b9087600c02906113a7565b92019301610813565b60048110156104be5780600191600b0b8160051b840152016107c5565b8060ff60019216816018019081549061ff006108838261135d565b60081b169161ffff191617179055016106ee565b6016810180546001600160a01b0319166001600160a01b0383161790556001016106e2565b60019062ffffff600a9081830460140191600383549185060260031b91808516831b921b1916179055016106d6565b601160005261092490601f0160051c7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908101906111d8565b806106b8565b600454600160401b8110156100df5780600161094992016004556112ac565b9190916109935781600260019303610963575b500161069c565b61ffff6002541661ffff1982541617815561098660025460101c60030b826112cb565b826003549101558261095c565b634e487b7160e01b600052600060045260246000fd5b6000818152600a6020526040902080546001600160a01b0319166001600160a01b038316179055600101610378565b60405160085491908060006109ec8561118b565b600186168015610b6957600114610b24575b50610a219160019160ff60f81b8660f81b16815203601e198101845201826112e9565b8051926001600160401b0384116100df57610a3b9061118b565b90601f91828111610ae9575b506020918411600114610a79578360ff9460019493610a6e936000926101ff5750506111c5565b6008555b011661033e565b90600860005260206000209160005b601f1986168110610ad157509360019392849260ff9683601f19811610610ab8575b505050811b01600855610a72565b015160001960f88460031b161c19169055858080610aaa565b91926020600181928685015181550194019201610a88565b610b1590600860005260206000208480880160051c82019260208910610b1b575b0160051c01906111d8565b84610a47565b92508192610b0a565b91505060086000528160206000206000905b838210610b4f5750909182016020019050610a216109fe565b602091925080600191548385880101520191018391610b36565b5060ff1986166020808501919091528115159091028301019050610a216109fe565b60005b818110610b9e5750600101610147565b610bb181610bab84611276565b5061133b565b91908054808460031b1c60011b6501fffffffffe64fffffffffe8216911681036104a857600194610be192611323565b905501610b8e565b610bf28161130c565b90610c0060405192836112e9565b808252610c0c8161130c565b602083019290601f1901368437600654600160401b90818110156100df57806001610c3a9201600655611276565b9290926109935751906001600160401b0382116100df5781116100df576001938254828455808310610d56575b509160005260206000209060005b600682048110610d18575060068082040281039283610cd1575b5050505060005b818110610ca457500161013c565b80610cc9610cb68593610bab86611276565b64ffffffffff8493929316908354611323565b905501610c96565b60009360005b818110610cf05750505060069004015582808080610c8f565b9091946020610d0e899264ffffffffff895116908560050290611323565b9601929101610cd7565b6000805b60068110610d305750838201558501610c75565b94906020610d4d899264ffffffffff855116908960050290611323565b92019501610d1c565b610d8490846000526020600020600660058181880104830193818389060280610d8a575b50010401906111d8565b85610c67565b610da7906000198701908154906000199060200360031b1c169055565b8b610d7a565b600080fd5b34610dad576000366003190112610dad575b60078054610dd18161118b565b15610e7057610ddf8161118b565b8015610e5a5780602014610e3c5760001981016020809210600114610e2a5760ff601f92856000526000208260051c01928084549316900360031b1b19169055600119019055610dc4565b9050610e35916111c5565b9055610dc4565b5050600081815260208120805460ff1916603e179092559055610dc4565b634e487b7160e01b600052603160045260246000fd5b600880546010610e7f8261118b565b1115610f0957610e8e8161118b565b8015610e5a5780602014610eeb5760001981016020809210600114610ed95760ff601f92856000526000208260051c01928084549316900360031b1b19169055600119019055610e70565b9050610ee4916111c5565b9055610e70565b5050600081815260208120805460ff1916603e179092559055610e70565b610f1761035760095461118b565b601e6e7761736d2069732063757465203c3360881b016009555b600580548015610f62576000190190610f4982611235565b81549060018060401b039060031b1b1916905555610f31565b600680546001811115610fbc578015610e5a576000190190610f8382611276565b6109935780546000825580610f9b575b505055610f62565b610fb59160005282600560206000209201048101906111d8565b8280610f93565b60005b600881106111675760086000908152600a60209081527f2c1fd36ba11b13b555f58753742999069764391f450ca8727fe8a3eeffe6777580546001600160a01b03191682179055905b6001600160a01b038116600481101561106757600052600b8252604060002080546000825580611046575b50506001016001600160a01b0316611008565b61106091600052601f84600020910160051c8101906111d8565b8280611033565b826004548015610e5a57600019019061107f826112ac565b929092610993576000835560006001809401556004558160185b601c8110611153575050601c546000601c5580611111575b5081601d5b602181106110dd575060215b602781106110cc57005b6000808255828201556002016110c2565b805460008255806110f2575b500182906110b6565b61110b908260005283856000209101841c8101906111d8565b846110e9565b6001600160ff1b03811681036104a857601c6000528160002090831b8101905b81811061113e57506110b1565b8061114d6002809301826111d8565b01611131565b61115f828201826111d8565b018290611099565b6000818152600a6020526040902080546001600160a01b0319169055600101610fbf565b90600182811c921680156111bb575b60208310146111a557565b634e487b7160e01b600052602260045260246000fd5b91607f169161119a565b8160011b916000199060031b1c19161790565b8181106111e3575050565b600081556001016111d8565b601f81116111fa5750565b600960005261123390601f0160051c7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af908101906111d8565b565b906005548210156104be576005600052600282901c7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0019160031b60181690565b6006548110156104be57600660005260206000200190600090565b600c548110156104be57600c60005260206000200190600090565b6004548110156104be57600460005260206000209060011b0190600090565b9081549060101b65ffffffff0000169065ffffffff00001916179055565b601f909101601f19168101906001600160401b038211908210176100df57604052565b6001600160401b0381116100df5760051b60200190565b9060031b9164ffffffffff809116831b921b19161790565b91909180548310156104be576000526005600660206000208185040193060290565b60ff60019116019060ff82116104a857565b6002810361137a5750565b61ffff6002541661ffff1982541617815561139d60025460101c60030b826112cb565b6001600354910155565b9060031b9160018060601b03809116831b921b1916179056fea2646970667358221220c5f037b8060e824a127fbde46e3b630d5878a71290f77e23f9f6a3693259165d64736f6c63430008190033",
}

// SdkStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use SdkStorageMetaData.ABI instead.
var SdkStorageABI = SdkStorageMetaData.ABI

// SdkStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SdkStorageMetaData.Bin instead.
var SdkStorageBin = SdkStorageMetaData.Bin

// DeploySdkStorage deploys a new Ethereum contract, binding an instance of SdkStorage to it.
func DeploySdkStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SdkStorage, error) {
	parsed, err := SdkStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SdkStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SdkStorage{SdkStorageCaller: SdkStorageCaller{contract: contract}, SdkStorageTransactor: SdkStorageTransactor{contract: contract}, SdkStorageFilterer: SdkStorageFilterer{contract: contract}}, nil
}

// SdkStorage is an auto generated Go binding around an Ethereum contract.
type SdkStorage struct {
	SdkStorageCaller     // Read-only binding to the contract
	SdkStorageTransactor // Write-only binding to the contract
	SdkStorageFilterer   // Log filterer for contract events
}

// SdkStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type SdkStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdkStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SdkStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdkStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SdkStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdkStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SdkStorageSession struct {
	Contract     *SdkStorage       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SdkStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SdkStorageCallerSession struct {
	Contract *SdkStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SdkStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SdkStorageTransactorSession struct {
	Contract     *SdkStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SdkStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type SdkStorageRaw struct {
	Contract *SdkStorage // Generic contract binding to access the raw methods on
}

// SdkStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SdkStorageCallerRaw struct {
	Contract *SdkStorageCaller // Generic read-only contract binding to access the raw methods on
}

// SdkStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SdkStorageTransactorRaw struct {
	Contract *SdkStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSdkStorage creates a new instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorage(address common.Address, backend bind.ContractBackend) (*SdkStorage, error) {
	contract, err := bindSdkStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SdkStorage{SdkStorageCaller: SdkStorageCaller{contract: contract}, SdkStorageTransactor: SdkStorageTransactor{contract: contract}, SdkStorageFilterer: SdkStorageFilterer{contract: contract}}, nil
}

// NewSdkStorageCaller creates a new read-only instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorageCaller(address common.Address, caller bind.ContractCaller) (*SdkStorageCaller, error) {
	contract, err := bindSdkStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SdkStorageCaller{contract: contract}, nil
}

// NewSdkStorageTransactor creates a new write-only instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*SdkStorageTransactor, error) {
	contract, err := bindSdkStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SdkStorageTransactor{contract: contract}, nil
}

// NewSdkStorageFilterer creates a new log filterer instance of SdkStorage, bound to a specific deployed contract.
func NewSdkStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*SdkStorageFilterer, error) {
	contract, err := bindSdkStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SdkStorageFilterer{contract: contract}, nil
}

// bindSdkStorage binds a generic wrapper to an already deployed contract.
func bindSdkStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SdkStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SdkStorage *SdkStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SdkStorage.Contract.SdkStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SdkStorage *SdkStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.Contract.SdkStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SdkStorage *SdkStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SdkStorage.Contract.SdkStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SdkStorage *SdkStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SdkStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SdkStorage *SdkStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SdkStorage *SdkStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SdkStorage.Contract.contract.Transact(opts, method, params...)
}

// Populate is a paid mutator transaction binding the contract method 0xf809f205.
//
// Solidity: function populate() returns()
func (_SdkStorage *SdkStorageTransactor) Populate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.contract.Transact(opts, "populate")
}

// Populate is a paid mutator transaction binding the contract method 0xf809f205.
//
// Solidity: function populate() returns()
func (_SdkStorage *SdkStorageSession) Populate() (*types.Transaction, error) {
	return _SdkStorage.Contract.Populate(&_SdkStorage.TransactOpts)
}

// Populate is a paid mutator transaction binding the contract method 0xf809f205.
//
// Solidity: function populate() returns()
func (_SdkStorage *SdkStorageTransactorSession) Populate() (*types.Transaction, error) {
	return _SdkStorage.Contract.Populate(&_SdkStorage.TransactOpts)
}

// Remove is a paid mutator transaction binding the contract method 0xa7f43779.
//
// Solidity: function remove() returns()
func (_SdkStorage *SdkStorageTransactor) Remove(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SdkStorage.contract.Transact(opts, "remove")
}

// Remove is a paid mutator transaction binding the contract method 0xa7f43779.
//
// Solidity: function remove() returns()
func (_SdkStorage *SdkStorageSession) Remove() (*types.Transaction, error) {
	return _SdkStorage.Contract.Remove(&_SdkStorage.TransactOpts)
}

// Remove is a paid mutator transaction binding the contract method 0xa7f43779.
//
// Solidity: function remove() returns()
func (_SdkStorage *SdkStorageTransactorSession) Remove() (*types.Transaction, error) {
	return _SdkStorage.Contract.Remove(&_SdkStorage.TransactOpts)
}

// SequencerInboxStubMetaData contains all meta data concerning the SequencerInboxStub contract.
var SequencerInboxStubMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sequencer_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxDataSize_\",\"type\":\"uint256\"},{\"internalType\":\"contractIReader4844\",\"name\":\"reader4844_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUsingFeeToken_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"espressoTEEVerifier_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"AlreadyValidDASKeyset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadMaxTimeVariation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadPostUpgradeInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"BadSequencerNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataBlobsNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDataLength\",\"type\":\"uint256\"}],\"name\":\"DataTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayedBackwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayedTooFar\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deprecated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForceIncludeBlockTooSoon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForceIncludeTimeTooSoon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectMessagePreimage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"InitParamZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCelestiaBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"name\":\"InvalidHeaderFlag\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingDataHashes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"NoSuchKeyset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBatchPoster\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NotBatchPosterManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCodelessOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotForked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOrigin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keysetHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidateKeyset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchSequenceNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SequencerBatchData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchSequenceNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beforeAcc\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"afterAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"delayedAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxBlockNumber\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structIBridge.TimeBounds\",\"name\":\"timeBounds\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enumIBridge.BatchDataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"}],\"name\":\"SequencerBatchDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keysetHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keysetBytes\",\"type\":\"bytes\"}],\"name\":\"SetValidKeyset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hotshotHeight\",\"type\":\"uint256\"}],\"name\":\"TEESignatureVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOBSTREAM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BROTLI_MESSAGE_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CELESTIA_MESSAGE_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAS_MESSAGE_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DATA_AUTHENTICATED_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DATA_BLOB_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEADER_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREE_DAS_MESSAGE_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_HEAVY_MESSAGE_HEADER_FLAG\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"addInitMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"espressoMetadata\",\"type\":\"bytes\"}],\"name\":\"addSequencerL2Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addSequencerL2Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"}],\"name\":\"addSequencerL2BatchFromBlobs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"espressoMetadata\",\"type\":\"bytes\"}],\"name\":\"addSequencerL2BatchFromBlobs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"espressoMetadata\",\"type\":\"bytes\"}],\"name\":\"addSequencerL2BatchFromOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"}],\"name\":\"addSequencerL2BatchFromOrigin\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"afterDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMessageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMessageCount\",\"type\":\"uint256\"}],\"name\":\"addSequencerL2BatchFromOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchPosterManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dasKeySetInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidKeyset\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"creationBlock\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"espressoTEEVerifier\",\"outputs\":[{\"internalType\":\"contractIEspressoTEEVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalDelayedMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint64[2]\",\"name\":\"l1BlockAndTime\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint256\",\"name\":\"baseFeeL1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageDataHash\",\"type\":\"bytes32\"}],\"name\":\"forceInclusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ksHash\",\"type\":\"bytes32\"}],\"name\":\"getKeysetCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"inboxAccs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_espressoTEEVerifier\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ksHash\",\"type\":\"bytes32\"}],\"name\":\"invalidateKeysetHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBatchPoster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSequencer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUsingFeeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ksHash\",\"type\":\"bytes32\"}],\"name\":\"isValidKeysetHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDataSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeVariation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader4844\",\"outputs\":[{\"internalType\":\"contractIReader4844\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelayAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"contractIOwnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBatchPosterManager\",\"type\":\"address\"}],\"name\":\"setBatchPosterManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_espressoTEEVerifier\",\"type\":\"address\"}],\"name\":\"setEspressoTEEVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBatchPoster_\",\"type\":\"bool\"}],\"name\":\"setIsBatchPoster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSequencer_\",\"type\":\"bool\"}],\"name\":\"setIsSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation_\",\"type\":\"tuple\"}],\"name\":\"setMaxTimeVariation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"keysetBytes\",\"type\":\"bytes\"}],\"name\":\"setValidKeyset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDelayedMessagesRead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// SequencerInboxStubABI is the input ABI used to generate the binding from.
// Deprecated: Use SequencerInboxStubMetaData.ABI instead.
var SequencerInboxStubABI = SequencerInboxStubMetaData.ABI

// SequencerInboxStubBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SequencerInboxStubMetaData.Bin instead.
var SequencerInboxStubBin = SequencerInboxStubMetaData.Bin

// DeploySequencerInboxStub deploys a new Ethereum contract, binding an instance of SequencerInboxStub to it.
func DeploySequencerInboxStub(auth *bind.TransactOpts, backend bind.ContractBackend, bridge_ common.Address, sequencer_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation, maxDataSize_ *big.Int, reader4844_ common.Address, isUsingFeeToken_ bool, espressoTEEVerifier_ common.Address) (common.Address, *types.Transaction, *SequencerInboxStub, error) {
	parsed, err := SequencerInboxStubMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SequencerInboxStubBin), backend, bridge_, sequencer_, maxTimeVariation_, maxDataSize_, reader4844_, isUsingFeeToken_, espressoTEEVerifier_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SequencerInboxStub{SequencerInboxStubCaller: SequencerInboxStubCaller{contract: contract}, SequencerInboxStubTransactor: SequencerInboxStubTransactor{contract: contract}, SequencerInboxStubFilterer: SequencerInboxStubFilterer{contract: contract}}, nil
}

// SequencerInboxStub is an auto generated Go binding around an Ethereum contract.
type SequencerInboxStub struct {
	SequencerInboxStubCaller     // Read-only binding to the contract
	SequencerInboxStubTransactor // Write-only binding to the contract
	SequencerInboxStubFilterer   // Log filterer for contract events
}

// SequencerInboxStubCaller is an auto generated read-only Go binding around an Ethereum contract.
type SequencerInboxStubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SequencerInboxStubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SequencerInboxStubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SequencerInboxStubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SequencerInboxStubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SequencerInboxStubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SequencerInboxStubSession struct {
	Contract     *SequencerInboxStub // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SequencerInboxStubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SequencerInboxStubCallerSession struct {
	Contract *SequencerInboxStubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// SequencerInboxStubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SequencerInboxStubTransactorSession struct {
	Contract     *SequencerInboxStubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// SequencerInboxStubRaw is an auto generated low-level Go binding around an Ethereum contract.
type SequencerInboxStubRaw struct {
	Contract *SequencerInboxStub // Generic contract binding to access the raw methods on
}

// SequencerInboxStubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SequencerInboxStubCallerRaw struct {
	Contract *SequencerInboxStubCaller // Generic read-only contract binding to access the raw methods on
}

// SequencerInboxStubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SequencerInboxStubTransactorRaw struct {
	Contract *SequencerInboxStubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSequencerInboxStub creates a new instance of SequencerInboxStub, bound to a specific deployed contract.
func NewSequencerInboxStub(address common.Address, backend bind.ContractBackend) (*SequencerInboxStub, error) {
	contract, err := bindSequencerInboxStub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStub{SequencerInboxStubCaller: SequencerInboxStubCaller{contract: contract}, SequencerInboxStubTransactor: SequencerInboxStubTransactor{contract: contract}, SequencerInboxStubFilterer: SequencerInboxStubFilterer{contract: contract}}, nil
}

// NewSequencerInboxStubCaller creates a new read-only instance of SequencerInboxStub, bound to a specific deployed contract.
func NewSequencerInboxStubCaller(address common.Address, caller bind.ContractCaller) (*SequencerInboxStubCaller, error) {
	contract, err := bindSequencerInboxStub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubCaller{contract: contract}, nil
}

// NewSequencerInboxStubTransactor creates a new write-only instance of SequencerInboxStub, bound to a specific deployed contract.
func NewSequencerInboxStubTransactor(address common.Address, transactor bind.ContractTransactor) (*SequencerInboxStubTransactor, error) {
	contract, err := bindSequencerInboxStub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubTransactor{contract: contract}, nil
}

// NewSequencerInboxStubFilterer creates a new log filterer instance of SequencerInboxStub, bound to a specific deployed contract.
func NewSequencerInboxStubFilterer(address common.Address, filterer bind.ContractFilterer) (*SequencerInboxStubFilterer, error) {
	contract, err := bindSequencerInboxStub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubFilterer{contract: contract}, nil
}

// bindSequencerInboxStub binds a generic wrapper to an already deployed contract.
func bindSequencerInboxStub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SequencerInboxStubMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SequencerInboxStub *SequencerInboxStubRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SequencerInboxStub.Contract.SequencerInboxStubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SequencerInboxStub *SequencerInboxStubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SequencerInboxStubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SequencerInboxStub *SequencerInboxStubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SequencerInboxStubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SequencerInboxStub *SequencerInboxStubCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SequencerInboxStub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SequencerInboxStub *SequencerInboxStubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SequencerInboxStub *SequencerInboxStubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.contract.Transact(opts, method, params...)
}

// BLOBSTREAM is a free data retrieval call binding the contract method 0xdc346547.
//
// Solidity: function BLOBSTREAM() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCaller) BLOBSTREAM(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "BLOBSTREAM")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BLOBSTREAM is a free data retrieval call binding the contract method 0xdc346547.
//
// Solidity: function BLOBSTREAM() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubSession) BLOBSTREAM() (common.Address, error) {
	return _SequencerInboxStub.Contract.BLOBSTREAM(&_SequencerInboxStub.CallOpts)
}

// BLOBSTREAM is a free data retrieval call binding the contract method 0xdc346547.
//
// Solidity: function BLOBSTREAM() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) BLOBSTREAM() (common.Address, error) {
	return _SequencerInboxStub.Contract.BLOBSTREAM(&_SequencerInboxStub.CallOpts)
}

// BROTLIMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x16af91a7.
//
// Solidity: function BROTLI_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) BROTLIMESSAGEHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "BROTLI_MESSAGE_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// BROTLIMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x16af91a7.
//
// Solidity: function BROTLI_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) BROTLIMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.BROTLIMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// BROTLIMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x16af91a7.
//
// Solidity: function BROTLI_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) BROTLIMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.BROTLIMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// CELESTIAMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x5fd9e56d.
//
// Solidity: function CELESTIA_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) CELESTIAMESSAGEHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "CELESTIA_MESSAGE_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// CELESTIAMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x5fd9e56d.
//
// Solidity: function CELESTIA_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) CELESTIAMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.CELESTIAMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// CELESTIAMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x5fd9e56d.
//
// Solidity: function CELESTIA_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) CELESTIAMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.CELESTIAMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// DASMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0xf60a5091.
//
// Solidity: function DAS_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) DASMESSAGEHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "DAS_MESSAGE_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// DASMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0xf60a5091.
//
// Solidity: function DAS_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) DASMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.DASMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// DASMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0xf60a5091.
//
// Solidity: function DAS_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) DASMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.DASMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// DATAAUTHENTICATEDFLAG is a free data retrieval call binding the contract method 0xe5a358c8.
//
// Solidity: function DATA_AUTHENTICATED_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) DATAAUTHENTICATEDFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "DATA_AUTHENTICATED_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// DATAAUTHENTICATEDFLAG is a free data retrieval call binding the contract method 0xe5a358c8.
//
// Solidity: function DATA_AUTHENTICATED_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) DATAAUTHENTICATEDFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.DATAAUTHENTICATEDFLAG(&_SequencerInboxStub.CallOpts)
}

// DATAAUTHENTICATEDFLAG is a free data retrieval call binding the contract method 0xe5a358c8.
//
// Solidity: function DATA_AUTHENTICATED_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) DATAAUTHENTICATEDFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.DATAAUTHENTICATEDFLAG(&_SequencerInboxStub.CallOpts)
}

// DATABLOBHEADERFLAG is a free data retrieval call binding the contract method 0x2cbf74e5.
//
// Solidity: function DATA_BLOB_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) DATABLOBHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "DATA_BLOB_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// DATABLOBHEADERFLAG is a free data retrieval call binding the contract method 0x2cbf74e5.
//
// Solidity: function DATA_BLOB_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) DATABLOBHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.DATABLOBHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// DATABLOBHEADERFLAG is a free data retrieval call binding the contract method 0x2cbf74e5.
//
// Solidity: function DATA_BLOB_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) DATABLOBHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.DATABLOBHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// HEADERLENGTH is a free data retrieval call binding the contract method 0x27957a49.
//
// Solidity: function HEADER_LENGTH() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCaller) HEADERLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "HEADER_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HEADERLENGTH is a free data retrieval call binding the contract method 0x27957a49.
//
// Solidity: function HEADER_LENGTH() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubSession) HEADERLENGTH() (*big.Int, error) {
	return _SequencerInboxStub.Contract.HEADERLENGTH(&_SequencerInboxStub.CallOpts)
}

// HEADERLENGTH is a free data retrieval call binding the contract method 0x27957a49.
//
// Solidity: function HEADER_LENGTH() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) HEADERLENGTH() (*big.Int, error) {
	return _SequencerInboxStub.Contract.HEADERLENGTH(&_SequencerInboxStub.CallOpts)
}

// TREEDASMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x6c890450.
//
// Solidity: function TREE_DAS_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) TREEDASMESSAGEHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "TREE_DAS_MESSAGE_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// TREEDASMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x6c890450.
//
// Solidity: function TREE_DAS_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) TREEDASMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.TREEDASMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// TREEDASMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x6c890450.
//
// Solidity: function TREE_DAS_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) TREEDASMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.TREEDASMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// ZEROHEAVYMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x02c99275.
//
// Solidity: function ZERO_HEAVY_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCaller) ZEROHEAVYMESSAGEHEADERFLAG(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "ZERO_HEAVY_MESSAGE_HEADER_FLAG")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// ZEROHEAVYMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x02c99275.
//
// Solidity: function ZERO_HEAVY_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubSession) ZEROHEAVYMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.ZEROHEAVYMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// ZEROHEAVYMESSAGEHEADERFLAG is a free data retrieval call binding the contract method 0x02c99275.
//
// Solidity: function ZERO_HEAVY_MESSAGE_HEADER_FLAG() view returns(bytes1)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) ZEROHEAVYMESSAGEHEADERFLAG() ([1]byte, error) {
	return _SequencerInboxStub.Contract.ZEROHEAVYMESSAGEHEADERFLAG(&_SequencerInboxStub.CallOpts)
}

// AddSequencerL2BatchFromOrigin6f12b0c9 is a free data retrieval call binding the contract method 0x6f12b0c9.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequencerNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder) pure returns()
func (_SequencerInboxStub *SequencerInboxStubCaller) AddSequencerL2BatchFromOrigin6f12b0c9(opts *bind.CallOpts, sequencerNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address) error {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "addSequencerL2BatchFromOrigin0", sequencerNumber, data, afterDelayedMessagesRead, gasRefunder)

	if err != nil {
		return err
	}

	return err

}

// AddSequencerL2BatchFromOrigin6f12b0c9 is a free data retrieval call binding the contract method 0x6f12b0c9.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequencerNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder) pure returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2BatchFromOrigin6f12b0c9(sequencerNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address) error {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromOrigin6f12b0c9(&_SequencerInboxStub.CallOpts, sequencerNumber, data, afterDelayedMessagesRead, gasRefunder)
}

// AddSequencerL2BatchFromOrigin6f12b0c9 is a free data retrieval call binding the contract method 0x6f12b0c9.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequencerNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder) pure returns()
func (_SequencerInboxStub *SequencerInboxStubCallerSession) AddSequencerL2BatchFromOrigin6f12b0c9(sequencerNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address) error {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromOrigin6f12b0c9(&_SequencerInboxStub.CallOpts, sequencerNumber, data, afterDelayedMessagesRead, gasRefunder)
}

// BatchCount is a free data retrieval call binding the contract method 0x06f13056.
//
// Solidity: function batchCount() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCaller) BatchCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "batchCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BatchCount is a free data retrieval call binding the contract method 0x06f13056.
//
// Solidity: function batchCount() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubSession) BatchCount() (*big.Int, error) {
	return _SequencerInboxStub.Contract.BatchCount(&_SequencerInboxStub.CallOpts)
}

// BatchCount is a free data retrieval call binding the contract method 0x06f13056.
//
// Solidity: function batchCount() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) BatchCount() (*big.Int, error) {
	return _SequencerInboxStub.Contract.BatchCount(&_SequencerInboxStub.CallOpts)
}

// BatchPosterManager is a free data retrieval call binding the contract method 0xcc2a1a0c.
//
// Solidity: function batchPosterManager() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCaller) BatchPosterManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "batchPosterManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BatchPosterManager is a free data retrieval call binding the contract method 0xcc2a1a0c.
//
// Solidity: function batchPosterManager() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubSession) BatchPosterManager() (common.Address, error) {
	return _SequencerInboxStub.Contract.BatchPosterManager(&_SequencerInboxStub.CallOpts)
}

// BatchPosterManager is a free data retrieval call binding the contract method 0xcc2a1a0c.
//
// Solidity: function batchPosterManager() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) BatchPosterManager() (common.Address, error) {
	return _SequencerInboxStub.Contract.BatchPosterManager(&_SequencerInboxStub.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubSession) Bridge() (common.Address, error) {
	return _SequencerInboxStub.Contract.Bridge(&_SequencerInboxStub.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) Bridge() (common.Address, error) {
	return _SequencerInboxStub.Contract.Bridge(&_SequencerInboxStub.CallOpts)
}

// DasKeySetInfo is a free data retrieval call binding the contract method 0x715ea34b.
//
// Solidity: function dasKeySetInfo(bytes32 ) view returns(bool isValidKeyset, uint64 creationBlock)
func (_SequencerInboxStub *SequencerInboxStubCaller) DasKeySetInfo(opts *bind.CallOpts, arg0 [32]byte) (struct {
	IsValidKeyset bool
	CreationBlock uint64
}, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "dasKeySetInfo", arg0)

	outstruct := new(struct {
		IsValidKeyset bool
		CreationBlock uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsValidKeyset = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.CreationBlock = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// DasKeySetInfo is a free data retrieval call binding the contract method 0x715ea34b.
//
// Solidity: function dasKeySetInfo(bytes32 ) view returns(bool isValidKeyset, uint64 creationBlock)
func (_SequencerInboxStub *SequencerInboxStubSession) DasKeySetInfo(arg0 [32]byte) (struct {
	IsValidKeyset bool
	CreationBlock uint64
}, error) {
	return _SequencerInboxStub.Contract.DasKeySetInfo(&_SequencerInboxStub.CallOpts, arg0)
}

// DasKeySetInfo is a free data retrieval call binding the contract method 0x715ea34b.
//
// Solidity: function dasKeySetInfo(bytes32 ) view returns(bool isValidKeyset, uint64 creationBlock)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) DasKeySetInfo(arg0 [32]byte) (struct {
	IsValidKeyset bool
	CreationBlock uint64
}, error) {
	return _SequencerInboxStub.Contract.DasKeySetInfo(&_SequencerInboxStub.CallOpts, arg0)
}

// EspressoTEEVerifier is a free data retrieval call binding the contract method 0xfa14fe6d.
//
// Solidity: function espressoTEEVerifier() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCaller) EspressoTEEVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "espressoTEEVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EspressoTEEVerifier is a free data retrieval call binding the contract method 0xfa14fe6d.
//
// Solidity: function espressoTEEVerifier() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubSession) EspressoTEEVerifier() (common.Address, error) {
	return _SequencerInboxStub.Contract.EspressoTEEVerifier(&_SequencerInboxStub.CallOpts)
}

// EspressoTEEVerifier is a free data retrieval call binding the contract method 0xfa14fe6d.
//
// Solidity: function espressoTEEVerifier() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) EspressoTEEVerifier() (common.Address, error) {
	return _SequencerInboxStub.Contract.EspressoTEEVerifier(&_SequencerInboxStub.CallOpts)
}

// GetKeysetCreationBlock is a free data retrieval call binding the contract method 0x258f0495.
//
// Solidity: function getKeysetCreationBlock(bytes32 ksHash) view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCaller) GetKeysetCreationBlock(opts *bind.CallOpts, ksHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "getKeysetCreationBlock", ksHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKeysetCreationBlock is a free data retrieval call binding the contract method 0x258f0495.
//
// Solidity: function getKeysetCreationBlock(bytes32 ksHash) view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubSession) GetKeysetCreationBlock(ksHash [32]byte) (*big.Int, error) {
	return _SequencerInboxStub.Contract.GetKeysetCreationBlock(&_SequencerInboxStub.CallOpts, ksHash)
}

// GetKeysetCreationBlock is a free data retrieval call binding the contract method 0x258f0495.
//
// Solidity: function getKeysetCreationBlock(bytes32 ksHash) view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) GetKeysetCreationBlock(ksHash [32]byte) (*big.Int, error) {
	return _SequencerInboxStub.Contract.GetKeysetCreationBlock(&_SequencerInboxStub.CallOpts, ksHash)
}

// InboxAccs is a free data retrieval call binding the contract method 0xd9dd67ab.
//
// Solidity: function inboxAccs(uint256 index) view returns(bytes32)
func (_SequencerInboxStub *SequencerInboxStubCaller) InboxAccs(opts *bind.CallOpts, index *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "inboxAccs", index)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// InboxAccs is a free data retrieval call binding the contract method 0xd9dd67ab.
//
// Solidity: function inboxAccs(uint256 index) view returns(bytes32)
func (_SequencerInboxStub *SequencerInboxStubSession) InboxAccs(index *big.Int) ([32]byte, error) {
	return _SequencerInboxStub.Contract.InboxAccs(&_SequencerInboxStub.CallOpts, index)
}

// InboxAccs is a free data retrieval call binding the contract method 0xd9dd67ab.
//
// Solidity: function inboxAccs(uint256 index) view returns(bytes32)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) InboxAccs(index *big.Int) ([32]byte, error) {
	return _SequencerInboxStub.Contract.InboxAccs(&_SequencerInboxStub.CallOpts, index)
}

// IsBatchPoster is a free data retrieval call binding the contract method 0x71c3e6fe.
//
// Solidity: function isBatchPoster(address ) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCaller) IsBatchPoster(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "isBatchPoster", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBatchPoster is a free data retrieval call binding the contract method 0x71c3e6fe.
//
// Solidity: function isBatchPoster(address ) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubSession) IsBatchPoster(arg0 common.Address) (bool, error) {
	return _SequencerInboxStub.Contract.IsBatchPoster(&_SequencerInboxStub.CallOpts, arg0)
}

// IsBatchPoster is a free data retrieval call binding the contract method 0x71c3e6fe.
//
// Solidity: function isBatchPoster(address ) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) IsBatchPoster(arg0 common.Address) (bool, error) {
	return _SequencerInboxStub.Contract.IsBatchPoster(&_SequencerInboxStub.CallOpts, arg0)
}

// IsSequencer is a free data retrieval call binding the contract method 0x6d46e987.
//
// Solidity: function isSequencer(address ) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCaller) IsSequencer(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "isSequencer", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSequencer is a free data retrieval call binding the contract method 0x6d46e987.
//
// Solidity: function isSequencer(address ) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubSession) IsSequencer(arg0 common.Address) (bool, error) {
	return _SequencerInboxStub.Contract.IsSequencer(&_SequencerInboxStub.CallOpts, arg0)
}

// IsSequencer is a free data retrieval call binding the contract method 0x6d46e987.
//
// Solidity: function isSequencer(address ) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) IsSequencer(arg0 common.Address) (bool, error) {
	return _SequencerInboxStub.Contract.IsSequencer(&_SequencerInboxStub.CallOpts, arg0)
}

// IsUsingFeeToken is a free data retrieval call binding the contract method 0x92d9f782.
//
// Solidity: function isUsingFeeToken() view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCaller) IsUsingFeeToken(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "isUsingFeeToken")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUsingFeeToken is a free data retrieval call binding the contract method 0x92d9f782.
//
// Solidity: function isUsingFeeToken() view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubSession) IsUsingFeeToken() (bool, error) {
	return _SequencerInboxStub.Contract.IsUsingFeeToken(&_SequencerInboxStub.CallOpts)
}

// IsUsingFeeToken is a free data retrieval call binding the contract method 0x92d9f782.
//
// Solidity: function isUsingFeeToken() view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) IsUsingFeeToken() (bool, error) {
	return _SequencerInboxStub.Contract.IsUsingFeeToken(&_SequencerInboxStub.CallOpts)
}

// IsValidKeysetHash is a free data retrieval call binding the contract method 0x1637be48.
//
// Solidity: function isValidKeysetHash(bytes32 ksHash) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCaller) IsValidKeysetHash(opts *bind.CallOpts, ksHash [32]byte) (bool, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "isValidKeysetHash", ksHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidKeysetHash is a free data retrieval call binding the contract method 0x1637be48.
//
// Solidity: function isValidKeysetHash(bytes32 ksHash) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubSession) IsValidKeysetHash(ksHash [32]byte) (bool, error) {
	return _SequencerInboxStub.Contract.IsValidKeysetHash(&_SequencerInboxStub.CallOpts, ksHash)
}

// IsValidKeysetHash is a free data retrieval call binding the contract method 0x1637be48.
//
// Solidity: function isValidKeysetHash(bytes32 ksHash) view returns(bool)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) IsValidKeysetHash(ksHash [32]byte) (bool, error) {
	return _SequencerInboxStub.Contract.IsValidKeysetHash(&_SequencerInboxStub.CallOpts, ksHash)
}

// MaxDataSize is a free data retrieval call binding the contract method 0xe8eb1dc3.
//
// Solidity: function maxDataSize() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCaller) MaxDataSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "maxDataSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxDataSize is a free data retrieval call binding the contract method 0xe8eb1dc3.
//
// Solidity: function maxDataSize() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubSession) MaxDataSize() (*big.Int, error) {
	return _SequencerInboxStub.Contract.MaxDataSize(&_SequencerInboxStub.CallOpts)
}

// MaxDataSize is a free data retrieval call binding the contract method 0xe8eb1dc3.
//
// Solidity: function maxDataSize() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) MaxDataSize() (*big.Int, error) {
	return _SequencerInboxStub.Contract.MaxDataSize(&_SequencerInboxStub.CallOpts)
}

// MaxTimeVariation is a free data retrieval call binding the contract method 0xebea461d.
//
// Solidity: function maxTimeVariation() view returns(uint256, uint256, uint256, uint256)
func (_SequencerInboxStub *SequencerInboxStubCaller) MaxTimeVariation(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "maxTimeVariation")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// MaxTimeVariation is a free data retrieval call binding the contract method 0xebea461d.
//
// Solidity: function maxTimeVariation() view returns(uint256, uint256, uint256, uint256)
func (_SequencerInboxStub *SequencerInboxStubSession) MaxTimeVariation() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _SequencerInboxStub.Contract.MaxTimeVariation(&_SequencerInboxStub.CallOpts)
}

// MaxTimeVariation is a free data retrieval call binding the contract method 0xebea461d.
//
// Solidity: function maxTimeVariation() view returns(uint256, uint256, uint256, uint256)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) MaxTimeVariation() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _SequencerInboxStub.Contract.MaxTimeVariation(&_SequencerInboxStub.CallOpts)
}

// Reader4844 is a free data retrieval call binding the contract method 0x8d910dde.
//
// Solidity: function reader4844() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCaller) Reader4844(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "reader4844")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Reader4844 is a free data retrieval call binding the contract method 0x8d910dde.
//
// Solidity: function reader4844() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubSession) Reader4844() (common.Address, error) {
	return _SequencerInboxStub.Contract.Reader4844(&_SequencerInboxStub.CallOpts)
}

// Reader4844 is a free data retrieval call binding the contract method 0x8d910dde.
//
// Solidity: function reader4844() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) Reader4844() (common.Address, error) {
	return _SequencerInboxStub.Contract.Reader4844(&_SequencerInboxStub.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubSession) Rollup() (common.Address, error) {
	return _SequencerInboxStub.Contract.Rollup(&_SequencerInboxStub.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) Rollup() (common.Address, error) {
	return _SequencerInboxStub.Contract.Rollup(&_SequencerInboxStub.CallOpts)
}

// TotalDelayedMessagesRead is a free data retrieval call binding the contract method 0x7fa3a40e.
//
// Solidity: function totalDelayedMessagesRead() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCaller) TotalDelayedMessagesRead(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SequencerInboxStub.contract.Call(opts, &out, "totalDelayedMessagesRead")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDelayedMessagesRead is a free data retrieval call binding the contract method 0x7fa3a40e.
//
// Solidity: function totalDelayedMessagesRead() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubSession) TotalDelayedMessagesRead() (*big.Int, error) {
	return _SequencerInboxStub.Contract.TotalDelayedMessagesRead(&_SequencerInboxStub.CallOpts)
}

// TotalDelayedMessagesRead is a free data retrieval call binding the contract method 0x7fa3a40e.
//
// Solidity: function totalDelayedMessagesRead() view returns(uint256)
func (_SequencerInboxStub *SequencerInboxStubCallerSession) TotalDelayedMessagesRead() (*big.Int, error) {
	return _SequencerInboxStub.Contract.TotalDelayedMessagesRead(&_SequencerInboxStub.CallOpts)
}

// AddInitMessage is a paid mutator transaction binding the contract method 0x6633ae85.
//
// Solidity: function addInitMessage(uint256 chainId) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddInitMessage(opts *bind.TransactOpts, chainId *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addInitMessage", chainId)
}

// AddInitMessage is a paid mutator transaction binding the contract method 0x6633ae85.
//
// Solidity: function addInitMessage(uint256 chainId) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddInitMessage(chainId *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddInitMessage(&_SequencerInboxStub.TransactOpts, chainId)
}

// AddInitMessage is a paid mutator transaction binding the contract method 0x6633ae85.
//
// Solidity: function addInitMessage(uint256 chainId) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddInitMessage(chainId *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddInitMessage(&_SequencerInboxStub.TransactOpts, chainId)
}

// AddSequencerL2Batch99020501 is a paid mutator transaction binding the contract method 0x99020501.
//
// Solidity: function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddSequencerL2Batch99020501(opts *bind.TransactOpts, sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addSequencerL2Batch", sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2Batch99020501 is a paid mutator transaction binding the contract method 0x99020501.
//
// Solidity: function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2Batch99020501(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2Batch99020501(&_SequencerInboxStub.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2Batch99020501 is a paid mutator transaction binding the contract method 0x99020501.
//
// Solidity: function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddSequencerL2Batch99020501(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2Batch99020501(&_SequencerInboxStub.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2Batche0bc9729 is a paid mutator transaction binding the contract method 0xe0bc9729.
//
// Solidity: function addSequencerL2Batch(uint256 , bytes , uint256 , address gasRefunder, uint256 , uint256 ) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddSequencerL2Batche0bc9729(opts *bind.TransactOpts, arg0 *big.Int, arg1 []byte, arg2 *big.Int, gasRefunder common.Address, arg4 *big.Int, arg5 *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addSequencerL2Batch0", arg0, arg1, arg2, gasRefunder, arg4, arg5)
}

// AddSequencerL2Batche0bc9729 is a paid mutator transaction binding the contract method 0xe0bc9729.
//
// Solidity: function addSequencerL2Batch(uint256 , bytes , uint256 , address gasRefunder, uint256 , uint256 ) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2Batche0bc9729(arg0 *big.Int, arg1 []byte, arg2 *big.Int, gasRefunder common.Address, arg4 *big.Int, arg5 *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2Batche0bc9729(&_SequencerInboxStub.TransactOpts, arg0, arg1, arg2, gasRefunder, arg4, arg5)
}

// AddSequencerL2Batche0bc9729 is a paid mutator transaction binding the contract method 0xe0bc9729.
//
// Solidity: function addSequencerL2Batch(uint256 , bytes , uint256 , address gasRefunder, uint256 , uint256 ) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddSequencerL2Batche0bc9729(arg0 *big.Int, arg1 []byte, arg2 *big.Int, gasRefunder common.Address, arg4 *big.Int, arg5 *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2Batche0bc9729(&_SequencerInboxStub.TransactOpts, arg0, arg1, arg2, gasRefunder, arg4, arg5)
}

// AddSequencerL2BatchFromBlobs3e5aa082 is a paid mutator transaction binding the contract method 0x3e5aa082.
//
// Solidity: function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddSequencerL2BatchFromBlobs3e5aa082(opts *bind.TransactOpts, sequenceNumber *big.Int, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addSequencerL2BatchFromBlobs", sequenceNumber, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2BatchFromBlobs3e5aa082 is a paid mutator transaction binding the contract method 0x3e5aa082.
//
// Solidity: function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2BatchFromBlobs3e5aa082(sequenceNumber *big.Int, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromBlobs3e5aa082(&_SequencerInboxStub.TransactOpts, sequenceNumber, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2BatchFromBlobs3e5aa082 is a paid mutator transaction binding the contract method 0x3e5aa082.
//
// Solidity: function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddSequencerL2BatchFromBlobs3e5aa082(sequenceNumber *big.Int, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromBlobs3e5aa082(&_SequencerInboxStub.TransactOpts, sequenceNumber, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2BatchFromBlobse229aec8 is a paid mutator transaction binding the contract method 0xe229aec8.
//
// Solidity: function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddSequencerL2BatchFromBlobse229aec8(opts *bind.TransactOpts, sequenceNumber *big.Int, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addSequencerL2BatchFromBlobs0", sequenceNumber, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2BatchFromBlobse229aec8 is a paid mutator transaction binding the contract method 0xe229aec8.
//
// Solidity: function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2BatchFromBlobse229aec8(sequenceNumber *big.Int, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromBlobse229aec8(&_SequencerInboxStub.TransactOpts, sequenceNumber, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2BatchFromBlobse229aec8 is a paid mutator transaction binding the contract method 0xe229aec8.
//
// Solidity: function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddSequencerL2BatchFromBlobse229aec8(sequenceNumber *big.Int, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromBlobse229aec8(&_SequencerInboxStub.TransactOpts, sequenceNumber, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2BatchFromOrigin37501551 is a paid mutator transaction binding the contract method 0x37501551.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddSequencerL2BatchFromOrigin37501551(opts *bind.TransactOpts, sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addSequencerL2BatchFromOrigin", sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2BatchFromOrigin37501551 is a paid mutator transaction binding the contract method 0x37501551.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2BatchFromOrigin37501551(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromOrigin37501551(&_SequencerInboxStub.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2BatchFromOrigin37501551 is a paid mutator transaction binding the contract method 0x37501551.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddSequencerL2BatchFromOrigin37501551(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int, espressoMetadata []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromOrigin37501551(&_SequencerInboxStub.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount, espressoMetadata)
}

// AddSequencerL2BatchFromOrigin8f111f3c is a paid mutator transaction binding the contract method 0x8f111f3c.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) AddSequencerL2BatchFromOrigin8f111f3c(opts *bind.TransactOpts, sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "addSequencerL2BatchFromOrigin1", sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2BatchFromOrigin8f111f3c is a paid mutator transaction binding the contract method 0x8f111f3c.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) AddSequencerL2BatchFromOrigin8f111f3c(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromOrigin8f111f3c(&_SequencerInboxStub.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// AddSequencerL2BatchFromOrigin8f111f3c is a paid mutator transaction binding the contract method 0x8f111f3c.
//
// Solidity: function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) AddSequencerL2BatchFromOrigin8f111f3c(sequenceNumber *big.Int, data []byte, afterDelayedMessagesRead *big.Int, gasRefunder common.Address, prevMessageCount *big.Int, newMessageCount *big.Int) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.AddSequencerL2BatchFromOrigin8f111f3c(&_SequencerInboxStub.TransactOpts, sequenceNumber, data, afterDelayedMessagesRead, gasRefunder, prevMessageCount, newMessageCount)
}

// ForceInclusion is a paid mutator transaction binding the contract method 0xf1981578.
//
// Solidity: function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) ForceInclusion(opts *bind.TransactOpts, _totalDelayedMessagesRead *big.Int, kind uint8, l1BlockAndTime [2]uint64, baseFeeL1 *big.Int, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "forceInclusion", _totalDelayedMessagesRead, kind, l1BlockAndTime, baseFeeL1, sender, messageDataHash)
}

// ForceInclusion is a paid mutator transaction binding the contract method 0xf1981578.
//
// Solidity: function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) ForceInclusion(_totalDelayedMessagesRead *big.Int, kind uint8, l1BlockAndTime [2]uint64, baseFeeL1 *big.Int, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.ForceInclusion(&_SequencerInboxStub.TransactOpts, _totalDelayedMessagesRead, kind, l1BlockAndTime, baseFeeL1, sender, messageDataHash)
}

// ForceInclusion is a paid mutator transaction binding the contract method 0xf1981578.
//
// Solidity: function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) ForceInclusion(_totalDelayedMessagesRead *big.Int, kind uint8, l1BlockAndTime [2]uint64, baseFeeL1 *big.Int, sender common.Address, messageDataHash [32]byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.ForceInclusion(&_SequencerInboxStub.TransactOpts, _totalDelayedMessagesRead, kind, l1BlockAndTime, baseFeeL1, sender, messageDataHash)
}

// Initialize1f7a92b2 is a paid mutator transaction binding the contract method 0x1f7a92b2.
//
// Solidity: function initialize(address bridge_, (uint256,uint256,uint256,uint256) maxTimeVariation_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) Initialize1f7a92b2(opts *bind.TransactOpts, bridge_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "initialize", bridge_, maxTimeVariation_)
}

// Initialize1f7a92b2 is a paid mutator transaction binding the contract method 0x1f7a92b2.
//
// Solidity: function initialize(address bridge_, (uint256,uint256,uint256,uint256) maxTimeVariation_) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) Initialize1f7a92b2(bridge_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.Initialize1f7a92b2(&_SequencerInboxStub.TransactOpts, bridge_, maxTimeVariation_)
}

// Initialize1f7a92b2 is a paid mutator transaction binding the contract method 0x1f7a92b2.
//
// Solidity: function initialize(address bridge_, (uint256,uint256,uint256,uint256) maxTimeVariation_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) Initialize1f7a92b2(bridge_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.Initialize1f7a92b2(&_SequencerInboxStub.TransactOpts, bridge_, maxTimeVariation_)
}

// Initializeaf19ad23 is a paid mutator transaction binding the contract method 0xaf19ad23.
//
// Solidity: function initialize(address bridge_, (uint256,uint256,uint256,uint256) maxTimeVariation_, address _espressoTEEVerifier) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) Initializeaf19ad23(opts *bind.TransactOpts, bridge_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation, _espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "initialize0", bridge_, maxTimeVariation_, _espressoTEEVerifier)
}

// Initializeaf19ad23 is a paid mutator transaction binding the contract method 0xaf19ad23.
//
// Solidity: function initialize(address bridge_, (uint256,uint256,uint256,uint256) maxTimeVariation_, address _espressoTEEVerifier) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) Initializeaf19ad23(bridge_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation, _espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.Initializeaf19ad23(&_SequencerInboxStub.TransactOpts, bridge_, maxTimeVariation_, _espressoTEEVerifier)
}

// Initializeaf19ad23 is a paid mutator transaction binding the contract method 0xaf19ad23.
//
// Solidity: function initialize(address bridge_, (uint256,uint256,uint256,uint256) maxTimeVariation_, address _espressoTEEVerifier) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) Initializeaf19ad23(bridge_ common.Address, maxTimeVariation_ ISequencerInboxMaxTimeVariation, _espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.Initializeaf19ad23(&_SequencerInboxStub.TransactOpts, bridge_, maxTimeVariation_, _espressoTEEVerifier)
}

// InvalidateKeysetHash is a paid mutator transaction binding the contract method 0x84420860.
//
// Solidity: function invalidateKeysetHash(bytes32 ksHash) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) InvalidateKeysetHash(opts *bind.TransactOpts, ksHash [32]byte) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "invalidateKeysetHash", ksHash)
}

// InvalidateKeysetHash is a paid mutator transaction binding the contract method 0x84420860.
//
// Solidity: function invalidateKeysetHash(bytes32 ksHash) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) InvalidateKeysetHash(ksHash [32]byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.InvalidateKeysetHash(&_SequencerInboxStub.TransactOpts, ksHash)
}

// InvalidateKeysetHash is a paid mutator transaction binding the contract method 0x84420860.
//
// Solidity: function invalidateKeysetHash(bytes32 ksHash) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) InvalidateKeysetHash(ksHash [32]byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.InvalidateKeysetHash(&_SequencerInboxStub.TransactOpts, ksHash)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) PostUpgradeInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "postUpgradeInit")
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_SequencerInboxStub *SequencerInboxStubSession) PostUpgradeInit() (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.PostUpgradeInit(&_SequencerInboxStub.TransactOpts)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) PostUpgradeInit() (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.PostUpgradeInit(&_SequencerInboxStub.TransactOpts)
}

// RemoveDelayAfterFork is a paid mutator transaction binding the contract method 0x96cc5c78.
//
// Solidity: function removeDelayAfterFork() returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) RemoveDelayAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "removeDelayAfterFork")
}

// RemoveDelayAfterFork is a paid mutator transaction binding the contract method 0x96cc5c78.
//
// Solidity: function removeDelayAfterFork() returns()
func (_SequencerInboxStub *SequencerInboxStubSession) RemoveDelayAfterFork() (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.RemoveDelayAfterFork(&_SequencerInboxStub.TransactOpts)
}

// RemoveDelayAfterFork is a paid mutator transaction binding the contract method 0x96cc5c78.
//
// Solidity: function removeDelayAfterFork() returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) RemoveDelayAfterFork() (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.RemoveDelayAfterFork(&_SequencerInboxStub.TransactOpts)
}

// SetBatchPosterManager is a paid mutator transaction binding the contract method 0x1ff64790.
//
// Solidity: function setBatchPosterManager(address newBatchPosterManager) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) SetBatchPosterManager(opts *bind.TransactOpts, newBatchPosterManager common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "setBatchPosterManager", newBatchPosterManager)
}

// SetBatchPosterManager is a paid mutator transaction binding the contract method 0x1ff64790.
//
// Solidity: function setBatchPosterManager(address newBatchPosterManager) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) SetBatchPosterManager(newBatchPosterManager common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetBatchPosterManager(&_SequencerInboxStub.TransactOpts, newBatchPosterManager)
}

// SetBatchPosterManager is a paid mutator transaction binding the contract method 0x1ff64790.
//
// Solidity: function setBatchPosterManager(address newBatchPosterManager) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) SetBatchPosterManager(newBatchPosterManager common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetBatchPosterManager(&_SequencerInboxStub.TransactOpts, newBatchPosterManager)
}

// SetEspressoTEEVerifier is a paid mutator transaction binding the contract method 0xb9fe9818.
//
// Solidity: function setEspressoTEEVerifier(address _espressoTEEVerifier) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) SetEspressoTEEVerifier(opts *bind.TransactOpts, _espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "setEspressoTEEVerifier", _espressoTEEVerifier)
}

// SetEspressoTEEVerifier is a paid mutator transaction binding the contract method 0xb9fe9818.
//
// Solidity: function setEspressoTEEVerifier(address _espressoTEEVerifier) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) SetEspressoTEEVerifier(_espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetEspressoTEEVerifier(&_SequencerInboxStub.TransactOpts, _espressoTEEVerifier)
}

// SetEspressoTEEVerifier is a paid mutator transaction binding the contract method 0xb9fe9818.
//
// Solidity: function setEspressoTEEVerifier(address _espressoTEEVerifier) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) SetEspressoTEEVerifier(_espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetEspressoTEEVerifier(&_SequencerInboxStub.TransactOpts, _espressoTEEVerifier)
}

// SetIsBatchPoster is a paid mutator transaction binding the contract method 0x6e7df3e7.
//
// Solidity: function setIsBatchPoster(address addr, bool isBatchPoster_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) SetIsBatchPoster(opts *bind.TransactOpts, addr common.Address, isBatchPoster_ bool) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "setIsBatchPoster", addr, isBatchPoster_)
}

// SetIsBatchPoster is a paid mutator transaction binding the contract method 0x6e7df3e7.
//
// Solidity: function setIsBatchPoster(address addr, bool isBatchPoster_) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) SetIsBatchPoster(addr common.Address, isBatchPoster_ bool) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetIsBatchPoster(&_SequencerInboxStub.TransactOpts, addr, isBatchPoster_)
}

// SetIsBatchPoster is a paid mutator transaction binding the contract method 0x6e7df3e7.
//
// Solidity: function setIsBatchPoster(address addr, bool isBatchPoster_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) SetIsBatchPoster(addr common.Address, isBatchPoster_ bool) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetIsBatchPoster(&_SequencerInboxStub.TransactOpts, addr, isBatchPoster_)
}

// SetIsSequencer is a paid mutator transaction binding the contract method 0x1f956632.
//
// Solidity: function setIsSequencer(address addr, bool isSequencer_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) SetIsSequencer(opts *bind.TransactOpts, addr common.Address, isSequencer_ bool) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "setIsSequencer", addr, isSequencer_)
}

// SetIsSequencer is a paid mutator transaction binding the contract method 0x1f956632.
//
// Solidity: function setIsSequencer(address addr, bool isSequencer_) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) SetIsSequencer(addr common.Address, isSequencer_ bool) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetIsSequencer(&_SequencerInboxStub.TransactOpts, addr, isSequencer_)
}

// SetIsSequencer is a paid mutator transaction binding the contract method 0x1f956632.
//
// Solidity: function setIsSequencer(address addr, bool isSequencer_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) SetIsSequencer(addr common.Address, isSequencer_ bool) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetIsSequencer(&_SequencerInboxStub.TransactOpts, addr, isSequencer_)
}

// SetMaxTimeVariation is a paid mutator transaction binding the contract method 0xb31761f8.
//
// Solidity: function setMaxTimeVariation((uint256,uint256,uint256,uint256) maxTimeVariation_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) SetMaxTimeVariation(opts *bind.TransactOpts, maxTimeVariation_ ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "setMaxTimeVariation", maxTimeVariation_)
}

// SetMaxTimeVariation is a paid mutator transaction binding the contract method 0xb31761f8.
//
// Solidity: function setMaxTimeVariation((uint256,uint256,uint256,uint256) maxTimeVariation_) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) SetMaxTimeVariation(maxTimeVariation_ ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetMaxTimeVariation(&_SequencerInboxStub.TransactOpts, maxTimeVariation_)
}

// SetMaxTimeVariation is a paid mutator transaction binding the contract method 0xb31761f8.
//
// Solidity: function setMaxTimeVariation((uint256,uint256,uint256,uint256) maxTimeVariation_) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) SetMaxTimeVariation(maxTimeVariation_ ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetMaxTimeVariation(&_SequencerInboxStub.TransactOpts, maxTimeVariation_)
}

// SetValidKeyset is a paid mutator transaction binding the contract method 0xd1ce8da8.
//
// Solidity: function setValidKeyset(bytes keysetBytes) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) SetValidKeyset(opts *bind.TransactOpts, keysetBytes []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "setValidKeyset", keysetBytes)
}

// SetValidKeyset is a paid mutator transaction binding the contract method 0xd1ce8da8.
//
// Solidity: function setValidKeyset(bytes keysetBytes) returns()
func (_SequencerInboxStub *SequencerInboxStubSession) SetValidKeyset(keysetBytes []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetValidKeyset(&_SequencerInboxStub.TransactOpts, keysetBytes)
}

// SetValidKeyset is a paid mutator transaction binding the contract method 0xd1ce8da8.
//
// Solidity: function setValidKeyset(bytes keysetBytes) returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) SetValidKeyset(keysetBytes []byte) (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.SetValidKeyset(&_SequencerInboxStub.TransactOpts, keysetBytes)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_SequencerInboxStub *SequencerInboxStubTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SequencerInboxStub.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_SequencerInboxStub *SequencerInboxStubSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.UpdateRollupAddress(&_SequencerInboxStub.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_SequencerInboxStub *SequencerInboxStubTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _SequencerInboxStub.Contract.UpdateRollupAddress(&_SequencerInboxStub.TransactOpts)
}

// SequencerInboxStubInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the SequencerInboxStub contract.
type SequencerInboxStubInboxMessageDeliveredIterator struct {
	Event *SequencerInboxStubInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubInboxMessageDelivered represents a InboxMessageDelivered event raised by the SequencerInboxStub contract.
type SequencerInboxStubInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*SequencerInboxStubInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubInboxMessageDeliveredIterator{contract: _SequencerInboxStub.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubInboxMessageDelivered)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseInboxMessageDelivered(log types.Log) (*SequencerInboxStubInboxMessageDelivered, error) {
	event := new(SequencerInboxStubInboxMessageDelivered)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the SequencerInboxStub contract.
type SequencerInboxStubInboxMessageDeliveredFromOriginIterator struct {
	Event *SequencerInboxStubInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the SequencerInboxStub contract.
type SequencerInboxStubInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*SequencerInboxStubInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubInboxMessageDeliveredFromOriginIterator{contract: _SequencerInboxStub.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubInboxMessageDeliveredFromOrigin)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*SequencerInboxStubInboxMessageDeliveredFromOrigin, error) {
	event := new(SequencerInboxStubInboxMessageDeliveredFromOrigin)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubInvalidateKeysetIterator is returned from FilterInvalidateKeyset and is used to iterate over the raw logs and unpacked data for InvalidateKeyset events raised by the SequencerInboxStub contract.
type SequencerInboxStubInvalidateKeysetIterator struct {
	Event *SequencerInboxStubInvalidateKeyset // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubInvalidateKeysetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubInvalidateKeyset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubInvalidateKeyset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubInvalidateKeysetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubInvalidateKeysetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubInvalidateKeyset represents a InvalidateKeyset event raised by the SequencerInboxStub contract.
type SequencerInboxStubInvalidateKeyset struct {
	KeysetHash [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInvalidateKeyset is a free log retrieval operation binding the contract event 0x5cb4218b272fd214168ac43e90fb4d05d6c36f0b17ffb4c2dd07c234d744eb2a.
//
// Solidity: event InvalidateKeyset(bytes32 indexed keysetHash)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterInvalidateKeyset(opts *bind.FilterOpts, keysetHash [][32]byte) (*SequencerInboxStubInvalidateKeysetIterator, error) {

	var keysetHashRule []interface{}
	for _, keysetHashItem := range keysetHash {
		keysetHashRule = append(keysetHashRule, keysetHashItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "InvalidateKeyset", keysetHashRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubInvalidateKeysetIterator{contract: _SequencerInboxStub.contract, event: "InvalidateKeyset", logs: logs, sub: sub}, nil
}

// WatchInvalidateKeyset is a free log subscription operation binding the contract event 0x5cb4218b272fd214168ac43e90fb4d05d6c36f0b17ffb4c2dd07c234d744eb2a.
//
// Solidity: event InvalidateKeyset(bytes32 indexed keysetHash)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchInvalidateKeyset(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubInvalidateKeyset, keysetHash [][32]byte) (event.Subscription, error) {

	var keysetHashRule []interface{}
	for _, keysetHashItem := range keysetHash {
		keysetHashRule = append(keysetHashRule, keysetHashItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "InvalidateKeyset", keysetHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubInvalidateKeyset)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "InvalidateKeyset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidateKeyset is a log parse operation binding the contract event 0x5cb4218b272fd214168ac43e90fb4d05d6c36f0b17ffb4c2dd07c234d744eb2a.
//
// Solidity: event InvalidateKeyset(bytes32 indexed keysetHash)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseInvalidateKeyset(log types.Log) (*SequencerInboxStubInvalidateKeyset, error) {
	event := new(SequencerInboxStubInvalidateKeyset)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "InvalidateKeyset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the SequencerInboxStub contract.
type SequencerInboxStubOwnerFunctionCalledIterator struct {
	Event *SequencerInboxStubOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the SequencerInboxStub contract.
type SequencerInboxStubOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*SequencerInboxStubOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubOwnerFunctionCalledIterator{contract: _SequencerInboxStub.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubOwnerFunctionCalled)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseOwnerFunctionCalled(log types.Log) (*SequencerInboxStubOwnerFunctionCalled, error) {
	event := new(SequencerInboxStubOwnerFunctionCalled)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubSequencerBatchDataIterator is returned from FilterSequencerBatchData and is used to iterate over the raw logs and unpacked data for SequencerBatchData events raised by the SequencerInboxStub contract.
type SequencerInboxStubSequencerBatchDataIterator struct {
	Event *SequencerInboxStubSequencerBatchData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubSequencerBatchDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubSequencerBatchData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubSequencerBatchData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubSequencerBatchDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubSequencerBatchDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubSequencerBatchData represents a SequencerBatchData event raised by the SequencerInboxStub contract.
type SequencerInboxStubSequencerBatchData struct {
	BatchSequenceNumber *big.Int
	Data                []byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterSequencerBatchData is a free log retrieval operation binding the contract event 0xfe325ca1efe4c5c1062c981c3ee74b781debe4ea9440306a96d2a55759c66c20.
//
// Solidity: event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterSequencerBatchData(opts *bind.FilterOpts, batchSequenceNumber []*big.Int) (*SequencerInboxStubSequencerBatchDataIterator, error) {

	var batchSequenceNumberRule []interface{}
	for _, batchSequenceNumberItem := range batchSequenceNumber {
		batchSequenceNumberRule = append(batchSequenceNumberRule, batchSequenceNumberItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "SequencerBatchData", batchSequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubSequencerBatchDataIterator{contract: _SequencerInboxStub.contract, event: "SequencerBatchData", logs: logs, sub: sub}, nil
}

// WatchSequencerBatchData is a free log subscription operation binding the contract event 0xfe325ca1efe4c5c1062c981c3ee74b781debe4ea9440306a96d2a55759c66c20.
//
// Solidity: event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchSequencerBatchData(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubSequencerBatchData, batchSequenceNumber []*big.Int) (event.Subscription, error) {

	var batchSequenceNumberRule []interface{}
	for _, batchSequenceNumberItem := range batchSequenceNumber {
		batchSequenceNumberRule = append(batchSequenceNumberRule, batchSequenceNumberItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "SequencerBatchData", batchSequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubSequencerBatchData)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "SequencerBatchData", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerBatchData is a log parse operation binding the contract event 0xfe325ca1efe4c5c1062c981c3ee74b781debe4ea9440306a96d2a55759c66c20.
//
// Solidity: event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseSequencerBatchData(log types.Log) (*SequencerInboxStubSequencerBatchData, error) {
	event := new(SequencerInboxStubSequencerBatchData)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "SequencerBatchData", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubSequencerBatchDeliveredIterator is returned from FilterSequencerBatchDelivered and is used to iterate over the raw logs and unpacked data for SequencerBatchDelivered events raised by the SequencerInboxStub contract.
type SequencerInboxStubSequencerBatchDeliveredIterator struct {
	Event *SequencerInboxStubSequencerBatchDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubSequencerBatchDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubSequencerBatchDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubSequencerBatchDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubSequencerBatchDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubSequencerBatchDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubSequencerBatchDelivered represents a SequencerBatchDelivered event raised by the SequencerInboxStub contract.
type SequencerInboxStubSequencerBatchDelivered struct {
	BatchSequenceNumber      *big.Int
	BeforeAcc                [32]byte
	AfterAcc                 [32]byte
	DelayedAcc               [32]byte
	AfterDelayedMessagesRead *big.Int
	TimeBounds               IBridgeTimeBounds
	DataLocation             uint8
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterSequencerBatchDelivered is a free log retrieval operation binding the contract event 0x7394f4a19a13c7b92b5bb71033245305946ef78452f7b4986ac1390b5df4ebd7.
//
// Solidity: event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, (uint64,uint64,uint64,uint64) timeBounds, uint8 dataLocation)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterSequencerBatchDelivered(opts *bind.FilterOpts, batchSequenceNumber []*big.Int, beforeAcc [][32]byte, afterAcc [][32]byte) (*SequencerInboxStubSequencerBatchDeliveredIterator, error) {

	var batchSequenceNumberRule []interface{}
	for _, batchSequenceNumberItem := range batchSequenceNumber {
		batchSequenceNumberRule = append(batchSequenceNumberRule, batchSequenceNumberItem)
	}
	var beforeAccRule []interface{}
	for _, beforeAccItem := range beforeAcc {
		beforeAccRule = append(beforeAccRule, beforeAccItem)
	}
	var afterAccRule []interface{}
	for _, afterAccItem := range afterAcc {
		afterAccRule = append(afterAccRule, afterAccItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "SequencerBatchDelivered", batchSequenceNumberRule, beforeAccRule, afterAccRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubSequencerBatchDeliveredIterator{contract: _SequencerInboxStub.contract, event: "SequencerBatchDelivered", logs: logs, sub: sub}, nil
}

// WatchSequencerBatchDelivered is a free log subscription operation binding the contract event 0x7394f4a19a13c7b92b5bb71033245305946ef78452f7b4986ac1390b5df4ebd7.
//
// Solidity: event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, (uint64,uint64,uint64,uint64) timeBounds, uint8 dataLocation)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchSequencerBatchDelivered(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubSequencerBatchDelivered, batchSequenceNumber []*big.Int, beforeAcc [][32]byte, afterAcc [][32]byte) (event.Subscription, error) {

	var batchSequenceNumberRule []interface{}
	for _, batchSequenceNumberItem := range batchSequenceNumber {
		batchSequenceNumberRule = append(batchSequenceNumberRule, batchSequenceNumberItem)
	}
	var beforeAccRule []interface{}
	for _, beforeAccItem := range beforeAcc {
		beforeAccRule = append(beforeAccRule, beforeAccItem)
	}
	var afterAccRule []interface{}
	for _, afterAccItem := range afterAcc {
		afterAccRule = append(afterAccRule, afterAccItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "SequencerBatchDelivered", batchSequenceNumberRule, beforeAccRule, afterAccRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubSequencerBatchDelivered)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "SequencerBatchDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerBatchDelivered is a log parse operation binding the contract event 0x7394f4a19a13c7b92b5bb71033245305946ef78452f7b4986ac1390b5df4ebd7.
//
// Solidity: event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, (uint64,uint64,uint64,uint64) timeBounds, uint8 dataLocation)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseSequencerBatchDelivered(log types.Log) (*SequencerInboxStubSequencerBatchDelivered, error) {
	event := new(SequencerInboxStubSequencerBatchDelivered)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "SequencerBatchDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubSetValidKeysetIterator is returned from FilterSetValidKeyset and is used to iterate over the raw logs and unpacked data for SetValidKeyset events raised by the SequencerInboxStub contract.
type SequencerInboxStubSetValidKeysetIterator struct {
	Event *SequencerInboxStubSetValidKeyset // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubSetValidKeysetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubSetValidKeyset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubSetValidKeyset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubSetValidKeysetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubSetValidKeysetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubSetValidKeyset represents a SetValidKeyset event raised by the SequencerInboxStub contract.
type SequencerInboxStubSetValidKeyset struct {
	KeysetHash  [32]byte
	KeysetBytes []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetValidKeyset is a free log retrieval operation binding the contract event 0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722.
//
// Solidity: event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterSetValidKeyset(opts *bind.FilterOpts, keysetHash [][32]byte) (*SequencerInboxStubSetValidKeysetIterator, error) {

	var keysetHashRule []interface{}
	for _, keysetHashItem := range keysetHash {
		keysetHashRule = append(keysetHashRule, keysetHashItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "SetValidKeyset", keysetHashRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubSetValidKeysetIterator{contract: _SequencerInboxStub.contract, event: "SetValidKeyset", logs: logs, sub: sub}, nil
}

// WatchSetValidKeyset is a free log subscription operation binding the contract event 0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722.
//
// Solidity: event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchSetValidKeyset(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubSetValidKeyset, keysetHash [][32]byte) (event.Subscription, error) {

	var keysetHashRule []interface{}
	for _, keysetHashItem := range keysetHash {
		keysetHashRule = append(keysetHashRule, keysetHashItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "SetValidKeyset", keysetHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubSetValidKeyset)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "SetValidKeyset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetValidKeyset is a log parse operation binding the contract event 0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722.
//
// Solidity: event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseSetValidKeyset(log types.Log) (*SequencerInboxStubSetValidKeyset, error) {
	event := new(SequencerInboxStubSetValidKeyset)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "SetValidKeyset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SequencerInboxStubTEESignatureVerifiedIterator is returned from FilterTEESignatureVerified and is used to iterate over the raw logs and unpacked data for TEESignatureVerified events raised by the SequencerInboxStub contract.
type SequencerInboxStubTEESignatureVerifiedIterator struct {
	Event *SequencerInboxStubTEESignatureVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SequencerInboxStubTEESignatureVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SequencerInboxStubTEESignatureVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SequencerInboxStubTEESignatureVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SequencerInboxStubTEESignatureVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SequencerInboxStubTEESignatureVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SequencerInboxStubTEESignatureVerified represents a TEESignatureVerified event raised by the SequencerInboxStub contract.
type SequencerInboxStubTEESignatureVerified struct {
	SequenceNumber *big.Int
	HotshotHeight  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTEESignatureVerified is a free log retrieval operation binding the contract event 0x28f44d93f67b701b026c897cf7a84a0b5085ef54d0427d9a4ae881495a01f7ef.
//
// Solidity: event TEESignatureVerified(uint256 indexed sequenceNumber, uint256 indexed hotshotHeight)
func (_SequencerInboxStub *SequencerInboxStubFilterer) FilterTEESignatureVerified(opts *bind.FilterOpts, sequenceNumber []*big.Int, hotshotHeight []*big.Int) (*SequencerInboxStubTEESignatureVerifiedIterator, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}
	var hotshotHeightRule []interface{}
	for _, hotshotHeightItem := range hotshotHeight {
		hotshotHeightRule = append(hotshotHeightRule, hotshotHeightItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.FilterLogs(opts, "TEESignatureVerified", sequenceNumberRule, hotshotHeightRule)
	if err != nil {
		return nil, err
	}
	return &SequencerInboxStubTEESignatureVerifiedIterator{contract: _SequencerInboxStub.contract, event: "TEESignatureVerified", logs: logs, sub: sub}, nil
}

// WatchTEESignatureVerified is a free log subscription operation binding the contract event 0x28f44d93f67b701b026c897cf7a84a0b5085ef54d0427d9a4ae881495a01f7ef.
//
// Solidity: event TEESignatureVerified(uint256 indexed sequenceNumber, uint256 indexed hotshotHeight)
func (_SequencerInboxStub *SequencerInboxStubFilterer) WatchTEESignatureVerified(opts *bind.WatchOpts, sink chan<- *SequencerInboxStubTEESignatureVerified, sequenceNumber []*big.Int, hotshotHeight []*big.Int) (event.Subscription, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}
	var hotshotHeightRule []interface{}
	for _, hotshotHeightItem := range hotshotHeight {
		hotshotHeightRule = append(hotshotHeightRule, hotshotHeightItem)
	}

	logs, sub, err := _SequencerInboxStub.contract.WatchLogs(opts, "TEESignatureVerified", sequenceNumberRule, hotshotHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SequencerInboxStubTEESignatureVerified)
				if err := _SequencerInboxStub.contract.UnpackLog(event, "TEESignatureVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTEESignatureVerified is a log parse operation binding the contract event 0x28f44d93f67b701b026c897cf7a84a0b5085ef54d0427d9a4ae881495a01f7ef.
//
// Solidity: event TEESignatureVerified(uint256 indexed sequenceNumber, uint256 indexed hotshotHeight)
func (_SequencerInboxStub *SequencerInboxStubFilterer) ParseTEESignatureVerified(log types.Log) (*SequencerInboxStubTEESignatureVerified, error) {
	event := new(SequencerInboxStubTEESignatureVerified)
	if err := _SequencerInboxStub.contract.UnpackLog(event, "TEESignatureVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleMetaData contains all meta data concerning the Simple contract.
var SimpleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"CounterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"}],\"name\":\"LogAndIncrementCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NullEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"RedeemedEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkBlockHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useTopLevel\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"directCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"staticCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"delegateCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callcodeCase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callCase\",\"type\":\"bool\"}],\"name\":\"checkCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"checkGasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useTopLevel\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expected\",\"type\":\"bool\"}],\"name\":\"checkIsTopLevelOrWasAliased\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNullEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementEmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"logAndIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noop\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pleaseRevert\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"batchData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"numberToPost\",\"type\":\"uint256\"}],\"name\":\"postManyBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeDifficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610d88908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806305795f73146101125780630e8c389f1461010d57806312e05dd11461010857806319cae462146101085780631a2f8a921461010357806344c25fba146100fe5780635677c11e146100f95780635dfc2e4a146100f457806361bc221a146100ef5780638a390877146100ea5780639ff5ccac146100e5578063b1948fc3146100e0578063b226a964146100db578063cff36f2d146100d6578063d09de08a146100d15763ded5ecad146100cc57600080fd5b610894565b610859565b610842565b610809565b610784565b6106b0565b610645565b61061c565b610609565b610591565b61037d565b6102fc565b6102cd565b610172565b610127565b600091031261012257565b600080fd5b346101225760003660031901126101225760405162461bcd60e51b8152602060048201526012602482015271534f4c49444954595f524556455254494e4760701b6044820152606490fd5b34610122576000806003193601126102ca5761018f32331461092f565b60405163175a260b60e01b8152602090818160048160645afa8015610298576101bf91849161029d575b50610993565b81546101f9906101d7906001600160401b03166109e3565b600080546001600160401b0319166001600160401b0392909216919091179055565b60405163de4ba2b360e01b8152908082600481606e5afa8015610298577f773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c31594139261026592859261026b575b5050604080513381526001600160a01b03909216602083015290918291820190565b0390a180f35b61028a9250803d10610291575b6102828183610746565b8101906109fb565b3880610243565b503d610278565b610987565b6102bd9150833d85116102c3575b6102b58183610746565b81019061096f565b386101b9565b503d6102ab565b80fd5b34610122576000366003190112610122576020600154604051908152f35b6001600160a01b0381160361012257565b3461012257604036600319011261012257600435610319816102eb565b6024356001600160401b0380821161012257366023830112156101225781600401359081116101225736602482840101116101225761036f92602461035f930190610a40565b6040519081529081906020820190565b0390f35b8015150361012257565b346101225760c03660031901126101225760043561039a81610373565b602435906103a782610373565b6044356103b381610373565b6064356103bf81610373565b608435916103cc83610373565b60a435946103d986610373565b84156105565760405163022f589360e21b81529060208260048160645afa9081156102985761041692600092610535575b50151590151514610a7e565b303b15610122576104419460405163ded5ecad60e01b9283825281806000998a938a60048401610abe565b0381305afa94851561029857610519966104e08980610486946104ad82808b819e9d6105059b839f61051c575b506040519a8b91602083019384528b60248401610abe565b039961049a601f199b8c8101835282610746565b5190305af46104a7610a10565b50610ad1565b6040516104d5816104c960208201948d86528960248401610abe565b03888101835282610746565b519082305af2610b14565b6104f96040519485926020840197885260248401610abe565b03908101835282610746565b519082305af1610513610a10565b50610b52565b80f35b8061052961052f9261072e565b80610117565b3861046e565b61054f91925060203d6020116102c3576102b58183610746565b903861040a565b60405163175a260b60e01b81529060208260048160645afa9081156102985761058c926000926105355750151590151514610a7e565b610416565b3461012257600036600319011261012257600019430143811161060457600119430143811161060457409040146105cd57604051438152602090f35b60405162461bcd60e51b815260206004820152600f60248201526e0a6829a8abe84989e8696be9082a69608b1b6044820152606490fd5b6109cd565b3461012257600036600319011261012257005b34610122576000366003190112610122576000546040516001600160401b039091168152602090f35b346101225760203660031901126101225760005460018060401b0361069c8183167f8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9604080516004358152836020820152a16109e3565b6001600160401b0319909216911617600055005b34610122576000806003193601126102ca5780547fa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7906020906001600160401b036106fc8183166109e3565b166001600160401b03199190911681178455604051908152a180f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161074157604052565b610718565b601f909101601f19168101906001600160401b0382119082101761074157604052565b6001600160401b03811161074157601f01601f191660200190565b34610122576060366003190112610122576004356107a1816102eb565b602435906001600160401b03821161012257366023830112156101225781600401356107cc81610769565b906107da6040519283610746565b80825236602482860101116101225760208160009260246108079701838601378301015260443591610c30565b005b34610122576000806003193601126102ca577f6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe8180a180f35b346101225760003660031901126101225744600155005b34610122576000806003193601126102ca5780546001600160401b036108808183166109e3565b6001600160401b0319909216911617815580f35b34610122576040366003190112610122576004356108b181610373565b602435906108be82610373565b156108f95760405163022f589360e21b81529060208260048160645afa90811561029857610807926000926105355750151590151514610a7e565b60405163175a260b60e01b81529060208260048160645afa90811561029857610807926000926105355750151590151514610a7e565b1561093657565b60405162461bcd60e51b815260206004820152601160248201527029a2a72222a92fa727aa2fa7a924a3a4a760791b6044820152606490fd5b90816020910312610122575161098481610373565b90565b6040513d6000823e3d90fd5b1561099a57565b60405162461bcd60e51b815260206004820152600b60248201526a1393d517d053125054d15160aa1b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b6001600160401b039081169081146106045760010190565b908160209103126101225751610984816102eb565b3d15610a3b573d90610a2182610769565b91610a2f6040519384610746565b82523d6000602084013e565b606090565b905a9261270f1984019084821161060457600093849382604051938492833781018581520392fa50610a70610a10565b505a81039081116106045790565b15610a8557565b60405162461bcd60e51b815260206004820152601160248201527015539156141150d5115117d49154d55315607a1b6044820152606490fd5b9015158152901515602082015260400190565b15610ad857565b60405162461bcd60e51b81526020600482015260146024820152731111531151d0551157d0d0531317d1905253115160621b6044820152606490fd5b15610b1b57565b60405162461bcd60e51b815260206004820152600f60248201526e10d0531310d3d11157d19052531151608a1b6044820152606490fd5b15610b5957565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b90816020910312610122575190565b91939290825260209160e060208201528451928360e083015260005b848110610c0c575050610984939450610100926000848284010152601f801991011681019160408201526000606082015260006080820152600060a082015260c0838284030191015201602090600081520190565b86810182015183820161010001528101610bb7565b60001981146106045760010190565b60408051630378982b60e11b81526020949360049390916001600160a01b039091169086818681855afa90811561029857600091610d35575b5093604051633fd1d20760e11b81528781600481865afa97881561029857600098610d06575b50506000945b868610610ca6575050505050505050565b823b15610122578451639902050160e01b81529060008280610ccc8c8986898501610b9b565b038183885af190811561029857600192610ceb92610cf3575b50610c21565b950194610c95565b80610529610d009261072e565b38610ce5565b610d26929850803d10610d2e575b610d1e8183610746565b810190610b8c565b953880610c8f565b503d610d14565b610d4c9150873d8911610d2e57610d1e8183610746565b38610c6956fea26469706673582212207078d28be0d07708668d20268c46e2b03098552141d0524c65af85904c23924964736f6c63430008190033",
}

// SimpleABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleMetaData.ABI instead.
var SimpleABI = SimpleMetaData.ABI

// SimpleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleMetaData.Bin instead.
var SimpleBin = SimpleMetaData.Bin

// DeploySimple deploys a new Ethereum contract, binding an instance of Simple to it.
func DeploySimple(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Simple, error) {
	parsed, err := SimpleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Simple{SimpleCaller: SimpleCaller{contract: contract}, SimpleTransactor: SimpleTransactor{contract: contract}, SimpleFilterer: SimpleFilterer{contract: contract}}, nil
}

// Simple is an auto generated Go binding around an Ethereum contract.
type Simple struct {
	SimpleCaller     // Read-only binding to the contract
	SimpleTransactor // Write-only binding to the contract
	SimpleFilterer   // Log filterer for contract events
}

// SimpleCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleSession struct {
	Contract     *Simple           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleCallerSession struct {
	Contract *SimpleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SimpleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleTransactorSession struct {
	Contract     *SimpleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleRaw struct {
	Contract *Simple // Generic contract binding to access the raw methods on
}

// SimpleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleCallerRaw struct {
	Contract *SimpleCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleTransactorRaw struct {
	Contract *SimpleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimple creates a new instance of Simple, bound to a specific deployed contract.
func NewSimple(address common.Address, backend bind.ContractBackend) (*Simple, error) {
	contract, err := bindSimple(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Simple{SimpleCaller: SimpleCaller{contract: contract}, SimpleTransactor: SimpleTransactor{contract: contract}, SimpleFilterer: SimpleFilterer{contract: contract}}, nil
}

// NewSimpleCaller creates a new read-only instance of Simple, bound to a specific deployed contract.
func NewSimpleCaller(address common.Address, caller bind.ContractCaller) (*SimpleCaller, error) {
	contract, err := bindSimple(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleCaller{contract: contract}, nil
}

// NewSimpleTransactor creates a new write-only instance of Simple, bound to a specific deployed contract.
func NewSimpleTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleTransactor, error) {
	contract, err := bindSimple(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleTransactor{contract: contract}, nil
}

// NewSimpleFilterer creates a new log filterer instance of Simple, bound to a specific deployed contract.
func NewSimpleFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleFilterer, error) {
	contract, err := bindSimple(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleFilterer{contract: contract}, nil
}

// bindSimple binds a generic wrapper to an already deployed contract.
func bindSimple(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simple *SimpleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simple.Contract.SimpleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simple *SimpleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.Contract.SimpleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simple *SimpleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simple.Contract.SimpleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simple *SimpleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simple.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simple *SimpleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simple *SimpleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simple.Contract.contract.Transact(opts, method, params...)
}

// CheckBlockHashes is a free data retrieval call binding the contract method 0x5677c11e.
//
// Solidity: function checkBlockHashes() view returns(uint256)
func (_Simple *SimpleCaller) CheckBlockHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "checkBlockHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckBlockHashes is a free data retrieval call binding the contract method 0x5677c11e.
//
// Solidity: function checkBlockHashes() view returns(uint256)
func (_Simple *SimpleSession) CheckBlockHashes() (*big.Int, error) {
	return _Simple.Contract.CheckBlockHashes(&_Simple.CallOpts)
}

// CheckBlockHashes is a free data retrieval call binding the contract method 0x5677c11e.
//
// Solidity: function checkBlockHashes() view returns(uint256)
func (_Simple *SimpleCallerSession) CheckBlockHashes() (*big.Int, error) {
	return _Simple.Contract.CheckBlockHashes(&_Simple.CallOpts)
}

// CheckGasUsed is a free data retrieval call binding the contract method 0x1a2f8a92.
//
// Solidity: function checkGasUsed(address to, bytes input) view returns(uint256)
func (_Simple *SimpleCaller) CheckGasUsed(opts *bind.CallOpts, to common.Address, input []byte) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "checkGasUsed", to, input)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckGasUsed is a free data retrieval call binding the contract method 0x1a2f8a92.
//
// Solidity: function checkGasUsed(address to, bytes input) view returns(uint256)
func (_Simple *SimpleSession) CheckGasUsed(to common.Address, input []byte) (*big.Int, error) {
	return _Simple.Contract.CheckGasUsed(&_Simple.CallOpts, to, input)
}

// CheckGasUsed is a free data retrieval call binding the contract method 0x1a2f8a92.
//
// Solidity: function checkGasUsed(address to, bytes input) view returns(uint256)
func (_Simple *SimpleCallerSession) CheckGasUsed(to common.Address, input []byte) (*big.Int, error) {
	return _Simple.Contract.CheckGasUsed(&_Simple.CallOpts, to, input)
}

// CheckIsTopLevelOrWasAliased is a free data retrieval call binding the contract method 0xded5ecad.
//
// Solidity: function checkIsTopLevelOrWasAliased(bool useTopLevel, bool expected) view returns()
func (_Simple *SimpleCaller) CheckIsTopLevelOrWasAliased(opts *bind.CallOpts, useTopLevel bool, expected bool) error {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "checkIsTopLevelOrWasAliased", useTopLevel, expected)

	if err != nil {
		return err
	}

	return err

}

// CheckIsTopLevelOrWasAliased is a free data retrieval call binding the contract method 0xded5ecad.
//
// Solidity: function checkIsTopLevelOrWasAliased(bool useTopLevel, bool expected) view returns()
func (_Simple *SimpleSession) CheckIsTopLevelOrWasAliased(useTopLevel bool, expected bool) error {
	return _Simple.Contract.CheckIsTopLevelOrWasAliased(&_Simple.CallOpts, useTopLevel, expected)
}

// CheckIsTopLevelOrWasAliased is a free data retrieval call binding the contract method 0xded5ecad.
//
// Solidity: function checkIsTopLevelOrWasAliased(bool useTopLevel, bool expected) view returns()
func (_Simple *SimpleCallerSession) CheckIsTopLevelOrWasAliased(useTopLevel bool, expected bool) error {
	return _Simple.Contract.CheckIsTopLevelOrWasAliased(&_Simple.CallOpts, useTopLevel, expected)
}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint64)
func (_Simple *SimpleCaller) Counter(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "counter")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint64)
func (_Simple *SimpleSession) Counter() (uint64, error) {
	return _Simple.Contract.Counter(&_Simple.CallOpts)
}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint64)
func (_Simple *SimpleCallerSession) Counter() (uint64, error) {
	return _Simple.Contract.Counter(&_Simple.CallOpts)
}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Simple *SimpleCaller) Difficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "difficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Simple *SimpleSession) Difficulty() (*big.Int, error) {
	return _Simple.Contract.Difficulty(&_Simple.CallOpts)
}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Simple *SimpleCallerSession) Difficulty() (*big.Int, error) {
	return _Simple.Contract.Difficulty(&_Simple.CallOpts)
}

// GetBlockDifficulty is a free data retrieval call binding the contract method 0x12e05dd1.
//
// Solidity: function getBlockDifficulty() view returns(uint256)
func (_Simple *SimpleCaller) GetBlockDifficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "getBlockDifficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockDifficulty is a free data retrieval call binding the contract method 0x12e05dd1.
//
// Solidity: function getBlockDifficulty() view returns(uint256)
func (_Simple *SimpleSession) GetBlockDifficulty() (*big.Int, error) {
	return _Simple.Contract.GetBlockDifficulty(&_Simple.CallOpts)
}

// GetBlockDifficulty is a free data retrieval call binding the contract method 0x12e05dd1.
//
// Solidity: function getBlockDifficulty() view returns(uint256)
func (_Simple *SimpleCallerSession) GetBlockDifficulty() (*big.Int, error) {
	return _Simple.Contract.GetBlockDifficulty(&_Simple.CallOpts)
}

// Noop is a free data retrieval call binding the contract method 0x5dfc2e4a.
//
// Solidity: function noop() pure returns()
func (_Simple *SimpleCaller) Noop(opts *bind.CallOpts) error {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "noop")

	if err != nil {
		return err
	}

	return err

}

// Noop is a free data retrieval call binding the contract method 0x5dfc2e4a.
//
// Solidity: function noop() pure returns()
func (_Simple *SimpleSession) Noop() error {
	return _Simple.Contract.Noop(&_Simple.CallOpts)
}

// Noop is a free data retrieval call binding the contract method 0x5dfc2e4a.
//
// Solidity: function noop() pure returns()
func (_Simple *SimpleCallerSession) Noop() error {
	return _Simple.Contract.Noop(&_Simple.CallOpts)
}

// PleaseRevert is a free data retrieval call binding the contract method 0x05795f73.
//
// Solidity: function pleaseRevert() pure returns()
func (_Simple *SimpleCaller) PleaseRevert(opts *bind.CallOpts) error {
	var out []interface{}
	err := _Simple.contract.Call(opts, &out, "pleaseRevert")

	if err != nil {
		return err
	}

	return err

}

// PleaseRevert is a free data retrieval call binding the contract method 0x05795f73.
//
// Solidity: function pleaseRevert() pure returns()
func (_Simple *SimpleSession) PleaseRevert() error {
	return _Simple.Contract.PleaseRevert(&_Simple.CallOpts)
}

// PleaseRevert is a free data retrieval call binding the contract method 0x05795f73.
//
// Solidity: function pleaseRevert() pure returns()
func (_Simple *SimpleCallerSession) PleaseRevert() error {
	return _Simple.Contract.PleaseRevert(&_Simple.CallOpts)
}

// CheckCalls is a paid mutator transaction binding the contract method 0x44c25fba.
//
// Solidity: function checkCalls(bool useTopLevel, bool directCase, bool staticCase, bool delegateCase, bool callcodeCase, bool callCase) returns()
func (_Simple *SimpleTransactor) CheckCalls(opts *bind.TransactOpts, useTopLevel bool, directCase bool, staticCase bool, delegateCase bool, callcodeCase bool, callCase bool) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "checkCalls", useTopLevel, directCase, staticCase, delegateCase, callcodeCase, callCase)
}

// CheckCalls is a paid mutator transaction binding the contract method 0x44c25fba.
//
// Solidity: function checkCalls(bool useTopLevel, bool directCase, bool staticCase, bool delegateCase, bool callcodeCase, bool callCase) returns()
func (_Simple *SimpleSession) CheckCalls(useTopLevel bool, directCase bool, staticCase bool, delegateCase bool, callcodeCase bool, callCase bool) (*types.Transaction, error) {
	return _Simple.Contract.CheckCalls(&_Simple.TransactOpts, useTopLevel, directCase, staticCase, delegateCase, callcodeCase, callCase)
}

// CheckCalls is a paid mutator transaction binding the contract method 0x44c25fba.
//
// Solidity: function checkCalls(bool useTopLevel, bool directCase, bool staticCase, bool delegateCase, bool callcodeCase, bool callCase) returns()
func (_Simple *SimpleTransactorSession) CheckCalls(useTopLevel bool, directCase bool, staticCase bool, delegateCase bool, callcodeCase bool, callCase bool) (*types.Transaction, error) {
	return _Simple.Contract.CheckCalls(&_Simple.TransactOpts, useTopLevel, directCase, staticCase, delegateCase, callcodeCase, callCase)
}

// EmitNullEvent is a paid mutator transaction binding the contract method 0xb226a964.
//
// Solidity: function emitNullEvent() returns()
func (_Simple *SimpleTransactor) EmitNullEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "emitNullEvent")
}

// EmitNullEvent is a paid mutator transaction binding the contract method 0xb226a964.
//
// Solidity: function emitNullEvent() returns()
func (_Simple *SimpleSession) EmitNullEvent() (*types.Transaction, error) {
	return _Simple.Contract.EmitNullEvent(&_Simple.TransactOpts)
}

// EmitNullEvent is a paid mutator transaction binding the contract method 0xb226a964.
//
// Solidity: function emitNullEvent() returns()
func (_Simple *SimpleTransactorSession) EmitNullEvent() (*types.Transaction, error) {
	return _Simple.Contract.EmitNullEvent(&_Simple.TransactOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_Simple *SimpleTransactor) Increment(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "increment")
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_Simple *SimpleSession) Increment() (*types.Transaction, error) {
	return _Simple.Contract.Increment(&_Simple.TransactOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_Simple *SimpleTransactorSession) Increment() (*types.Transaction, error) {
	return _Simple.Contract.Increment(&_Simple.TransactOpts)
}

// IncrementEmit is a paid mutator transaction binding the contract method 0x9ff5ccac.
//
// Solidity: function incrementEmit() returns()
func (_Simple *SimpleTransactor) IncrementEmit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "incrementEmit")
}

// IncrementEmit is a paid mutator transaction binding the contract method 0x9ff5ccac.
//
// Solidity: function incrementEmit() returns()
func (_Simple *SimpleSession) IncrementEmit() (*types.Transaction, error) {
	return _Simple.Contract.IncrementEmit(&_Simple.TransactOpts)
}

// IncrementEmit is a paid mutator transaction binding the contract method 0x9ff5ccac.
//
// Solidity: function incrementEmit() returns()
func (_Simple *SimpleTransactorSession) IncrementEmit() (*types.Transaction, error) {
	return _Simple.Contract.IncrementEmit(&_Simple.TransactOpts)
}

// IncrementRedeem is a paid mutator transaction binding the contract method 0x0e8c389f.
//
// Solidity: function incrementRedeem() returns()
func (_Simple *SimpleTransactor) IncrementRedeem(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "incrementRedeem")
}

// IncrementRedeem is a paid mutator transaction binding the contract method 0x0e8c389f.
//
// Solidity: function incrementRedeem() returns()
func (_Simple *SimpleSession) IncrementRedeem() (*types.Transaction, error) {
	return _Simple.Contract.IncrementRedeem(&_Simple.TransactOpts)
}

// IncrementRedeem is a paid mutator transaction binding the contract method 0x0e8c389f.
//
// Solidity: function incrementRedeem() returns()
func (_Simple *SimpleTransactorSession) IncrementRedeem() (*types.Transaction, error) {
	return _Simple.Contract.IncrementRedeem(&_Simple.TransactOpts)
}

// LogAndIncrement is a paid mutator transaction binding the contract method 0x8a390877.
//
// Solidity: function logAndIncrement(uint256 expected) returns()
func (_Simple *SimpleTransactor) LogAndIncrement(opts *bind.TransactOpts, expected *big.Int) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "logAndIncrement", expected)
}

// LogAndIncrement is a paid mutator transaction binding the contract method 0x8a390877.
//
// Solidity: function logAndIncrement(uint256 expected) returns()
func (_Simple *SimpleSession) LogAndIncrement(expected *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.LogAndIncrement(&_Simple.TransactOpts, expected)
}

// LogAndIncrement is a paid mutator transaction binding the contract method 0x8a390877.
//
// Solidity: function logAndIncrement(uint256 expected) returns()
func (_Simple *SimpleTransactorSession) LogAndIncrement(expected *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.LogAndIncrement(&_Simple.TransactOpts, expected)
}

// PostManyBatches is a paid mutator transaction binding the contract method 0xb1948fc3.
//
// Solidity: function postManyBatches(address sequencerInbox, bytes batchData, uint256 numberToPost) returns()
func (_Simple *SimpleTransactor) PostManyBatches(opts *bind.TransactOpts, sequencerInbox common.Address, batchData []byte, numberToPost *big.Int) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "postManyBatches", sequencerInbox, batchData, numberToPost)
}

// PostManyBatches is a paid mutator transaction binding the contract method 0xb1948fc3.
//
// Solidity: function postManyBatches(address sequencerInbox, bytes batchData, uint256 numberToPost) returns()
func (_Simple *SimpleSession) PostManyBatches(sequencerInbox common.Address, batchData []byte, numberToPost *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.PostManyBatches(&_Simple.TransactOpts, sequencerInbox, batchData, numberToPost)
}

// PostManyBatches is a paid mutator transaction binding the contract method 0xb1948fc3.
//
// Solidity: function postManyBatches(address sequencerInbox, bytes batchData, uint256 numberToPost) returns()
func (_Simple *SimpleTransactorSession) PostManyBatches(sequencerInbox common.Address, batchData []byte, numberToPost *big.Int) (*types.Transaction, error) {
	return _Simple.Contract.PostManyBatches(&_Simple.TransactOpts, sequencerInbox, batchData, numberToPost)
}

// StoreDifficulty is a paid mutator transaction binding the contract method 0xcff36f2d.
//
// Solidity: function storeDifficulty() returns()
func (_Simple *SimpleTransactor) StoreDifficulty(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simple.contract.Transact(opts, "storeDifficulty")
}

// StoreDifficulty is a paid mutator transaction binding the contract method 0xcff36f2d.
//
// Solidity: function storeDifficulty() returns()
func (_Simple *SimpleSession) StoreDifficulty() (*types.Transaction, error) {
	return _Simple.Contract.StoreDifficulty(&_Simple.TransactOpts)
}

// StoreDifficulty is a paid mutator transaction binding the contract method 0xcff36f2d.
//
// Solidity: function storeDifficulty() returns()
func (_Simple *SimpleTransactorSession) StoreDifficulty() (*types.Transaction, error) {
	return _Simple.Contract.StoreDifficulty(&_Simple.TransactOpts)
}

// SimpleCounterEventIterator is returned from FilterCounterEvent and is used to iterate over the raw logs and unpacked data for CounterEvent events raised by the Simple contract.
type SimpleCounterEventIterator struct {
	Event *SimpleCounterEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleCounterEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleCounterEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleCounterEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleCounterEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleCounterEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleCounterEvent represents a CounterEvent event raised by the Simple contract.
type SimpleCounterEvent struct {
	Count uint64
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterEvent is a free log retrieval operation binding the contract event 0xa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7.
//
// Solidity: event CounterEvent(uint64 count)
func (_Simple *SimpleFilterer) FilterCounterEvent(opts *bind.FilterOpts) (*SimpleCounterEventIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "CounterEvent")
	if err != nil {
		return nil, err
	}
	return &SimpleCounterEventIterator{contract: _Simple.contract, event: "CounterEvent", logs: logs, sub: sub}, nil
}

// WatchCounterEvent is a free log subscription operation binding the contract event 0xa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7.
//
// Solidity: event CounterEvent(uint64 count)
func (_Simple *SimpleFilterer) WatchCounterEvent(opts *bind.WatchOpts, sink chan<- *SimpleCounterEvent) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "CounterEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleCounterEvent)
				if err := _Simple.contract.UnpackLog(event, "CounterEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterEvent is a log parse operation binding the contract event 0xa45d7e79cb3c6044f30c8dd891e6571301d6b8b6618df519c987905ec70742e7.
//
// Solidity: event CounterEvent(uint64 count)
func (_Simple *SimpleFilterer) ParseCounterEvent(log types.Log) (*SimpleCounterEvent, error) {
	event := new(SimpleCounterEvent)
	if err := _Simple.contract.UnpackLog(event, "CounterEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleLogAndIncrementCalledIterator is returned from FilterLogAndIncrementCalled and is used to iterate over the raw logs and unpacked data for LogAndIncrementCalled events raised by the Simple contract.
type SimpleLogAndIncrementCalledIterator struct {
	Event *SimpleLogAndIncrementCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleLogAndIncrementCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleLogAndIncrementCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleLogAndIncrementCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleLogAndIncrementCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleLogAndIncrementCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleLogAndIncrementCalled represents a LogAndIncrementCalled event raised by the Simple contract.
type SimpleLogAndIncrementCalled struct {
	Expected *big.Int
	Have     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogAndIncrementCalled is a free log retrieval operation binding the contract event 0x8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9.
//
// Solidity: event LogAndIncrementCalled(uint256 expected, uint256 have)
func (_Simple *SimpleFilterer) FilterLogAndIncrementCalled(opts *bind.FilterOpts) (*SimpleLogAndIncrementCalledIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "LogAndIncrementCalled")
	if err != nil {
		return nil, err
	}
	return &SimpleLogAndIncrementCalledIterator{contract: _Simple.contract, event: "LogAndIncrementCalled", logs: logs, sub: sub}, nil
}

// WatchLogAndIncrementCalled is a free log subscription operation binding the contract event 0x8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9.
//
// Solidity: event LogAndIncrementCalled(uint256 expected, uint256 have)
func (_Simple *SimpleFilterer) WatchLogAndIncrementCalled(opts *bind.WatchOpts, sink chan<- *SimpleLogAndIncrementCalled) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "LogAndIncrementCalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleLogAndIncrementCalled)
				if err := _Simple.contract.UnpackLog(event, "LogAndIncrementCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAndIncrementCalled is a log parse operation binding the contract event 0x8df8e492f407b078593c5d8fd7e65ef68505999d911d5b99b017c0b7077398b9.
//
// Solidity: event LogAndIncrementCalled(uint256 expected, uint256 have)
func (_Simple *SimpleFilterer) ParseLogAndIncrementCalled(log types.Log) (*SimpleLogAndIncrementCalled, error) {
	event := new(SimpleLogAndIncrementCalled)
	if err := _Simple.contract.UnpackLog(event, "LogAndIncrementCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleNullEventIterator is returned from FilterNullEvent and is used to iterate over the raw logs and unpacked data for NullEvent events raised by the Simple contract.
type SimpleNullEventIterator struct {
	Event *SimpleNullEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleNullEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleNullEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleNullEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleNullEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleNullEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleNullEvent represents a NullEvent event raised by the Simple contract.
type SimpleNullEvent struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNullEvent is a free log retrieval operation binding the contract event 0x6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe.
//
// Solidity: event NullEvent()
func (_Simple *SimpleFilterer) FilterNullEvent(opts *bind.FilterOpts) (*SimpleNullEventIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "NullEvent")
	if err != nil {
		return nil, err
	}
	return &SimpleNullEventIterator{contract: _Simple.contract, event: "NullEvent", logs: logs, sub: sub}, nil
}

// WatchNullEvent is a free log subscription operation binding the contract event 0x6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe.
//
// Solidity: event NullEvent()
func (_Simple *SimpleFilterer) WatchNullEvent(opts *bind.WatchOpts, sink chan<- *SimpleNullEvent) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "NullEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleNullEvent)
				if err := _Simple.contract.UnpackLog(event, "NullEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNullEvent is a log parse operation binding the contract event 0x6f59c82101949290205a9ae9d0c657e6dae1a71c301ae76d385c2792294585fe.
//
// Solidity: event NullEvent()
func (_Simple *SimpleFilterer) ParseNullEvent(log types.Log) (*SimpleNullEvent, error) {
	event := new(SimpleNullEvent)
	if err := _Simple.contract.UnpackLog(event, "NullEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleRedeemedEventIterator is returned from FilterRedeemedEvent and is used to iterate over the raw logs and unpacked data for RedeemedEvent events raised by the Simple contract.
type SimpleRedeemedEventIterator struct {
	Event *SimpleRedeemedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleRedeemedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleRedeemedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleRedeemedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleRedeemedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleRedeemedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleRedeemedEvent represents a RedeemedEvent event raised by the Simple contract.
type SimpleRedeemedEvent struct {
	Caller   common.Address
	Redeemer common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRedeemedEvent is a free log retrieval operation binding the contract event 0x773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c3159413.
//
// Solidity: event RedeemedEvent(address caller, address redeemer)
func (_Simple *SimpleFilterer) FilterRedeemedEvent(opts *bind.FilterOpts) (*SimpleRedeemedEventIterator, error) {

	logs, sub, err := _Simple.contract.FilterLogs(opts, "RedeemedEvent")
	if err != nil {
		return nil, err
	}
	return &SimpleRedeemedEventIterator{contract: _Simple.contract, event: "RedeemedEvent", logs: logs, sub: sub}, nil
}

// WatchRedeemedEvent is a free log subscription operation binding the contract event 0x773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c3159413.
//
// Solidity: event RedeemedEvent(address caller, address redeemer)
func (_Simple *SimpleFilterer) WatchRedeemedEvent(opts *bind.WatchOpts, sink chan<- *SimpleRedeemedEvent) (event.Subscription, error) {

	logs, sub, err := _Simple.contract.WatchLogs(opts, "RedeemedEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleRedeemedEvent)
				if err := _Simple.contract.UnpackLog(event, "RedeemedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemedEvent is a log parse operation binding the contract event 0x773c78bf96e65f61c1a2622b47d76e78bfe70dd59cf4f11470c4c121c3159413.
//
// Solidity: event RedeemedEvent(address caller, address redeemer)
func (_Simple *SimpleFilterer) ParseRedeemedEvent(log types.Log) (*SimpleRedeemedEvent, error) {
	event := new(SimpleRedeemedEvent)
	if err := _Simple.contract.UnpackLog(event, "RedeemedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleCacheManagerMetaData contains all meta data concerning the SimpleCacheManager contract.
var SimpleCacheManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"cacheProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"evictProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080806040523460155761017a908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081636c769c09146100b1575063e73ac9f21461003757600080fd5b346100a05760203660031901126100a057806004356001600160a01b038116908190036100ae5760723b156100ae576040519063739d64f960e11b8252600482015281816024818360725af180156100a3576100905750f35b6100999061011b565b6100a05780f35b80fd5b6040513d84823e3d90fd5b50fd5b905034610117576020366003190112610117576004356001600160a01b0381168103610113573f60723b156101135763ce97201360e01b8252600482015281816024818360725af180156100a357610107575080f35b6101109061011b565b80f35b8280fd5b5080fd5b6001600160401b03811161012e57604052565b634e487b7160e01b600052604160045260246000fdfea264697066735822122033729b9bbe302843e69dad5c9135720bd6fee6acb55cd09bae4db952858999e164736f6c63430008190033",
}

// SimpleCacheManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleCacheManagerMetaData.ABI instead.
var SimpleCacheManagerABI = SimpleCacheManagerMetaData.ABI

// SimpleCacheManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleCacheManagerMetaData.Bin instead.
var SimpleCacheManagerBin = SimpleCacheManagerMetaData.Bin

// DeploySimpleCacheManager deploys a new Ethereum contract, binding an instance of SimpleCacheManager to it.
func DeploySimpleCacheManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleCacheManager, error) {
	parsed, err := SimpleCacheManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleCacheManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleCacheManager{SimpleCacheManagerCaller: SimpleCacheManagerCaller{contract: contract}, SimpleCacheManagerTransactor: SimpleCacheManagerTransactor{contract: contract}, SimpleCacheManagerFilterer: SimpleCacheManagerFilterer{contract: contract}}, nil
}

// SimpleCacheManager is an auto generated Go binding around an Ethereum contract.
type SimpleCacheManager struct {
	SimpleCacheManagerCaller     // Read-only binding to the contract
	SimpleCacheManagerTransactor // Write-only binding to the contract
	SimpleCacheManagerFilterer   // Log filterer for contract events
}

// SimpleCacheManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleCacheManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleCacheManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleCacheManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleCacheManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleCacheManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleCacheManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleCacheManagerSession struct {
	Contract     *SimpleCacheManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SimpleCacheManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleCacheManagerCallerSession struct {
	Contract *SimpleCacheManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// SimpleCacheManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleCacheManagerTransactorSession struct {
	Contract     *SimpleCacheManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// SimpleCacheManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleCacheManagerRaw struct {
	Contract *SimpleCacheManager // Generic contract binding to access the raw methods on
}

// SimpleCacheManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleCacheManagerCallerRaw struct {
	Contract *SimpleCacheManagerCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleCacheManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleCacheManagerTransactorRaw struct {
	Contract *SimpleCacheManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleCacheManager creates a new instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManager(address common.Address, backend bind.ContractBackend) (*SimpleCacheManager, error) {
	contract, err := bindSimpleCacheManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManager{SimpleCacheManagerCaller: SimpleCacheManagerCaller{contract: contract}, SimpleCacheManagerTransactor: SimpleCacheManagerTransactor{contract: contract}, SimpleCacheManagerFilterer: SimpleCacheManagerFilterer{contract: contract}}, nil
}

// NewSimpleCacheManagerCaller creates a new read-only instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManagerCaller(address common.Address, caller bind.ContractCaller) (*SimpleCacheManagerCaller, error) {
	contract, err := bindSimpleCacheManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManagerCaller{contract: contract}, nil
}

// NewSimpleCacheManagerTransactor creates a new write-only instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleCacheManagerTransactor, error) {
	contract, err := bindSimpleCacheManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManagerTransactor{contract: contract}, nil
}

// NewSimpleCacheManagerFilterer creates a new log filterer instance of SimpleCacheManager, bound to a specific deployed contract.
func NewSimpleCacheManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleCacheManagerFilterer, error) {
	contract, err := bindSimpleCacheManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleCacheManagerFilterer{contract: contract}, nil
}

// bindSimpleCacheManager binds a generic wrapper to an already deployed contract.
func bindSimpleCacheManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleCacheManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleCacheManager *SimpleCacheManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleCacheManager.Contract.SimpleCacheManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleCacheManager *SimpleCacheManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.SimpleCacheManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleCacheManager *SimpleCacheManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.SimpleCacheManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleCacheManager *SimpleCacheManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleCacheManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleCacheManager *SimpleCacheManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleCacheManager *SimpleCacheManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.contract.Transact(opts, method, params...)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactor) CacheProgram(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.contract.Transact(opts, "cacheProgram", program)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerSession) CacheProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.CacheProgram(&_SimpleCacheManager.TransactOpts, program)
}

// CacheProgram is a paid mutator transaction binding the contract method 0xe73ac9f2.
//
// Solidity: function cacheProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactorSession) CacheProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.CacheProgram(&_SimpleCacheManager.TransactOpts, program)
}

// EvictProgram is a paid mutator transaction binding the contract method 0x6c769c09.
//
// Solidity: function evictProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactor) EvictProgram(opts *bind.TransactOpts, program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.contract.Transact(opts, "evictProgram", program)
}

// EvictProgram is a paid mutator transaction binding the contract method 0x6c769c09.
//
// Solidity: function evictProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerSession) EvictProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.EvictProgram(&_SimpleCacheManager.TransactOpts, program)
}

// EvictProgram is a paid mutator transaction binding the contract method 0x6c769c09.
//
// Solidity: function evictProgram(address program) returns()
func (_SimpleCacheManager *SimpleCacheManagerTransactorSession) EvictProgram(program common.Address) (*types.Transaction, error) {
	return _SimpleCacheManager.Contract.EvictProgram(&_SimpleCacheManager.TransactOpts, program)
}

// SimpleProxyMetaData contains all meta data concerning the SimpleProxy contract.
var SimpleProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a034606a57601f61013b38819003918201601f19168301916001600160401b03831184841017606f57808492602094604052833981010312606a57516001600160a01b0381168103606a5760805260405160b5908161008682396080518181816015015260520152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040523615604657600036818037808036817f00000000000000000000000000000000000000000000000000000000000000005af43d82803e156042573d90f35b3d90fd5b600036818037808036817f00000000000000000000000000000000000000000000000000000000000000005af43d82803e156042573d90f3fea2646970667358221220a2f48320a05e2c0de276c3f3d8fb9e67b85c20240484ab5abc032eac13aa38c464736f6c63430008190033",
}

// SimpleProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleProxyMetaData.ABI instead.
var SimpleProxyABI = SimpleProxyMetaData.ABI

// SimpleProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleProxyMetaData.Bin instead.
var SimpleProxyBin = SimpleProxyMetaData.Bin

// DeploySimpleProxy deploys a new Ethereum contract, binding an instance of SimpleProxy to it.
func DeploySimpleProxy(auth *bind.TransactOpts, backend bind.ContractBackend, impl_ common.Address) (common.Address, *types.Transaction, *SimpleProxy, error) {
	parsed, err := SimpleProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleProxyBin), backend, impl_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleProxy{SimpleProxyCaller: SimpleProxyCaller{contract: contract}, SimpleProxyTransactor: SimpleProxyTransactor{contract: contract}, SimpleProxyFilterer: SimpleProxyFilterer{contract: contract}}, nil
}

// SimpleProxy is an auto generated Go binding around an Ethereum contract.
type SimpleProxy struct {
	SimpleProxyCaller     // Read-only binding to the contract
	SimpleProxyTransactor // Write-only binding to the contract
	SimpleProxyFilterer   // Log filterer for contract events
}

// SimpleProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleProxySession struct {
	Contract     *SimpleProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleProxyCallerSession struct {
	Contract *SimpleProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// SimpleProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleProxyTransactorSession struct {
	Contract     *SimpleProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// SimpleProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleProxyRaw struct {
	Contract *SimpleProxy // Generic contract binding to access the raw methods on
}

// SimpleProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleProxyCallerRaw struct {
	Contract *SimpleProxyCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleProxyTransactorRaw struct {
	Contract *SimpleProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleProxy creates a new instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxy(address common.Address, backend bind.ContractBackend) (*SimpleProxy, error) {
	contract, err := bindSimpleProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleProxy{SimpleProxyCaller: SimpleProxyCaller{contract: contract}, SimpleProxyTransactor: SimpleProxyTransactor{contract: contract}, SimpleProxyFilterer: SimpleProxyFilterer{contract: contract}}, nil
}

// NewSimpleProxyCaller creates a new read-only instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxyCaller(address common.Address, caller bind.ContractCaller) (*SimpleProxyCaller, error) {
	contract, err := bindSimpleProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleProxyCaller{contract: contract}, nil
}

// NewSimpleProxyTransactor creates a new write-only instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleProxyTransactor, error) {
	contract, err := bindSimpleProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleProxyTransactor{contract: contract}, nil
}

// NewSimpleProxyFilterer creates a new log filterer instance of SimpleProxy, bound to a specific deployed contract.
func NewSimpleProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleProxyFilterer, error) {
	contract, err := bindSimpleProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleProxyFilterer{contract: contract}, nil
}

// bindSimpleProxy binds a generic wrapper to an already deployed contract.
func bindSimpleProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleProxy *SimpleProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleProxy.Contract.SimpleProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleProxy *SimpleProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleProxy.Contract.SimpleProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleProxy *SimpleProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleProxy.Contract.SimpleProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleProxy *SimpleProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleProxy *SimpleProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleProxy *SimpleProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_SimpleProxy *SimpleProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _SimpleProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_SimpleProxy *SimpleProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _SimpleProxy.Contract.Fallback(&_SimpleProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_SimpleProxy *SimpleProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _SimpleProxy.Contract.Fallback(&_SimpleProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleProxy *SimpleProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleProxy *SimpleProxySession) Receive() (*types.Transaction, error) {
	return _SimpleProxy.Contract.Receive(&_SimpleProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleProxy *SimpleProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _SimpleProxy.Contract.Receive(&_SimpleProxy.TransactOpts)
}

// SingleExecutionChallengeMetaData contains all meta data concerning the SingleExecutionChallenge contract.
var SingleExecutionChallengeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp_\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeResultReceiver\",\"name\":\"resultReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"maxInboxMessagesRead_\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[2]\",\"name\":\"startAndEndHashes\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"numSteps_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asserter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asserterTimeLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengerTimeLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"chainHashes\",\"type\":\"bytes32[]\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumIChallengeManager.ChallengeTerminationType\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"ChallengeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockSteps\",\"type\":\"uint256\"}],\"name\":\"ExecutionChallengeBegun\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"indexed\":false,\"internalType\":\"structGlobalState\",\"name\":\"startState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"indexed\":false,\"internalType\":\"structGlobalState\",\"name\":\"endState\",\"type\":\"tuple\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldSegmentsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSegmentsLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"oldSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"challengePosition\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.SegmentSelection\",\"name\":\"selection\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"newSegments\",\"type\":\"bytes32[]\"}],\"name\":\"bisectExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldSegmentsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSegmentsLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"oldSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"challengePosition\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.SegmentSelection\",\"name\":\"selection\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"globalStateHashes\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"numSteps\",\"type\":\"uint256\"}],\"name\":\"challengeExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"challengeInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"current\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"next\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"maxInboxMessages\",\"type\":\"uint64\"},{\"internalType\":\"enumChallengeLib.ChallengeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"structChallengeLib.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"current\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"next\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"maxInboxMessages\",\"type\":\"uint64\"},{\"internalType\":\"enumChallengeLib.ChallengeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"clearChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"startAndEndMachineStatuses_\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"startAndEndGlobalStates_\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asserter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asserterTimeLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengerTimeLeft_\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"currentResponder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"getOsp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIChallengeResultReceiver\",\"name\":\"resultReceiver_\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox_\",\"type\":\"address\"},{\"internalType\":\"contractIBridge\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"isTimedOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldSegmentsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSegmentsLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"oldSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"challengePosition\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.SegmentSelection\",\"name\":\"selection\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ospCond\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"condRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"condOsp\",\"type\":\"address\"}],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resultReceiver\",\"outputs\":[{\"internalType\":\"contractIChallengeResultReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChallengesCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a080604052346103665761279c803803809161001c8285610386565b83398101610140828203126103665781516001600160a01b03811692908390036103665760208101516001600160a01b03811690819003610366576040820151936001600160401b039182861686036103665784607f8501121561036657604051946100878661036b565b8560a086019182116103665760608601905b82821061035657505051936100b060c082016103a9565b966100bd60e083016103a9565b92610120610100840151930151943060805260018060a01b0319600554161760055560018060a01b031960025416176002556000549385851694868614610340576001600160401b0319166001868101881691821760009081559182526020526040908190206007810154915199909591949060608b01898111908c111761032a5760608b0160405260028b5260403660208d01378051908b511561031457602091828d015201518a51600110156103145790889493929160408c0152604051600060208201528a60408201528b60608201602082519192019060005b8181106102fb5750505091816101ca6007999795936802000000000000000099979503601f198101835282610386565b602081519101209d8e60068b0155816020604051926101e88461036b565b6001600160a01b031680845292015260028a0180546001600160a01b031916909117905560038901556040519082906020906102238461036b565b6001600160a01b031680845292015287546001600160a01b03191617875560018701554260048701556001600160481b03199092169116171791015560408051600080825260208083019690965260609282018390528651928201839052608082019691959190910191905b8181106102e55750505091809160017f86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68940116930390a36040516123de90816103be82396080518181816101b5015261078c0152f35b825187526020968701969092019160010161028f565b825184528d99506020938401939092019160010161019a565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8151815260209182019101610099565b600080fd5b604081019081106001600160401b0382111761032a57604052565b601f909101601f19168101906001600160401b0382119082101761032a57604052565b51906001600160a01b03821682036103665756fe608080604052600436101561001357600080fd5b600090813560e01c90816314eab5e714610a1f575080631b45c86a146108c157806323a9ef23146108805780633504f1d7146108575780633690b011146108265780635038934d1461075057806356e9df97146106815780635ef489e61461065a5780637fd07a9c1461051a5780638f1d37761461047a5780639ede42b914610437578063a521b032146103b9578063d248d1241461033e578063dc74bf8b1461030b578063e78cea92146102e2578063ee35f327146102b9578063f26a62c614610290578063f8c8765e1461015e5763fb7be0a1146100f257600080fd5b3461015b5760031960e0368201126101575761010c610ea7565b90602435906001600160401b03821161015357608090823603011261014f573660841161014f573660c41161014f5761014c9160c43591600401906119fd565b80f35b8280fd5b8380fd5b5080fd5b80fd5b503461015b57608036600319011261015b576004356001600160a01b038181169182900361014f57602435818116809103610153576044359082821680920361028c5760643593838516809503610287576101dd847f0000000000000000000000000000000000000000000000000000000000000000163014156111a0565b6002549384166102535780156102195760018060a01b031980941617600255826003541617600355816004541617600455600554161760055580f35b60405162461bcd60e51b81526020600482015260126024820152712727afa922a9aaa62a2fa922a1a2a4ab22a960711b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b6044820152606490fd5b600080fd5b8480fd5b503461015b578060031936011261015b576005546040516001600160a01b039091168152602090f35b503461015b578060031936011261015b576003546040516001600160a01b039091168152602090f35b503461015b578060031936011261015b576004546040516001600160a01b039091168152602090f35b503461015b57602036600319011261015b57602090600435815260068252604060018060a01b0391205416604051908152f35b503461015b5760031960603682011261015757610359610ea7565b906001600160401b03906024359082821161028c576080908236030112610153576044359282841161028c573660238501121561028c57836004013592831161028c57366024848601011161028c57602461014c940191600401906116e8565b503461015b57600319606036820112610157576103d4610ea7565b906001600160401b03906024359082821161028c576080908236030112610153576044359282841161028c573660238501121561028c57836004013592831161028c573660248460051b8601011161028c57602461014c940191600401906113a3565b503461015b57602036600319011261015b57602090610470906040906001600160401b03610463610ea7565b16815260018452206121b1565b6040519015158152f35b503461015b57602036600319011261015b5760406101209160043581526001602052206104a681610f93565b906104b360028201610f93565b90600481015490600581015460076006830154920154926104ec60ff8560401c16956104e26040518099610ed1565b6040880190610ed1565b608086015260a085015260c08401526001600160401b031660e083015261051281610ee9565b610100820152f35b503461015b57602080600319360112610157579061012091604061053c610ea7565b928060c0835161054b81610f3a565b845161055681610f09565b600081526000878201528152845161056d81610f09565b600081526000878201528682015282858201528260608201528260808201528260a08201520152600180831b038094168152600183522091604051926105b284610f3a565b6105bb81610f93565b84526105c960028201610f93565b9284019283526004810154906040850191825260058101546060860190815260076006830154926080880193845201549261063760ff60a0890195878116875260401c169660c089019761061c81610ee9565b885261062c604051809a51610ed1565b516040890190610ed1565b5160808701525160a08601525160c0850152511660e08301525161051281610ee9565b503461015b578060031936011261015b57546040516001600160401b039091168152602090f35b503461015b57602036600319011261015b5761069b610ea7565b6002546001600160a01b03163303610718576001600160401b031680825260016020526040808320600701546106e8911c60ff166106d881610ee9565b6106e06110ea565b90151561110d565b80825260016020526106fc60408320611201565b600080516020612369833981519152602060405160038152a280f35b60405162461bcd60e51b815260206004820152601060248201526f2727aa2fa922a9afa922a1a2a4ab22a960811b6044820152606490fd5b503461015b57606036600319011261015b576004356001600160a01b03818116918290036102875760443590808216809203610287576107b4817f0000000000000000000000000000000000000000000000000000000000000000163014156111a0565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354168033036108085750602435835260066020526040832060018060a01b03199182825416179055600554161760055580f35b60449060405190631194af8760e11b82523360048301526024820152fd5b503461015b57602036600319011261015b576020610845600435611174565b6040516001600160a01b039091168152f35b503461015b578060031936011261015b576002546040516001600160a01b039091168152602090f35b503461015b57602036600319011261015b576020906001600160401b036108a5610ea7565b16815260018252604060018060a01b0391205416604051908152f35b503461015b57602080600319360112610157576001600160401b0390816108e6610ea7565b16918284526001825261090960ff600760408720015460401c166106d881610ee9565b8284526001825261091c604085206121b1565b156109e7578284526001825260408420908460018060a01b0392836002820154169361094b8183541692611201565b6002541693843b1561014f57606490836040519687948593630357aa4960e01b85528b6004860152602485015260448401525af180156109dc576109a6575b505060008051602061236983398151915290604051848152a280f35b81949294116109c857604052916000805160206123698339815191523861098a565b634e487b7160e01b82526041600452602482fd5b6040513d87823e3d90fd5b60405162461bcd60e51b815260048101839052601060248201526f54494d454f55545f444541444c494e4560801b6044820152606490fd5b90503461015757610200366003190112610157573660641161015757366101641161015757610164356001600160401b038116810361014f5761018435906001600160a01b03808316830361028c576101a435938185168503610e425781600254163303610e72575060405192610a9584610f55565b60028452604036602086013760046024351015610e42576080366063190112610e4257604051610ac481610f09565b3660831215610e5e57604051610ad981610f09565b803660a411610e3e576064905b60a48210610e6257505081523660c31215610e5e57604051610b0781610f09565b803660e411610e3e5760a4905b60e48210610e4657505081610b30916020610b38940152611f49565b602435611fc2565b610b418561106c565b5260046044351015610e4257610b68610b60610b5b610fc4565b611f49565b604435611fc2565b610b718561108f565b52855494610b876001600160401b03871661109f565b6001600160401b03199096166001600160401b0387169081178855610bad9015156110cd565b6001600160401b038681168852600160209081526040892060043560058201559190610bd7610fc4565b0151511692610be7604435610fba565b6002604435148015610d7a575b610d6a575b6007820194855493604051610c0d81610f09565b828416815260206101c435910152600284018260018060a01b03199416848254161790556101c4356003850155604051610c4681610f09565b91168082526101e4356020909201829052835490921690911782556001820155426004909101556001600160481b0319166001600160401b0390911617600160401b17905560408051906064823760a485604083015b60028210610d4257505050604060e460808301376101249460c082015b60028210610d1a57602086610d0887876001600160401b0384167f76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a6101008aa26001600160401b0316836120c7565b6040516001600160401b039091168152f35b60019060209081906001600160401b03610d338b610ebd565b16815201970191019095610cb9565b60019060209081906001600160401b03610d5b87610ebd565b16815201930191019091610c9c565b92610d749061109f565b92610bf9565b5060803660e3190112610e3e57604051610d9381610f09565b366101031215610e2657604051610da981610f09565b803661012411610e3a5760e4905b6101248210610e2a5750508152366101431215610e26576040518091610ddc82610f09565b610124825b6101648210610e0757505060209081019190915201516001600160401b03161515610bf4565b8192935060209190610e198392610ebd565b8152019101839291610de1565b8980fd5b8135815260209182019101610db7565b8b80fd5b8880fd5b8580fd5b60208091610e5384610ebd565b815201910190610b14565b8680fd5b8135815260209182019101610ae6565b62461bcd60e51b815260206004820152601060248201526f13d3931657d493d313155417d0d2105360821b6044820152606490fd5b600435906001600160401b038216820361028757565b35906001600160401b038216820361028757565b80516001600160a01b03168252602090810151910152565b60031115610ef357565b634e487b7160e01b600052602160045260246000fd5b604081019081106001600160401b03821117610f2457604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117610f2457604052565b606081019081106001600160401b03821117610f2457604052565b601f909101601f19168101906001600160401b03821190821017610f2457604052565b90604051610fa081610f09565b82546001600160a01b031681526001909201546020830152565b60041115610ef357565b60803660e319011261028757604051610fdc81610f09565b36610103121561028757604051610ff281610f09565b80610124913683116102875760e4905b83821061105c5750508252366101431215610287576040519061102482610f09565b816101649136831161028757905b82821061104457505050602082015290565b6020809161105184610ebd565b815201910190611032565b8135815260209182019101611002565b8051156110795760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156110795760400190565b6001600160401b039081169081146110b75760010190565b634e487b7160e01b600052601160045260246000fd5b156110d457565b634e487b7160e01b600052600160045260246000fd5b604051906110f782610f09565b60078252661393d7d0d2105360ca1b6020830152565b156111155750565b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061115b575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611138565b6000908152600660205260409020546001600160a01b039081168061119b57506005541690565b905090565b156111a757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b60076000918281558260018201558260028201558260038201558260048201558260058201558260068201550155565b1561123857565b60405162461bcd60e51b815260206004820152600b60248201526a21a420a62fa9a2a72222a960a91b6044820152606490fd5b1561127257565b60405162461bcd60e51b815260206004820152600d60248201526c4348414c5f444541444c494e4560981b6044820152606490fd5b903590601e198136030182121561028757018035906001600160401b03821161028757602001918160051b3603831361028757565b9092916001600160401b038411610f24578360051b602092602060405161130582850182610f70565b809781520191810192831161028757905b8282106113235750505050565b81358152908301908301611316565b1561133957565b60405162461bcd60e51b81526020600482015260096024820152684249535f535441544560b81b6044820152606490fd5b919082039182116110b757565b6060906020815260116020820152704241445f4348414c4c454e47455f504f5360781b60408201520190565b6001600160401b0316600081815260016020818152604080842080546001600160a01b039993989497919692959391906113e0908b163314611231565b8284528789526113fa6113f48786206121b1565b1561126b565b600787019461141260ff8754891c166106d881610ee9565b6006880154611447888401916114418d61143661142f86896112a7565b36916112dc565b9087013587356121c8565b14611332565b600261145382856112a7565b905010908115611692575b506116765761146c82612221565b9390928a85111561164657846028861161163e575b8b81018091116115e357820361160b5781156115f75760001982018281116115e35782916114ba61142f9286956114c4979b989b6116d8565b35908435906122b6565b906114d1898410156110cd565b6114df6002835110156110cd565b6114ea8284876121c8565b94848252898b528560068984200155875193606085019185528b85015260608885015282518091528a608085019301915b8a8c8383106115d15750505050508160ff9695949392600080516020612389833981519152920390a354901c1661155181610ee9565b156115cb5760039161156282610f93565b94600483019561158161157688544261136a565b96820196875161136a565b9586905260028401926115a9565b505182546001600160a01b03191691161790550155429055565b835485546001600160a01b03191690841617855585850154908501553861158f565b50505050565b8451865294850194909301920161151b565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526032600452602487fd5b885162461bcd60e51b8152600481018d9052600c60248201526b57524f4e475f44454752454560a01b6044820152606490fd5b506028611481565b885162461bcd60e51b8152600481018d905260096024820152681513d3d7d4d213d49560ba1b6044820152606490fd5b865162461bcd60e51b81528061168e60048201611377565b0390fd5b61169d9150836112a7565b6000198101915081116116b757606083013510153861145e565b634e487b7160e01b86526011600452602486fd5b919082018092116110b757565b91908110156110795760051b0190565b6001600160401b03908116600081815260016020818152604080842080546001600160a01b039a93999498919792969395949192919061172b908c163314611231565b838552888a5261173f6113f48887206121b1565b6007880195600260ff88548a1c1661175681610ee9565b0361198d57908a93929161178760068b01546114418b87019761177c61142f8a8a6112a7565b9088013588356121c8565b600261179386866112a7565b9050108015611969575b611951578c8b95938a60c48f9495866118189997848e8e81528d8a5220956117cf6117c78b612221565b909e146119c6565b6007886117df60058a0154611174565b1697015416928760045416958051946117f786610f09565b85528985019687526118098c8c6112a7565b9d9060608d01359e8f916116d8565b3590519d8e998a988997635d3adcfb60e01b8952516004890152511660248701526044860152606485015260a060848501528160a48501528484013781810183018d9052601f01601f191681010301915afa938415611947578694611916575b5090611883916112a7565b908983018093116116b7579061189992916116d8565b35146118e357908160ff9493927fc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e8380a281528587526006838220015554901c1661155181610ee9565b835162461bcd60e51b815260048101889052600c60248201526b14d0535157d3d4d417d1539160a21b6044820152606490fd5b9093508a81813d8311611940575b61192e8183610f70565b81010312610e42575192611883611878565b503d611924565b88513d88823e3d90fd5b885162461bcd60e51b81528061168e60048201611377565b5061197485856112a7565b6000198101915081116115e3576060850135101561179d565b875162461bcd60e51b8152600481018c9052601260248201527121a420a62fa727aa2fa2ac22a1aaaa24a7a760711b6044820152606490fd5b156119cd57565b60405162461bcd60e51b8152602060048201526008602482015267544f4f5f4c4f4e4760c01b6044820152606490fd5b6001600160401b038116600081815260016020526040808220805490966001600160a01b039692959394909391611a379088163314611231565b84526001602052611a4c6113f48686206121b1565b6007870193600160ff8654881c16611a6381610ee9565b03611b9d57600688015490611a9187850192611441611a8561142f86896112a7565b602088013588356121c8565b6002611a9d83866112a7565b905010918215611b60575b5050611b485791611abd9160ff959493611bd2565b54901c16611aca81610ee9565b15611b44576003611ada83610f93565b926004810193611aeb85544261136a565b93611afb6020830195865161136a565b948590526002830191611b22565b5182546001600160a01b03191691161790550155429055565b825484546001600160a01b031916908316178455848401546001850155611b09565b5050565b845162461bcd60e51b81528061168e60048201611377565b611b6c919250846112a7565b60001981019291508211611b895750606083013510153880611aa8565b634e487b7160e01b81526011600452602490fd5b855162461bcd60e51b815260206004820152600e60248201526d4348414c5f4e4f545f424c4f434b60901b6044820152606490fd5b9291909260018210611f0e576001602b1b8211611ed45760443590600492838310156102875760843591611c068385611fc2565b96606435938685101561028757611c5698600195611c3260a43592611c2b8484611fc2565b90866122b6565b868060401b038516986000938a8552602099898b52611c5e60409e8f882098612221565b909b146119c6565b611c6781610fba565b60018103611e5a5750908291611c828e999897969594610fba565b60028314611e0a575b88519d8e611c9881610f55565b600281528c369101376005860154906001600160a01b03611cb883611174565b16918a51916301265ef960e21b83528483015260248201528b81604481855afa908115611e0057918f9492918d94928891611dc4575b50611cfc604494959661106c565b528a5163d8558b8760e01b81529586948593611d1782610fba565b84015260248301525afa918215611db9578092611d86575b5050916007611d7f94928b94611d677f24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db9b9c9d61108f565b5201805460ff60401b1916600160411b1790556120c7565b51908152a2565b9091508782813d8311611db2575b611d9e8183610f70565b8101031261015b5750516007611d7f611d2f565b503d611d94565b8651903d90823e3d90fd5b929480929496508391503d8311611df9575b611de08183610f70565b81010312610e4257518e938c9390929091611cfc611cee565b503d611dd6565b8a513d88823e3d90fd5b909192809495969798508103611e2857908c97969594939291611c8b565b8c5162461bcd60e51b81528083018b9052600c60248201526b4552524f525f4348414e474560a01b6044820152606490fd5b93955095509550919899979550611e7082610fba565b611e7981610fba565b149182611eca575b505015611e975750835260019052812060060155565b835162461bcd60e51b8152908101839052600d60248201526c48414c5445445f4348414e474560981b6044820152606490fd5b1490503880611e81565b60405162461bcd60e51b81526020600482015260126024820152714348414c4c454e47455f544f4f5f4c4f4e4760701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527210d2105313115391d157d513d3d7d4d213d495606a1b6044820152606490fd5b8051906020808351930151910151602081519101516040519260208401946c23b637b130b61039ba30ba329d60991b8652602d850152604d84015260018060c01b0319809260c01b16606d84015260c01b166075820152605d81526080810181811060018060401b03821117610f245760405251902090565b611fcb81610fba565b60018103612006575060405160208101916b213637b1b59039ba30ba329d60a11b8352602c820152602c815261200081610f55565b51902090565b61200f81610fba565b6002810361204d5750604051602081019174213637b1b59039ba30ba32961032b93937b932b21d60591b835260358201526035815261200081610f55565b6003915061205a81610fba565b0361208f57604051602081019074213637b1b59039ba30ba3296103a37b7903330b91d60591b82526015815261200081610f09565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b6044820152606490fd5b916001916120d860018210156110cd565b6120e66002835110156110cd565b604051906020938483019160009283815281604086015260608501948651958888018097875b81811061219e57505050816121299103601f198101835282610f70565b5190209660018060401b031695868452600181528760066040862001556040519560608701928588528288015260606040880152518092526080860194935b82811061218b5750505050509080600080516020612389833981519152920390a3565b8451865294810194938101938301612168565b82518452928b0192918b0191870161210c565b60016121c160048301544261136a565b9101541090565b9190604051809260209260208301958652604083015260608201602082519192019360005b82811061220a57505050612000925003601f198101835282610f70565b8551845294810194869450928101926001016121ed565b90604082019061223182846112a7565b6000198101915081116110b757602084013581156122a05781810493606086013590818602908682048314871517156110b7576122726122789289356116cb565b976112a7565b600119810192915082116110b7571461228f575050565b9061229d92939106906116cb565b90565b634e487b7160e01b600052601260045260246000fd5b6122d89160408201906122c982846112a7565b949060608501359586916116d8565b3503612335576122e7916112a7565b6001839293018092116110b7576122fd926116d8565b351461230557565b60405162461bcd60e51b815260206004820152600860248201526714d0535157d1539160c21b6044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201526a15d493d391d7d4d510549560aa1b6044820152606490fdfefdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f4086b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68a2646970667358221220115bec38ce8b5bef0b12e781664074168a7c8085f8a5e6c2122fca597d1d4eca64736f6c63430008190033",
}

// SingleExecutionChallengeABI is the input ABI used to generate the binding from.
// Deprecated: Use SingleExecutionChallengeMetaData.ABI instead.
var SingleExecutionChallengeABI = SingleExecutionChallengeMetaData.ABI

// SingleExecutionChallengeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SingleExecutionChallengeMetaData.Bin instead.
var SingleExecutionChallengeBin = SingleExecutionChallengeMetaData.Bin

// DeploySingleExecutionChallenge deploys a new Ethereum contract, binding an instance of SingleExecutionChallenge to it.
func DeploySingleExecutionChallenge(auth *bind.TransactOpts, backend bind.ContractBackend, osp_ common.Address, resultReceiver_ common.Address, maxInboxMessagesRead_ uint64, startAndEndHashes [2][32]byte, numSteps_ *big.Int, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (common.Address, *types.Transaction, *SingleExecutionChallenge, error) {
	parsed, err := SingleExecutionChallengeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SingleExecutionChallengeBin), backend, osp_, resultReceiver_, maxInboxMessagesRead_, startAndEndHashes, numSteps_, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SingleExecutionChallenge{SingleExecutionChallengeCaller: SingleExecutionChallengeCaller{contract: contract}, SingleExecutionChallengeTransactor: SingleExecutionChallengeTransactor{contract: contract}, SingleExecutionChallengeFilterer: SingleExecutionChallengeFilterer{contract: contract}}, nil
}

// SingleExecutionChallenge is an auto generated Go binding around an Ethereum contract.
type SingleExecutionChallenge struct {
	SingleExecutionChallengeCaller     // Read-only binding to the contract
	SingleExecutionChallengeTransactor // Write-only binding to the contract
	SingleExecutionChallengeFilterer   // Log filterer for contract events
}

// SingleExecutionChallengeCaller is an auto generated read-only Go binding around an Ethereum contract.
type SingleExecutionChallengeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SingleExecutionChallengeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SingleExecutionChallengeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SingleExecutionChallengeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SingleExecutionChallengeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SingleExecutionChallengeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SingleExecutionChallengeSession struct {
	Contract     *SingleExecutionChallenge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SingleExecutionChallengeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SingleExecutionChallengeCallerSession struct {
	Contract *SingleExecutionChallengeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// SingleExecutionChallengeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SingleExecutionChallengeTransactorSession struct {
	Contract     *SingleExecutionChallengeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// SingleExecutionChallengeRaw is an auto generated low-level Go binding around an Ethereum contract.
type SingleExecutionChallengeRaw struct {
	Contract *SingleExecutionChallenge // Generic contract binding to access the raw methods on
}

// SingleExecutionChallengeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SingleExecutionChallengeCallerRaw struct {
	Contract *SingleExecutionChallengeCaller // Generic read-only contract binding to access the raw methods on
}

// SingleExecutionChallengeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SingleExecutionChallengeTransactorRaw struct {
	Contract *SingleExecutionChallengeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSingleExecutionChallenge creates a new instance of SingleExecutionChallenge, bound to a specific deployed contract.
func NewSingleExecutionChallenge(address common.Address, backend bind.ContractBackend) (*SingleExecutionChallenge, error) {
	contract, err := bindSingleExecutionChallenge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallenge{SingleExecutionChallengeCaller: SingleExecutionChallengeCaller{contract: contract}, SingleExecutionChallengeTransactor: SingleExecutionChallengeTransactor{contract: contract}, SingleExecutionChallengeFilterer: SingleExecutionChallengeFilterer{contract: contract}}, nil
}

// NewSingleExecutionChallengeCaller creates a new read-only instance of SingleExecutionChallenge, bound to a specific deployed contract.
func NewSingleExecutionChallengeCaller(address common.Address, caller bind.ContractCaller) (*SingleExecutionChallengeCaller, error) {
	contract, err := bindSingleExecutionChallenge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeCaller{contract: contract}, nil
}

// NewSingleExecutionChallengeTransactor creates a new write-only instance of SingleExecutionChallenge, bound to a specific deployed contract.
func NewSingleExecutionChallengeTransactor(address common.Address, transactor bind.ContractTransactor) (*SingleExecutionChallengeTransactor, error) {
	contract, err := bindSingleExecutionChallenge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeTransactor{contract: contract}, nil
}

// NewSingleExecutionChallengeFilterer creates a new log filterer instance of SingleExecutionChallenge, bound to a specific deployed contract.
func NewSingleExecutionChallengeFilterer(address common.Address, filterer bind.ContractFilterer) (*SingleExecutionChallengeFilterer, error) {
	contract, err := bindSingleExecutionChallenge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeFilterer{contract: contract}, nil
}

// bindSingleExecutionChallenge binds a generic wrapper to an already deployed contract.
func bindSingleExecutionChallenge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SingleExecutionChallengeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SingleExecutionChallenge *SingleExecutionChallengeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleExecutionChallenge.Contract.SingleExecutionChallengeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SingleExecutionChallenge *SingleExecutionChallengeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.SingleExecutionChallengeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SingleExecutionChallenge *SingleExecutionChallengeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.SingleExecutionChallengeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleExecutionChallenge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) Bridge() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.Bridge(&_SingleExecutionChallenge.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) Bridge() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.Bridge(&_SingleExecutionChallenge.CallOpts)
}

// ChallengeInfo is a free data retrieval call binding the contract method 0x7fd07a9c.
//
// Solidity: function challengeInfo(uint64 challengeIndex) view returns(((address,uint256),(address,uint256),uint256,bytes32,bytes32,uint64,uint8))
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) ChallengeInfo(opts *bind.CallOpts, challengeIndex uint64) (ChallengeLibChallenge, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "challengeInfo", challengeIndex)

	if err != nil {
		return *new(ChallengeLibChallenge), err
	}

	out0 := *abi.ConvertType(out[0], new(ChallengeLibChallenge)).(*ChallengeLibChallenge)

	return out0, err

}

// ChallengeInfo is a free data retrieval call binding the contract method 0x7fd07a9c.
//
// Solidity: function challengeInfo(uint64 challengeIndex) view returns(((address,uint256),(address,uint256),uint256,bytes32,bytes32,uint64,uint8))
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) ChallengeInfo(challengeIndex uint64) (ChallengeLibChallenge, error) {
	return _SingleExecutionChallenge.Contract.ChallengeInfo(&_SingleExecutionChallenge.CallOpts, challengeIndex)
}

// ChallengeInfo is a free data retrieval call binding the contract method 0x7fd07a9c.
//
// Solidity: function challengeInfo(uint64 challengeIndex) view returns(((address,uint256),(address,uint256),uint256,bytes32,bytes32,uint64,uint8))
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) ChallengeInfo(challengeIndex uint64) (ChallengeLibChallenge, error) {
	return _SingleExecutionChallenge.Contract.ChallengeInfo(&_SingleExecutionChallenge.CallOpts, challengeIndex)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns((address,uint256) current, (address,uint256) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "challenges", arg0)

	outstruct := new(struct {
		Current            ChallengeLibParticipant
		Next               ChallengeLibParticipant
		LastMoveTimestamp  *big.Int
		WasmModuleRoot     [32]byte
		ChallengeStateHash [32]byte
		MaxInboxMessages   uint64
		Mode               uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Current = *abi.ConvertType(out[0], new(ChallengeLibParticipant)).(*ChallengeLibParticipant)
	outstruct.Next = *abi.ConvertType(out[1], new(ChallengeLibParticipant)).(*ChallengeLibParticipant)
	outstruct.LastMoveTimestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.WasmModuleRoot = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.ChallengeStateHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.MaxInboxMessages = *abi.ConvertType(out[5], new(uint64)).(*uint64)
	outstruct.Mode = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns((address,uint256) current, (address,uint256) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) Challenges(arg0 *big.Int) (struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}, error) {
	return _SingleExecutionChallenge.Contract.Challenges(&_SingleExecutionChallenge.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns((address,uint256) current, (address,uint256) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) Challenges(arg0 *big.Int) (struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}, error) {
	return _SingleExecutionChallenge.Contract.Challenges(&_SingleExecutionChallenge.CallOpts, arg0)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x23a9ef23.
//
// Solidity: function currentResponder(uint64 challengeIndex) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) CurrentResponder(opts *bind.CallOpts, challengeIndex uint64) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "currentResponder", challengeIndex)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentResponder is a free data retrieval call binding the contract method 0x23a9ef23.
//
// Solidity: function currentResponder(uint64 challengeIndex) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) CurrentResponder(challengeIndex uint64) (common.Address, error) {
	return _SingleExecutionChallenge.Contract.CurrentResponder(&_SingleExecutionChallenge.CallOpts, challengeIndex)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x23a9ef23.
//
// Solidity: function currentResponder(uint64 challengeIndex) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) CurrentResponder(challengeIndex uint64) (common.Address, error) {
	return _SingleExecutionChallenge.Contract.CurrentResponder(&_SingleExecutionChallenge.CallOpts, challengeIndex)
}

// GetOsp is a free data retrieval call binding the contract method 0x3690b011.
//
// Solidity: function getOsp(bytes32 wasmModuleRoot) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) GetOsp(opts *bind.CallOpts, wasmModuleRoot [32]byte) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "getOsp", wasmModuleRoot)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOsp is a free data retrieval call binding the contract method 0x3690b011.
//
// Solidity: function getOsp(bytes32 wasmModuleRoot) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) GetOsp(wasmModuleRoot [32]byte) (common.Address, error) {
	return _SingleExecutionChallenge.Contract.GetOsp(&_SingleExecutionChallenge.CallOpts, wasmModuleRoot)
}

// GetOsp is a free data retrieval call binding the contract method 0x3690b011.
//
// Solidity: function getOsp(bytes32 wasmModuleRoot) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) GetOsp(wasmModuleRoot [32]byte) (common.Address, error) {
	return _SingleExecutionChallenge.Contract.GetOsp(&_SingleExecutionChallenge.CallOpts, wasmModuleRoot)
}

// IsTimedOut is a free data retrieval call binding the contract method 0x9ede42b9.
//
// Solidity: function isTimedOut(uint64 challengeIndex) view returns(bool)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) IsTimedOut(opts *bind.CallOpts, challengeIndex uint64) (bool, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "isTimedOut", challengeIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTimedOut is a free data retrieval call binding the contract method 0x9ede42b9.
//
// Solidity: function isTimedOut(uint64 challengeIndex) view returns(bool)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) IsTimedOut(challengeIndex uint64) (bool, error) {
	return _SingleExecutionChallenge.Contract.IsTimedOut(&_SingleExecutionChallenge.CallOpts, challengeIndex)
}

// IsTimedOut is a free data retrieval call binding the contract method 0x9ede42b9.
//
// Solidity: function isTimedOut(uint64 challengeIndex) view returns(bool)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) IsTimedOut(challengeIndex uint64) (bool, error) {
	return _SingleExecutionChallenge.Contract.IsTimedOut(&_SingleExecutionChallenge.CallOpts, challengeIndex)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) Osp() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.Osp(&_SingleExecutionChallenge.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) Osp() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.Osp(&_SingleExecutionChallenge.CallOpts)
}

// OspCond is a free data retrieval call binding the contract method 0xdc74bf8b.
//
// Solidity: function ospCond(bytes32 ) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) OspCond(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "ospCond", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OspCond is a free data retrieval call binding the contract method 0xdc74bf8b.
//
// Solidity: function ospCond(bytes32 ) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) OspCond(arg0 [32]byte) (common.Address, error) {
	return _SingleExecutionChallenge.Contract.OspCond(&_SingleExecutionChallenge.CallOpts, arg0)
}

// OspCond is a free data retrieval call binding the contract method 0xdc74bf8b.
//
// Solidity: function ospCond(bytes32 ) view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) OspCond(arg0 [32]byte) (common.Address, error) {
	return _SingleExecutionChallenge.Contract.OspCond(&_SingleExecutionChallenge.CallOpts, arg0)
}

// ResultReceiver is a free data retrieval call binding the contract method 0x3504f1d7.
//
// Solidity: function resultReceiver() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) ResultReceiver(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "resultReceiver")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResultReceiver is a free data retrieval call binding the contract method 0x3504f1d7.
//
// Solidity: function resultReceiver() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) ResultReceiver() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.ResultReceiver(&_SingleExecutionChallenge.CallOpts)
}

// ResultReceiver is a free data retrieval call binding the contract method 0x3504f1d7.
//
// Solidity: function resultReceiver() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) ResultReceiver() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.ResultReceiver(&_SingleExecutionChallenge.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) SequencerInbox() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.SequencerInbox(&_SingleExecutionChallenge.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) SequencerInbox() (common.Address, error) {
	return _SingleExecutionChallenge.Contract.SequencerInbox(&_SingleExecutionChallenge.CallOpts)
}

// TotalChallengesCreated is a free data retrieval call binding the contract method 0x5ef489e6.
//
// Solidity: function totalChallengesCreated() view returns(uint64)
func (_SingleExecutionChallenge *SingleExecutionChallengeCaller) TotalChallengesCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _SingleExecutionChallenge.contract.Call(opts, &out, "totalChallengesCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalChallengesCreated is a free data retrieval call binding the contract method 0x5ef489e6.
//
// Solidity: function totalChallengesCreated() view returns(uint64)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) TotalChallengesCreated() (uint64, error) {
	return _SingleExecutionChallenge.Contract.TotalChallengesCreated(&_SingleExecutionChallenge.CallOpts)
}

// TotalChallengesCreated is a free data retrieval call binding the contract method 0x5ef489e6.
//
// Solidity: function totalChallengesCreated() view returns(uint64)
func (_SingleExecutionChallenge *SingleExecutionChallengeCallerSession) TotalChallengesCreated() (uint64, error) {
	return _SingleExecutionChallenge.Contract.TotalChallengesCreated(&_SingleExecutionChallenge.CallOpts)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xa521b032.
//
// Solidity: function bisectExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes32[] newSegments) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) BisectExecution(opts *bind.TransactOpts, challengeIndex uint64, selection ChallengeLibSegmentSelection, newSegments [][32]byte) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "bisectExecution", challengeIndex, selection, newSegments)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xa521b032.
//
// Solidity: function bisectExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes32[] newSegments) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) BisectExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, newSegments [][32]byte) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.BisectExecution(&_SingleExecutionChallenge.TransactOpts, challengeIndex, selection, newSegments)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xa521b032.
//
// Solidity: function bisectExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes32[] newSegments) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) BisectExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, newSegments [][32]byte) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.BisectExecution(&_SingleExecutionChallenge.TransactOpts, challengeIndex, selection, newSegments)
}

// ChallengeExecution is a paid mutator transaction binding the contract method 0xfb7be0a1.
//
// Solidity: function challengeExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) ChallengeExecution(opts *bind.TransactOpts, challengeIndex uint64, selection ChallengeLibSegmentSelection, machineStatuses [2]uint8, globalStateHashes [2][32]byte, numSteps *big.Int) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "challengeExecution", challengeIndex, selection, machineStatuses, globalStateHashes, numSteps)
}

// ChallengeExecution is a paid mutator transaction binding the contract method 0xfb7be0a1.
//
// Solidity: function challengeExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) ChallengeExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, machineStatuses [2]uint8, globalStateHashes [2][32]byte, numSteps *big.Int) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.ChallengeExecution(&_SingleExecutionChallenge.TransactOpts, challengeIndex, selection, machineStatuses, globalStateHashes, numSteps)
}

// ChallengeExecution is a paid mutator transaction binding the contract method 0xfb7be0a1.
//
// Solidity: function challengeExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) ChallengeExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, machineStatuses [2]uint8, globalStateHashes [2][32]byte, numSteps *big.Int) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.ChallengeExecution(&_SingleExecutionChallenge.TransactOpts, challengeIndex, selection, machineStatuses, globalStateHashes, numSteps)
}

// ClearChallenge is a paid mutator transaction binding the contract method 0x56e9df97.
//
// Solidity: function clearChallenge(uint64 challengeIndex) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) ClearChallenge(opts *bind.TransactOpts, challengeIndex uint64) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "clearChallenge", challengeIndex)
}

// ClearChallenge is a paid mutator transaction binding the contract method 0x56e9df97.
//
// Solidity: function clearChallenge(uint64 challengeIndex) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) ClearChallenge(challengeIndex uint64) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.ClearChallenge(&_SingleExecutionChallenge.TransactOpts, challengeIndex)
}

// ClearChallenge is a paid mutator transaction binding the contract method 0x56e9df97.
//
// Solidity: function clearChallenge(uint64 challengeIndex) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) ClearChallenge(challengeIndex uint64) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.ClearChallenge(&_SingleExecutionChallenge.TransactOpts, challengeIndex)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) CreateChallenge(opts *bind.TransactOpts, wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "createChallenge", wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) CreateChallenge(wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.CreateChallenge(&_SingleExecutionChallenge.TransactOpts, wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) CreateChallenge(wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.CreateChallenge(&_SingleExecutionChallenge.TransactOpts, wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) Initialize(opts *bind.TransactOpts, resultReceiver_ common.Address, sequencerInbox_ common.Address, bridge_ common.Address, osp_ common.Address) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "initialize", resultReceiver_, sequencerInbox_, bridge_, osp_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) Initialize(resultReceiver_ common.Address, sequencerInbox_ common.Address, bridge_ common.Address, osp_ common.Address) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.Initialize(&_SingleExecutionChallenge.TransactOpts, resultReceiver_, sequencerInbox_, bridge_, osp_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) Initialize(resultReceiver_ common.Address, sequencerInbox_ common.Address, bridge_ common.Address, osp_ common.Address) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.Initialize(&_SingleExecutionChallenge.TransactOpts, resultReceiver_, sequencerInbox_, bridge_, osp_)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xd248d124.
//
// Solidity: function oneStepProveExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes proof) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) OneStepProveExecution(opts *bind.TransactOpts, challengeIndex uint64, selection ChallengeLibSegmentSelection, proof []byte) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "oneStepProveExecution", challengeIndex, selection, proof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xd248d124.
//
// Solidity: function oneStepProveExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes proof) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) OneStepProveExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, proof []byte) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.OneStepProveExecution(&_SingleExecutionChallenge.TransactOpts, challengeIndex, selection, proof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xd248d124.
//
// Solidity: function oneStepProveExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes proof) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) OneStepProveExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, proof []byte) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.OneStepProveExecution(&_SingleExecutionChallenge.TransactOpts, challengeIndex, selection, proof)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x5038934d.
//
// Solidity: function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) PostUpgradeInit(opts *bind.TransactOpts, osp_ common.Address, condRoot [32]byte, condOsp common.Address) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "postUpgradeInit", osp_, condRoot, condOsp)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x5038934d.
//
// Solidity: function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) PostUpgradeInit(osp_ common.Address, condRoot [32]byte, condOsp common.Address) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.PostUpgradeInit(&_SingleExecutionChallenge.TransactOpts, osp_, condRoot, condOsp)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x5038934d.
//
// Solidity: function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) PostUpgradeInit(osp_ common.Address, condRoot [32]byte, condOsp common.Address) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.PostUpgradeInit(&_SingleExecutionChallenge.TransactOpts, osp_, condRoot, condOsp)
}

// Timeout is a paid mutator transaction binding the contract method 0x1b45c86a.
//
// Solidity: function timeout(uint64 challengeIndex) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactor) Timeout(opts *bind.TransactOpts, challengeIndex uint64) (*types.Transaction, error) {
	return _SingleExecutionChallenge.contract.Transact(opts, "timeout", challengeIndex)
}

// Timeout is a paid mutator transaction binding the contract method 0x1b45c86a.
//
// Solidity: function timeout(uint64 challengeIndex) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeSession) Timeout(challengeIndex uint64) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.Timeout(&_SingleExecutionChallenge.TransactOpts, challengeIndex)
}

// Timeout is a paid mutator transaction binding the contract method 0x1b45c86a.
//
// Solidity: function timeout(uint64 challengeIndex) returns()
func (_SingleExecutionChallenge *SingleExecutionChallengeTransactorSession) Timeout(challengeIndex uint64) (*types.Transaction, error) {
	return _SingleExecutionChallenge.Contract.Timeout(&_SingleExecutionChallenge.TransactOpts, challengeIndex)
}

// SingleExecutionChallengeBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeBisectedIterator struct {
	Event *SingleExecutionChallengeBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SingleExecutionChallengeBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleExecutionChallengeBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SingleExecutionChallengeBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SingleExecutionChallengeBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SingleExecutionChallengeBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SingleExecutionChallengeBisected represents a Bisected event raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeBisected struct {
	ChallengeIndex          uint64
	ChallengeRoot           [32]byte
	ChallengedSegmentStart  *big.Int
	ChallengedSegmentLength *big.Int
	ChainHashes             [][32]byte
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0x86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68.
//
// Solidity: event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) FilterBisected(opts *bind.FilterOpts, challengeIndex []uint64, challengeRoot [][32]byte) (*SingleExecutionChallengeBisectedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}
	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.FilterLogs(opts, "Bisected", challengeIndexRule, challengeRootRule)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeBisectedIterator{contract: _SingleExecutionChallenge.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0x86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68.
//
// Solidity: event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *SingleExecutionChallengeBisected, challengeIndex []uint64, challengeRoot [][32]byte) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}
	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.WatchLogs(opts, "Bisected", challengeIndexRule, challengeRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SingleExecutionChallengeBisected)
				if err := _SingleExecutionChallenge.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0x86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68.
//
// Solidity: event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) ParseBisected(log types.Log) (*SingleExecutionChallengeBisected, error) {
	event := new(SingleExecutionChallengeBisected)
	if err := _SingleExecutionChallenge.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SingleExecutionChallengeChallengeEndedIterator is returned from FilterChallengeEnded and is used to iterate over the raw logs and unpacked data for ChallengeEnded events raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeChallengeEndedIterator struct {
	Event *SingleExecutionChallengeChallengeEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SingleExecutionChallengeChallengeEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleExecutionChallengeChallengeEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SingleExecutionChallengeChallengeEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SingleExecutionChallengeChallengeEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SingleExecutionChallengeChallengeEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SingleExecutionChallengeChallengeEnded represents a ChallengeEnded event raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeChallengeEnded struct {
	ChallengeIndex uint64
	Kind           uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChallengeEnded is a free log retrieval operation binding the contract event 0xfdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40.
//
// Solidity: event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) FilterChallengeEnded(opts *bind.FilterOpts, challengeIndex []uint64) (*SingleExecutionChallengeChallengeEndedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.FilterLogs(opts, "ChallengeEnded", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeChallengeEndedIterator{contract: _SingleExecutionChallenge.contract, event: "ChallengeEnded", logs: logs, sub: sub}, nil
}

// WatchChallengeEnded is a free log subscription operation binding the contract event 0xfdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40.
//
// Solidity: event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) WatchChallengeEnded(opts *bind.WatchOpts, sink chan<- *SingleExecutionChallengeChallengeEnded, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.WatchLogs(opts, "ChallengeEnded", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SingleExecutionChallengeChallengeEnded)
				if err := _SingleExecutionChallenge.contract.UnpackLog(event, "ChallengeEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeEnded is a log parse operation binding the contract event 0xfdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40.
//
// Solidity: event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) ParseChallengeEnded(log types.Log) (*SingleExecutionChallengeChallengeEnded, error) {
	event := new(SingleExecutionChallengeChallengeEnded)
	if err := _SingleExecutionChallenge.contract.UnpackLog(event, "ChallengeEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SingleExecutionChallengeExecutionChallengeBegunIterator is returned from FilterExecutionChallengeBegun and is used to iterate over the raw logs and unpacked data for ExecutionChallengeBegun events raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeExecutionChallengeBegunIterator struct {
	Event *SingleExecutionChallengeExecutionChallengeBegun // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SingleExecutionChallengeExecutionChallengeBegunIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleExecutionChallengeExecutionChallengeBegun)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SingleExecutionChallengeExecutionChallengeBegun)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SingleExecutionChallengeExecutionChallengeBegunIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SingleExecutionChallengeExecutionChallengeBegunIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SingleExecutionChallengeExecutionChallengeBegun represents a ExecutionChallengeBegun event raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeExecutionChallengeBegun struct {
	ChallengeIndex uint64
	BlockSteps     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterExecutionChallengeBegun is a free log retrieval operation binding the contract event 0x24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db.
//
// Solidity: event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) FilterExecutionChallengeBegun(opts *bind.FilterOpts, challengeIndex []uint64) (*SingleExecutionChallengeExecutionChallengeBegunIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.FilterLogs(opts, "ExecutionChallengeBegun", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeExecutionChallengeBegunIterator{contract: _SingleExecutionChallenge.contract, event: "ExecutionChallengeBegun", logs: logs, sub: sub}, nil
}

// WatchExecutionChallengeBegun is a free log subscription operation binding the contract event 0x24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db.
//
// Solidity: event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) WatchExecutionChallengeBegun(opts *bind.WatchOpts, sink chan<- *SingleExecutionChallengeExecutionChallengeBegun, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.WatchLogs(opts, "ExecutionChallengeBegun", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SingleExecutionChallengeExecutionChallengeBegun)
				if err := _SingleExecutionChallenge.contract.UnpackLog(event, "ExecutionChallengeBegun", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionChallengeBegun is a log parse operation binding the contract event 0x24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db.
//
// Solidity: event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) ParseExecutionChallengeBegun(log types.Log) (*SingleExecutionChallengeExecutionChallengeBegun, error) {
	event := new(SingleExecutionChallengeExecutionChallengeBegun)
	if err := _SingleExecutionChallenge.contract.UnpackLog(event, "ExecutionChallengeBegun", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SingleExecutionChallengeInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeInitiatedChallengeIterator struct {
	Event *SingleExecutionChallengeInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SingleExecutionChallengeInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleExecutionChallengeInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SingleExecutionChallengeInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SingleExecutionChallengeInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SingleExecutionChallengeInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SingleExecutionChallengeInitiatedChallenge represents a InitiatedChallenge event raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeInitiatedChallenge struct {
	ChallengeIndex uint64
	StartState     GlobalState
	EndState       GlobalState
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0x76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a.
//
// Solidity: event InitiatedChallenge(uint64 indexed challengeIndex, (bytes32[2],uint64[2]) startState, (bytes32[2],uint64[2]) endState)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts, challengeIndex []uint64) (*SingleExecutionChallengeInitiatedChallengeIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.FilterLogs(opts, "InitiatedChallenge", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeInitiatedChallengeIterator{contract: _SingleExecutionChallenge.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0x76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a.
//
// Solidity: event InitiatedChallenge(uint64 indexed challengeIndex, (bytes32[2],uint64[2]) startState, (bytes32[2],uint64[2]) endState)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *SingleExecutionChallengeInitiatedChallenge, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.WatchLogs(opts, "InitiatedChallenge", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SingleExecutionChallengeInitiatedChallenge)
				if err := _SingleExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0x76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a.
//
// Solidity: event InitiatedChallenge(uint64 indexed challengeIndex, (bytes32[2],uint64[2]) startState, (bytes32[2],uint64[2]) endState)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) ParseInitiatedChallenge(log types.Log) (*SingleExecutionChallengeInitiatedChallenge, error) {
	event := new(SingleExecutionChallengeInitiatedChallenge)
	if err := _SingleExecutionChallenge.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SingleExecutionChallengeOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeOneStepProofCompletedIterator struct {
	Event *SingleExecutionChallengeOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SingleExecutionChallengeOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleExecutionChallengeOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SingleExecutionChallengeOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SingleExecutionChallengeOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SingleExecutionChallengeOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SingleExecutionChallengeOneStepProofCompleted represents a OneStepProofCompleted event raised by the SingleExecutionChallenge contract.
type SingleExecutionChallengeOneStepProofCompleted struct {
	ChallengeIndex uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0xc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e.
//
// Solidity: event OneStepProofCompleted(uint64 indexed challengeIndex)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts, challengeIndex []uint64) (*SingleExecutionChallengeOneStepProofCompletedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.FilterLogs(opts, "OneStepProofCompleted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &SingleExecutionChallengeOneStepProofCompletedIterator{contract: _SingleExecutionChallenge.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0xc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e.
//
// Solidity: event OneStepProofCompleted(uint64 indexed challengeIndex)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *SingleExecutionChallengeOneStepProofCompleted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _SingleExecutionChallenge.contract.WatchLogs(opts, "OneStepProofCompleted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SingleExecutionChallengeOneStepProofCompleted)
				if err := _SingleExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0xc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e.
//
// Solidity: event OneStepProofCompleted(uint64 indexed challengeIndex)
func (_SingleExecutionChallenge *SingleExecutionChallengeFilterer) ParseOneStepProofCompleted(log types.Log) (*SingleExecutionChallengeOneStepProofCompleted, error) {
	event := new(SingleExecutionChallengeOneStepProofCompleted)
	if err := _SingleExecutionChallenge.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimedOutChallengeManagerMetaData contains all meta data concerning the TimedOutChallengeManager contract.
var TimedOutChallengeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedSegmentLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"chainHashes\",\"type\":\"bytes32[]\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumIChallengeManager.ChallengeTerminationType\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"ChallengeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockSteps\",\"type\":\"uint256\"}],\"name\":\"ExecutionChallengeBegun\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"indexed\":false,\"internalType\":\"structGlobalState\",\"name\":\"startState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"indexed\":false,\"internalType\":\"structGlobalState\",\"name\":\"endState\",\"type\":\"tuple\"}],\"name\":\"InitiatedChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"OneStepProofCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldSegmentsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSegmentsLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"oldSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"challengePosition\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.SegmentSelection\",\"name\":\"selection\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"newSegments\",\"type\":\"bytes32[]\"}],\"name\":\"bisectExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldSegmentsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSegmentsLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"oldSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"challengePosition\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.SegmentSelection\",\"name\":\"selection\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"globalStateHashes\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"numSteps\",\"type\":\"uint256\"}],\"name\":\"challengeExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"challengeInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"current\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"next\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"maxInboxMessages\",\"type\":\"uint64\"},{\"internalType\":\"enumChallengeLib.ChallengeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"structChallengeLib.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"current\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.Participant\",\"name\":\"next\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"maxInboxMessages\",\"type\":\"uint64\"},{\"internalType\":\"enumChallengeLib.ChallengeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"clearChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"startAndEndMachineStatuses_\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"startAndEndGlobalStates_\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asserter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asserterTimeLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengerTimeLeft_\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"currentResponder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"getOsp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIChallengeResultReceiver\",\"name\":\"resultReceiver_\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox_\",\"type\":\"address\"},{\"internalType\":\"contractIBridge\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"isTimedOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldSegmentsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSegmentsLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"oldSegments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"challengePosition\",\"type\":\"uint256\"}],\"internalType\":\"structChallengeLib.SegmentSelection\",\"name\":\"selection\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"oneStepProveExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ospCond\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"condRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"condOsp\",\"type\":\"address\"}],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resultReceiver\",\"outputs\":[{\"internalType\":\"contractIChallengeResultReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"}],\"name\":\"timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChallengesCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0806040523460295730608052611461908161002f82396080518181816101c401526107aa0152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816314eab5e7146109e2575080631b45c86a146108df57806323a9ef231461089e5780633504f1d7146108755780633690b011146108445780635038934d1461076e57806356e9df971461069f5780635ef489e6146106785780637fd07a9c146105385780638f1d3776146104985780639ede42b914610472578063a521b032146103e1578063d248d12414610351578063dc74bf8b1461031e578063e78cea92146102f5578063ee35f327146102cc578063f26a62c6146102a3578063f8c8765e1461016d5763fb7be0a1146100f257600080fd5b34610166576003199060e0368301126101665761010d610eea565b6001600160401b03929091906024358481116101695790608091360301126101665736608411610166573660c411610166575016600052600160205261016160018060a01b0360406000205416331461121e565b611258565b80fd5b8280fd5b5034610166576080366003190112610166576004356001600160a01b03818116918290036101695760243581811680910361029f576044359082821680920361029b5760643593838516809503610296576101ec847f00000000000000000000000000000000000000000000000000000000000000001630141561118d565b6002549384166102625780156102285760018060a01b031980941617600255826003541617600355816004541617600455600554161760055580f35b60405162461bcd60e51b81526020600482015260126024820152712727afa922a9aaa62a2fa922a1a2a4ab22a960711b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b6044820152606490fd5b600080fd5b8480fd5b8380fd5b50346101665780600319360112610166576005546040516001600160a01b039091168152602090f35b50346101665780600319360112610166576003546040516001600160a01b039091168152602090f35b50346101665780600319360112610166576004546040516001600160a01b039091168152602090f35b503461016657602036600319011261016657602090600435815260068252604060018060a01b0391205416604051908152f35b503461016657600319906060368301126101665761036d610eea565b6001600160401b0392909190602435848111610169579060809136030112610166576044358381116103dd57366023820112156103dd5780600401358481116101695736910160240111610166575016600052600160205261016160018060a01b0360406000205416331461121e565b5080fd5b50346101665760031990606036830112610166576103fd610eea565b6001600160401b0392909190602435848111610169579060809136030112610166576044358381116103dd57366023820112156103dd5780600401359084821161016957602490369260051b010111610166575016600052600160205261016160018060a01b0360406000205416331461121e565b50346101665760203660031901126101665761048c610eea565b50602060405160018152f35b50346101665760203660031901126101665760406101209160043581526001602052206104c481610fb3565b906104d160028201610fb3565b906004810154906005810154600760068301549201549261050a60ff8560401c16956105006040518099610f14565b6040880190610f14565b608086015260a085015260c08401526001600160401b031660e083015261053081610f2c565b610100820152f35b5034610166576020806003193601126103dd579061012091604061055a610eea565b928060c0835161056981610f7d565b845161057481610f4c565b600081526000878201528152845161058b81610f4c565b600081526000878201528682015282858201528260608201528260808201528260a08201520152600180831b038094168152600183522091604051926105d084610f7d565b6105d981610fb3565b84526105e760028201610fb3565b9284019283526004810154906040850191825260058101546060860190815260076006830154926080880193845201549261065560ff60a0890195878116875260401c169660c089019761063a81610f2c565b885261064a604051809a51610f14565b516040890190610f14565b5160808701525160a08601525160c0850152511660e08301525161053081610f2c565b5034610166578060031936011261016657546040516001600160401b039091168152602090f35b5034610166576020366003190112610166576106b9610eea565b6002546001600160a01b03163303610736576001600160401b03168082526001602052604080832060070154610706911c60ff166106f681610f2c565b6106fe6110d7565b9015156110fa565b808252600160205261071a604083206111ee565b60008051602061140c833981519152602060405160038152a280f35b60405162461bcd60e51b815260206004820152601060248201526f2727aa2fa922a9afa922a1a2a4ab22a960811b6044820152606490fd5b5034610166576060366003190112610166576004356001600160a01b03818116918290036102965760443590808216809203610296576107d2817f00000000000000000000000000000000000000000000000000000000000000001630141561118d565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354168033036108265750602435835260066020526040832060018060a01b03199182825416179055600554161760055580f35b60449060405190631194af8760e11b82523360048301526024820152fd5b5034610166576020366003190112610166576020610863600435611161565b6040516001600160a01b039091168152f35b50346101665780600319360112610166576002546040516001600160a01b039091168152602090f35b5034610166576020366003190112610166576020906001600160401b036108c3610eea565b16815260018252604060018060a01b0391205416604051908152f35b5034610166576020366003190112610166576001600160401b039081610903610eea565b1691828252600160205261092760ff600760408520015460401c166106f681610f2c565b828252600160205260408220600281015481546001600160a01b0391821693929082169190610955906111ee565b6002541692833b1561029b579060648592836040519687948593630357aa4960e01b85528b6004860152602485015260448401525af180156109d7576109b3575b828460008051602061140c8339815191526020604051848152a280f35b81116109c3576040523880610996565b634e487b7160e01b82526041600452602482fd5b6040513d85823e3d90fd5b9050346103dd576102003660031901126103dd57366064116103dd576101643681116101695735916001600160401b03831683036101665761018435926001600160a01b038085168503610169576101a43593818516850361029f5781600254163303610eb5575060405194610a5786610f98565b6002865260403660208801376004602435101561029f57608036606319011261029f57604051610a8681610f4c565b366083121561029b57604051610a9b81610f4c565b803660a411610ea1576064905b60a48210610ea557505081523660c3121561029b57604051610ac981610f4c565b803660e411610ea15760a4905b60e48210610e8957505081610af2916020610afa94015261128d565b602435611306565b865115610e755760208701526004604435101561029f57610b2c610b24610b1f610fe4565b61128d565b604435611306565b865160011015610e755760408701528354946001600160401b03610b5181881661108c565b166001600160401b03199690961686178555610b6e8615156110ba565b85855260016020908152604086206004356005820155906001600160401b0390610b96610fe4565b0151511692610ba6604435610fda565b6002604435148015610e55575b610e45575b6007820194855493604051610bcc81610f4c565b828416815260206101c435910152600284018260018060a01b03199416848254161790556101c4356003850155604051610c0581610f4c565b91168082526101e4356020909201829052835490921690911782556001820155426004909101556001600160481b0319166001600160401b0390911617600160401b1790556040805184916064823760a484604083015b60028210610e1757505050604060e460808301376101248460c083015b60028210610de9575050506101007f76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a91a2610cc060016001600160401b03831610156110ba565b610cce6002855110156110ba565b604051906020820183815260018060401b0382166040840152826060810187516020890190875b818110610dd057505050601f199190038181018552601f01168301926001600160401b03841181851017610dbc5783604095939552519020928482526001602052836006604084200155606083019082845260018060401b031660208401526060604084015285518091526020608084019601915b818110610da6575050507f86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d688184926020960390a3604051908152f35b8251875260209687019690920191600101610d6a565b634e487b7160e01b85526041600452602485fd5b8251845287945060209384019390920191600101610cf5565b929350909160019060209081906001600160401b03610e0787610f00565b1681520193019101869392610c79565b929350909160019060209081906001600160401b03610e3587610f00565b1681520193019101869392610c5c565b92610e4f9061108c565b92610bb8565b506001600160401b03602080610e69610fe4565b01510151161515610bb3565b634e487b7160e01b85526032600452602485fd5b60208091610e9684610f00565b815201910190610ad6565b8680fd5b8135815260209182019101610aa8565b62461bcd60e51b815260206004820152601060248201526f13d3931657d493d313155417d0d2105360821b6044820152606490fd5b600435906001600160401b038216820361029657565b35906001600160401b038216820361029657565b80516001600160a01b03168252602090810151910152565b60031115610f3657565b634e487b7160e01b600052602160045260246000fd5b604081019081106001600160401b03821117610f6757604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117610f6757604052565b606081019081106001600160401b03821117610f6757604052565b90604051610fc081610f4c565b82546001600160a01b031681526001909201546020830152565b60041115610f3657565b60803660e319011261029657604051610ffc81610f4c565b3661010312156102965760405161101281610f4c565b80610124913683116102965760e4905b83821061107c5750508252366101431215610296576040519061104482610f4c565b816101649136831161029657905b82821061106457505050602082015290565b6020809161107184610f00565b815201910190611052565b8135815260209182019101611022565b6001600160401b039081169081146110a45760010190565b634e487b7160e01b600052601160045260246000fd5b156110c157565b634e487b7160e01b600052600160045260246000fd5b604051906110e482610f4c565b60078252661393d7d0d2105360ca1b6020830152565b156111025750565b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611148575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611125565b6000908152600660205260409020546001600160a01b039081168061118857506005541690565b905090565b1561119457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b60076000918281558260018201558260028201558260038201558260048201558260058201558260068201550155565b1561122557565b60405162461bcd60e51b815260206004820152600b60248201526a21a420a62fa9a2a72222a960a91b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c4348414c5f444541444c494e4560981b6044820152606490fd5b8051906020808351930151910151602081519101516040519260208401946c23b637b130b61039ba30ba329d60991b8652602d850152604d84015260018060c01b0319809260c01b16606d84015260c01b166075820152605d81526080810181811060018060401b03821117610f675760405251902090565b61130f81610fda565b6001810361134a575060405160208101916b213637b1b59039ba30ba329d60a11b8352602c820152602c815261134481610f98565b51902090565b61135381610fda565b600281036113915750604051602081019174213637b1b59039ba30ba32961032b93937b932b21d60591b835260358201526035815261134481610f98565b6003915061139e81610fda565b036113d357604051602081019074213637b1b59039ba30ba3296103a37b7903330b91d60591b82526015815261134481610f4c565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b6044820152606490fdfefdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40a2646970667358221220a1f53905d9692246b27f646020503776966fba47c4c7c593f8d92a456c52d72e64736f6c63430008190033",
}

// TimedOutChallengeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use TimedOutChallengeManagerMetaData.ABI instead.
var TimedOutChallengeManagerABI = TimedOutChallengeManagerMetaData.ABI

// TimedOutChallengeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TimedOutChallengeManagerMetaData.Bin instead.
var TimedOutChallengeManagerBin = TimedOutChallengeManagerMetaData.Bin

// DeployTimedOutChallengeManager deploys a new Ethereum contract, binding an instance of TimedOutChallengeManager to it.
func DeployTimedOutChallengeManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TimedOutChallengeManager, error) {
	parsed, err := TimedOutChallengeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TimedOutChallengeManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TimedOutChallengeManager{TimedOutChallengeManagerCaller: TimedOutChallengeManagerCaller{contract: contract}, TimedOutChallengeManagerTransactor: TimedOutChallengeManagerTransactor{contract: contract}, TimedOutChallengeManagerFilterer: TimedOutChallengeManagerFilterer{contract: contract}}, nil
}

// TimedOutChallengeManager is an auto generated Go binding around an Ethereum contract.
type TimedOutChallengeManager struct {
	TimedOutChallengeManagerCaller     // Read-only binding to the contract
	TimedOutChallengeManagerTransactor // Write-only binding to the contract
	TimedOutChallengeManagerFilterer   // Log filterer for contract events
}

// TimedOutChallengeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type TimedOutChallengeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TimedOutChallengeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TimedOutChallengeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TimedOutChallengeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TimedOutChallengeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TimedOutChallengeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TimedOutChallengeManagerSession struct {
	Contract     *TimedOutChallengeManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TimedOutChallengeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TimedOutChallengeManagerCallerSession struct {
	Contract *TimedOutChallengeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// TimedOutChallengeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TimedOutChallengeManagerTransactorSession struct {
	Contract     *TimedOutChallengeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// TimedOutChallengeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type TimedOutChallengeManagerRaw struct {
	Contract *TimedOutChallengeManager // Generic contract binding to access the raw methods on
}

// TimedOutChallengeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TimedOutChallengeManagerCallerRaw struct {
	Contract *TimedOutChallengeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// TimedOutChallengeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TimedOutChallengeManagerTransactorRaw struct {
	Contract *TimedOutChallengeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTimedOutChallengeManager creates a new instance of TimedOutChallengeManager, bound to a specific deployed contract.
func NewTimedOutChallengeManager(address common.Address, backend bind.ContractBackend) (*TimedOutChallengeManager, error) {
	contract, err := bindTimedOutChallengeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManager{TimedOutChallengeManagerCaller: TimedOutChallengeManagerCaller{contract: contract}, TimedOutChallengeManagerTransactor: TimedOutChallengeManagerTransactor{contract: contract}, TimedOutChallengeManagerFilterer: TimedOutChallengeManagerFilterer{contract: contract}}, nil
}

// NewTimedOutChallengeManagerCaller creates a new read-only instance of TimedOutChallengeManager, bound to a specific deployed contract.
func NewTimedOutChallengeManagerCaller(address common.Address, caller bind.ContractCaller) (*TimedOutChallengeManagerCaller, error) {
	contract, err := bindTimedOutChallengeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerCaller{contract: contract}, nil
}

// NewTimedOutChallengeManagerTransactor creates a new write-only instance of TimedOutChallengeManager, bound to a specific deployed contract.
func NewTimedOutChallengeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*TimedOutChallengeManagerTransactor, error) {
	contract, err := bindTimedOutChallengeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerTransactor{contract: contract}, nil
}

// NewTimedOutChallengeManagerFilterer creates a new log filterer instance of TimedOutChallengeManager, bound to a specific deployed contract.
func NewTimedOutChallengeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*TimedOutChallengeManagerFilterer, error) {
	contract, err := bindTimedOutChallengeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerFilterer{contract: contract}, nil
}

// bindTimedOutChallengeManager binds a generic wrapper to an already deployed contract.
func bindTimedOutChallengeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TimedOutChallengeManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TimedOutChallengeManager *TimedOutChallengeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TimedOutChallengeManager.Contract.TimedOutChallengeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TimedOutChallengeManager *TimedOutChallengeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.TimedOutChallengeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TimedOutChallengeManager *TimedOutChallengeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.TimedOutChallengeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TimedOutChallengeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) Bridge() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.Bridge(&_TimedOutChallengeManager.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) Bridge() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.Bridge(&_TimedOutChallengeManager.CallOpts)
}

// ChallengeInfo is a free data retrieval call binding the contract method 0x7fd07a9c.
//
// Solidity: function challengeInfo(uint64 challengeIndex) view returns(((address,uint256),(address,uint256),uint256,bytes32,bytes32,uint64,uint8))
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) ChallengeInfo(opts *bind.CallOpts, challengeIndex uint64) (ChallengeLibChallenge, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "challengeInfo", challengeIndex)

	if err != nil {
		return *new(ChallengeLibChallenge), err
	}

	out0 := *abi.ConvertType(out[0], new(ChallengeLibChallenge)).(*ChallengeLibChallenge)

	return out0, err

}

// ChallengeInfo is a free data retrieval call binding the contract method 0x7fd07a9c.
//
// Solidity: function challengeInfo(uint64 challengeIndex) view returns(((address,uint256),(address,uint256),uint256,bytes32,bytes32,uint64,uint8))
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) ChallengeInfo(challengeIndex uint64) (ChallengeLibChallenge, error) {
	return _TimedOutChallengeManager.Contract.ChallengeInfo(&_TimedOutChallengeManager.CallOpts, challengeIndex)
}

// ChallengeInfo is a free data retrieval call binding the contract method 0x7fd07a9c.
//
// Solidity: function challengeInfo(uint64 challengeIndex) view returns(((address,uint256),(address,uint256),uint256,bytes32,bytes32,uint64,uint8))
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) ChallengeInfo(challengeIndex uint64) (ChallengeLibChallenge, error) {
	return _TimedOutChallengeManager.Contract.ChallengeInfo(&_TimedOutChallengeManager.CallOpts, challengeIndex)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns((address,uint256) current, (address,uint256) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "challenges", arg0)

	outstruct := new(struct {
		Current            ChallengeLibParticipant
		Next               ChallengeLibParticipant
		LastMoveTimestamp  *big.Int
		WasmModuleRoot     [32]byte
		ChallengeStateHash [32]byte
		MaxInboxMessages   uint64
		Mode               uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Current = *abi.ConvertType(out[0], new(ChallengeLibParticipant)).(*ChallengeLibParticipant)
	outstruct.Next = *abi.ConvertType(out[1], new(ChallengeLibParticipant)).(*ChallengeLibParticipant)
	outstruct.LastMoveTimestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.WasmModuleRoot = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.ChallengeStateHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.MaxInboxMessages = *abi.ConvertType(out[5], new(uint64)).(*uint64)
	outstruct.Mode = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns((address,uint256) current, (address,uint256) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) Challenges(arg0 *big.Int) (struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}, error) {
	return _TimedOutChallengeManager.Contract.Challenges(&_TimedOutChallengeManager.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns((address,uint256) current, (address,uint256) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) Challenges(arg0 *big.Int) (struct {
	Current            ChallengeLibParticipant
	Next               ChallengeLibParticipant
	LastMoveTimestamp  *big.Int
	WasmModuleRoot     [32]byte
	ChallengeStateHash [32]byte
	MaxInboxMessages   uint64
	Mode               uint8
}, error) {
	return _TimedOutChallengeManager.Contract.Challenges(&_TimedOutChallengeManager.CallOpts, arg0)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x23a9ef23.
//
// Solidity: function currentResponder(uint64 challengeIndex) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) CurrentResponder(opts *bind.CallOpts, challengeIndex uint64) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "currentResponder", challengeIndex)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentResponder is a free data retrieval call binding the contract method 0x23a9ef23.
//
// Solidity: function currentResponder(uint64 challengeIndex) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) CurrentResponder(challengeIndex uint64) (common.Address, error) {
	return _TimedOutChallengeManager.Contract.CurrentResponder(&_TimedOutChallengeManager.CallOpts, challengeIndex)
}

// CurrentResponder is a free data retrieval call binding the contract method 0x23a9ef23.
//
// Solidity: function currentResponder(uint64 challengeIndex) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) CurrentResponder(challengeIndex uint64) (common.Address, error) {
	return _TimedOutChallengeManager.Contract.CurrentResponder(&_TimedOutChallengeManager.CallOpts, challengeIndex)
}

// GetOsp is a free data retrieval call binding the contract method 0x3690b011.
//
// Solidity: function getOsp(bytes32 wasmModuleRoot) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) GetOsp(opts *bind.CallOpts, wasmModuleRoot [32]byte) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "getOsp", wasmModuleRoot)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOsp is a free data retrieval call binding the contract method 0x3690b011.
//
// Solidity: function getOsp(bytes32 wasmModuleRoot) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) GetOsp(wasmModuleRoot [32]byte) (common.Address, error) {
	return _TimedOutChallengeManager.Contract.GetOsp(&_TimedOutChallengeManager.CallOpts, wasmModuleRoot)
}

// GetOsp is a free data retrieval call binding the contract method 0x3690b011.
//
// Solidity: function getOsp(bytes32 wasmModuleRoot) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) GetOsp(wasmModuleRoot [32]byte) (common.Address, error) {
	return _TimedOutChallengeManager.Contract.GetOsp(&_TimedOutChallengeManager.CallOpts, wasmModuleRoot)
}

// IsTimedOut is a free data retrieval call binding the contract method 0x9ede42b9.
//
// Solidity: function isTimedOut(uint64 ) pure returns(bool)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) IsTimedOut(opts *bind.CallOpts, arg0 uint64) (bool, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "isTimedOut", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTimedOut is a free data retrieval call binding the contract method 0x9ede42b9.
//
// Solidity: function isTimedOut(uint64 ) pure returns(bool)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) IsTimedOut(arg0 uint64) (bool, error) {
	return _TimedOutChallengeManager.Contract.IsTimedOut(&_TimedOutChallengeManager.CallOpts, arg0)
}

// IsTimedOut is a free data retrieval call binding the contract method 0x9ede42b9.
//
// Solidity: function isTimedOut(uint64 ) pure returns(bool)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) IsTimedOut(arg0 uint64) (bool, error) {
	return _TimedOutChallengeManager.Contract.IsTimedOut(&_TimedOutChallengeManager.CallOpts, arg0)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) Osp() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.Osp(&_TimedOutChallengeManager.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) Osp() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.Osp(&_TimedOutChallengeManager.CallOpts)
}

// OspCond is a free data retrieval call binding the contract method 0xdc74bf8b.
//
// Solidity: function ospCond(bytes32 ) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) OspCond(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "ospCond", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OspCond is a free data retrieval call binding the contract method 0xdc74bf8b.
//
// Solidity: function ospCond(bytes32 ) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) OspCond(arg0 [32]byte) (common.Address, error) {
	return _TimedOutChallengeManager.Contract.OspCond(&_TimedOutChallengeManager.CallOpts, arg0)
}

// OspCond is a free data retrieval call binding the contract method 0xdc74bf8b.
//
// Solidity: function ospCond(bytes32 ) view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) OspCond(arg0 [32]byte) (common.Address, error) {
	return _TimedOutChallengeManager.Contract.OspCond(&_TimedOutChallengeManager.CallOpts, arg0)
}

// ResultReceiver is a free data retrieval call binding the contract method 0x3504f1d7.
//
// Solidity: function resultReceiver() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) ResultReceiver(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "resultReceiver")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResultReceiver is a free data retrieval call binding the contract method 0x3504f1d7.
//
// Solidity: function resultReceiver() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) ResultReceiver() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.ResultReceiver(&_TimedOutChallengeManager.CallOpts)
}

// ResultReceiver is a free data retrieval call binding the contract method 0x3504f1d7.
//
// Solidity: function resultReceiver() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) ResultReceiver() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.ResultReceiver(&_TimedOutChallengeManager.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) SequencerInbox() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.SequencerInbox(&_TimedOutChallengeManager.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) SequencerInbox() (common.Address, error) {
	return _TimedOutChallengeManager.Contract.SequencerInbox(&_TimedOutChallengeManager.CallOpts)
}

// TotalChallengesCreated is a free data retrieval call binding the contract method 0x5ef489e6.
//
// Solidity: function totalChallengesCreated() view returns(uint64)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCaller) TotalChallengesCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _TimedOutChallengeManager.contract.Call(opts, &out, "totalChallengesCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalChallengesCreated is a free data retrieval call binding the contract method 0x5ef489e6.
//
// Solidity: function totalChallengesCreated() view returns(uint64)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) TotalChallengesCreated() (uint64, error) {
	return _TimedOutChallengeManager.Contract.TotalChallengesCreated(&_TimedOutChallengeManager.CallOpts)
}

// TotalChallengesCreated is a free data retrieval call binding the contract method 0x5ef489e6.
//
// Solidity: function totalChallengesCreated() view returns(uint64)
func (_TimedOutChallengeManager *TimedOutChallengeManagerCallerSession) TotalChallengesCreated() (uint64, error) {
	return _TimedOutChallengeManager.Contract.TotalChallengesCreated(&_TimedOutChallengeManager.CallOpts)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xa521b032.
//
// Solidity: function bisectExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes32[] newSegments) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) BisectExecution(opts *bind.TransactOpts, challengeIndex uint64, selection ChallengeLibSegmentSelection, newSegments [][32]byte) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "bisectExecution", challengeIndex, selection, newSegments)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xa521b032.
//
// Solidity: function bisectExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes32[] newSegments) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) BisectExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, newSegments [][32]byte) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.BisectExecution(&_TimedOutChallengeManager.TransactOpts, challengeIndex, selection, newSegments)
}

// BisectExecution is a paid mutator transaction binding the contract method 0xa521b032.
//
// Solidity: function bisectExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes32[] newSegments) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) BisectExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, newSegments [][32]byte) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.BisectExecution(&_TimedOutChallengeManager.TransactOpts, challengeIndex, selection, newSegments)
}

// ChallengeExecution is a paid mutator transaction binding the contract method 0xfb7be0a1.
//
// Solidity: function challengeExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) ChallengeExecution(opts *bind.TransactOpts, challengeIndex uint64, selection ChallengeLibSegmentSelection, machineStatuses [2]uint8, globalStateHashes [2][32]byte, numSteps *big.Int) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "challengeExecution", challengeIndex, selection, machineStatuses, globalStateHashes, numSteps)
}

// ChallengeExecution is a paid mutator transaction binding the contract method 0xfb7be0a1.
//
// Solidity: function challengeExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) ChallengeExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, machineStatuses [2]uint8, globalStateHashes [2][32]byte, numSteps *big.Int) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.ChallengeExecution(&_TimedOutChallengeManager.TransactOpts, challengeIndex, selection, machineStatuses, globalStateHashes, numSteps)
}

// ChallengeExecution is a paid mutator transaction binding the contract method 0xfb7be0a1.
//
// Solidity: function challengeExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) ChallengeExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, machineStatuses [2]uint8, globalStateHashes [2][32]byte, numSteps *big.Int) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.ChallengeExecution(&_TimedOutChallengeManager.TransactOpts, challengeIndex, selection, machineStatuses, globalStateHashes, numSteps)
}

// ClearChallenge is a paid mutator transaction binding the contract method 0x56e9df97.
//
// Solidity: function clearChallenge(uint64 challengeIndex) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) ClearChallenge(opts *bind.TransactOpts, challengeIndex uint64) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "clearChallenge", challengeIndex)
}

// ClearChallenge is a paid mutator transaction binding the contract method 0x56e9df97.
//
// Solidity: function clearChallenge(uint64 challengeIndex) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) ClearChallenge(challengeIndex uint64) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.ClearChallenge(&_TimedOutChallengeManager.TransactOpts, challengeIndex)
}

// ClearChallenge is a paid mutator transaction binding the contract method 0x56e9df97.
//
// Solidity: function clearChallenge(uint64 challengeIndex) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) ClearChallenge(challengeIndex uint64) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.ClearChallenge(&_TimedOutChallengeManager.TransactOpts, challengeIndex)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) CreateChallenge(opts *bind.TransactOpts, wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "createChallenge", wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) CreateChallenge(wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.CreateChallenge(&_TimedOutChallengeManager.TransactOpts, wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x14eab5e7.
//
// Solidity: function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, (bytes32[2],uint64[2])[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns(uint64)
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) CreateChallenge(wasmModuleRoot_ [32]byte, startAndEndMachineStatuses_ [2]uint8, startAndEndGlobalStates_ [2]GlobalState, numBlocks uint64, asserter_ common.Address, challenger_ common.Address, asserterTimeLeft_ *big.Int, challengerTimeLeft_ *big.Int) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.CreateChallenge(&_TimedOutChallengeManager.TransactOpts, wasmModuleRoot_, startAndEndMachineStatuses_, startAndEndGlobalStates_, numBlocks, asserter_, challenger_, asserterTimeLeft_, challengerTimeLeft_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) Initialize(opts *bind.TransactOpts, resultReceiver_ common.Address, sequencerInbox_ common.Address, bridge_ common.Address, osp_ common.Address) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "initialize", resultReceiver_, sequencerInbox_, bridge_, osp_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) Initialize(resultReceiver_ common.Address, sequencerInbox_ common.Address, bridge_ common.Address, osp_ common.Address) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.Initialize(&_TimedOutChallengeManager.TransactOpts, resultReceiver_, sequencerInbox_, bridge_, osp_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) Initialize(resultReceiver_ common.Address, sequencerInbox_ common.Address, bridge_ common.Address, osp_ common.Address) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.Initialize(&_TimedOutChallengeManager.TransactOpts, resultReceiver_, sequencerInbox_, bridge_, osp_)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xd248d124.
//
// Solidity: function oneStepProveExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes proof) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) OneStepProveExecution(opts *bind.TransactOpts, challengeIndex uint64, selection ChallengeLibSegmentSelection, proof []byte) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "oneStepProveExecution", challengeIndex, selection, proof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xd248d124.
//
// Solidity: function oneStepProveExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes proof) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) OneStepProveExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, proof []byte) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.OneStepProveExecution(&_TimedOutChallengeManager.TransactOpts, challengeIndex, selection, proof)
}

// OneStepProveExecution is a paid mutator transaction binding the contract method 0xd248d124.
//
// Solidity: function oneStepProveExecution(uint64 challengeIndex, (uint256,uint256,bytes32[],uint256) selection, bytes proof) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) OneStepProveExecution(challengeIndex uint64, selection ChallengeLibSegmentSelection, proof []byte) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.OneStepProveExecution(&_TimedOutChallengeManager.TransactOpts, challengeIndex, selection, proof)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x5038934d.
//
// Solidity: function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) PostUpgradeInit(opts *bind.TransactOpts, osp_ common.Address, condRoot [32]byte, condOsp common.Address) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "postUpgradeInit", osp_, condRoot, condOsp)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x5038934d.
//
// Solidity: function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) PostUpgradeInit(osp_ common.Address, condRoot [32]byte, condOsp common.Address) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.PostUpgradeInit(&_TimedOutChallengeManager.TransactOpts, osp_, condRoot, condOsp)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x5038934d.
//
// Solidity: function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) PostUpgradeInit(osp_ common.Address, condRoot [32]byte, condOsp common.Address) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.PostUpgradeInit(&_TimedOutChallengeManager.TransactOpts, osp_, condRoot, condOsp)
}

// Timeout is a paid mutator transaction binding the contract method 0x1b45c86a.
//
// Solidity: function timeout(uint64 challengeIndex) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactor) Timeout(opts *bind.TransactOpts, challengeIndex uint64) (*types.Transaction, error) {
	return _TimedOutChallengeManager.contract.Transact(opts, "timeout", challengeIndex)
}

// Timeout is a paid mutator transaction binding the contract method 0x1b45c86a.
//
// Solidity: function timeout(uint64 challengeIndex) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerSession) Timeout(challengeIndex uint64) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.Timeout(&_TimedOutChallengeManager.TransactOpts, challengeIndex)
}

// Timeout is a paid mutator transaction binding the contract method 0x1b45c86a.
//
// Solidity: function timeout(uint64 challengeIndex) returns()
func (_TimedOutChallengeManager *TimedOutChallengeManagerTransactorSession) Timeout(challengeIndex uint64) (*types.Transaction, error) {
	return _TimedOutChallengeManager.Contract.Timeout(&_TimedOutChallengeManager.TransactOpts, challengeIndex)
}

// TimedOutChallengeManagerBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerBisectedIterator struct {
	Event *TimedOutChallengeManagerBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimedOutChallengeManagerBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimedOutChallengeManagerBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimedOutChallengeManagerBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimedOutChallengeManagerBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimedOutChallengeManagerBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimedOutChallengeManagerBisected represents a Bisected event raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerBisected struct {
	ChallengeIndex          uint64
	ChallengeRoot           [32]byte
	ChallengedSegmentStart  *big.Int
	ChallengedSegmentLength *big.Int
	ChainHashes             [][32]byte
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0x86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68.
//
// Solidity: event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) FilterBisected(opts *bind.FilterOpts, challengeIndex []uint64, challengeRoot [][32]byte) (*TimedOutChallengeManagerBisectedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}
	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.FilterLogs(opts, "Bisected", challengeIndexRule, challengeRootRule)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerBisectedIterator{contract: _TimedOutChallengeManager.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0x86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68.
//
// Solidity: event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *TimedOutChallengeManagerBisected, challengeIndex []uint64, challengeRoot [][32]byte) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}
	var challengeRootRule []interface{}
	for _, challengeRootItem := range challengeRoot {
		challengeRootRule = append(challengeRootRule, challengeRootItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.WatchLogs(opts, "Bisected", challengeIndexRule, challengeRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimedOutChallengeManagerBisected)
				if err := _TimedOutChallengeManager.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0x86b34e9455464834eca718f62d4481437603bb929d8a78ccde5d1bc79fa06d68.
//
// Solidity: event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) ParseBisected(log types.Log) (*TimedOutChallengeManagerBisected, error) {
	event := new(TimedOutChallengeManagerBisected)
	if err := _TimedOutChallengeManager.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimedOutChallengeManagerChallengeEndedIterator is returned from FilterChallengeEnded and is used to iterate over the raw logs and unpacked data for ChallengeEnded events raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerChallengeEndedIterator struct {
	Event *TimedOutChallengeManagerChallengeEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimedOutChallengeManagerChallengeEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimedOutChallengeManagerChallengeEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimedOutChallengeManagerChallengeEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimedOutChallengeManagerChallengeEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimedOutChallengeManagerChallengeEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimedOutChallengeManagerChallengeEnded represents a ChallengeEnded event raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerChallengeEnded struct {
	ChallengeIndex uint64
	Kind           uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChallengeEnded is a free log retrieval operation binding the contract event 0xfdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40.
//
// Solidity: event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) FilterChallengeEnded(opts *bind.FilterOpts, challengeIndex []uint64) (*TimedOutChallengeManagerChallengeEndedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.FilterLogs(opts, "ChallengeEnded", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerChallengeEndedIterator{contract: _TimedOutChallengeManager.contract, event: "ChallengeEnded", logs: logs, sub: sub}, nil
}

// WatchChallengeEnded is a free log subscription operation binding the contract event 0xfdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40.
//
// Solidity: event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) WatchChallengeEnded(opts *bind.WatchOpts, sink chan<- *TimedOutChallengeManagerChallengeEnded, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.WatchLogs(opts, "ChallengeEnded", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimedOutChallengeManagerChallengeEnded)
				if err := _TimedOutChallengeManager.contract.UnpackLog(event, "ChallengeEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeEnded is a log parse operation binding the contract event 0xfdaece6c274a4b56af16761f83fd6b1062823192630ea08e019fdf9b2d747f40.
//
// Solidity: event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) ParseChallengeEnded(log types.Log) (*TimedOutChallengeManagerChallengeEnded, error) {
	event := new(TimedOutChallengeManagerChallengeEnded)
	if err := _TimedOutChallengeManager.contract.UnpackLog(event, "ChallengeEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimedOutChallengeManagerExecutionChallengeBegunIterator is returned from FilterExecutionChallengeBegun and is used to iterate over the raw logs and unpacked data for ExecutionChallengeBegun events raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerExecutionChallengeBegunIterator struct {
	Event *TimedOutChallengeManagerExecutionChallengeBegun // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimedOutChallengeManagerExecutionChallengeBegunIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimedOutChallengeManagerExecutionChallengeBegun)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimedOutChallengeManagerExecutionChallengeBegun)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimedOutChallengeManagerExecutionChallengeBegunIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimedOutChallengeManagerExecutionChallengeBegunIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimedOutChallengeManagerExecutionChallengeBegun represents a ExecutionChallengeBegun event raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerExecutionChallengeBegun struct {
	ChallengeIndex uint64
	BlockSteps     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterExecutionChallengeBegun is a free log retrieval operation binding the contract event 0x24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db.
//
// Solidity: event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) FilterExecutionChallengeBegun(opts *bind.FilterOpts, challengeIndex []uint64) (*TimedOutChallengeManagerExecutionChallengeBegunIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.FilterLogs(opts, "ExecutionChallengeBegun", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerExecutionChallengeBegunIterator{contract: _TimedOutChallengeManager.contract, event: "ExecutionChallengeBegun", logs: logs, sub: sub}, nil
}

// WatchExecutionChallengeBegun is a free log subscription operation binding the contract event 0x24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db.
//
// Solidity: event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) WatchExecutionChallengeBegun(opts *bind.WatchOpts, sink chan<- *TimedOutChallengeManagerExecutionChallengeBegun, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.WatchLogs(opts, "ExecutionChallengeBegun", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimedOutChallengeManagerExecutionChallengeBegun)
				if err := _TimedOutChallengeManager.contract.UnpackLog(event, "ExecutionChallengeBegun", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionChallengeBegun is a log parse operation binding the contract event 0x24e032e170243bbea97e140174b22dc7e54fb85925afbf52c70e001cd6af16db.
//
// Solidity: event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) ParseExecutionChallengeBegun(log types.Log) (*TimedOutChallengeManagerExecutionChallengeBegun, error) {
	event := new(TimedOutChallengeManagerExecutionChallengeBegun)
	if err := _TimedOutChallengeManager.contract.UnpackLog(event, "ExecutionChallengeBegun", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimedOutChallengeManagerInitiatedChallengeIterator is returned from FilterInitiatedChallenge and is used to iterate over the raw logs and unpacked data for InitiatedChallenge events raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerInitiatedChallengeIterator struct {
	Event *TimedOutChallengeManagerInitiatedChallenge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimedOutChallengeManagerInitiatedChallengeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimedOutChallengeManagerInitiatedChallenge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimedOutChallengeManagerInitiatedChallenge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimedOutChallengeManagerInitiatedChallengeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimedOutChallengeManagerInitiatedChallengeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimedOutChallengeManagerInitiatedChallenge represents a InitiatedChallenge event raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerInitiatedChallenge struct {
	ChallengeIndex uint64
	StartState     GlobalState
	EndState       GlobalState
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInitiatedChallenge is a free log retrieval operation binding the contract event 0x76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a.
//
// Solidity: event InitiatedChallenge(uint64 indexed challengeIndex, (bytes32[2],uint64[2]) startState, (bytes32[2],uint64[2]) endState)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) FilterInitiatedChallenge(opts *bind.FilterOpts, challengeIndex []uint64) (*TimedOutChallengeManagerInitiatedChallengeIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.FilterLogs(opts, "InitiatedChallenge", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerInitiatedChallengeIterator{contract: _TimedOutChallengeManager.contract, event: "InitiatedChallenge", logs: logs, sub: sub}, nil
}

// WatchInitiatedChallenge is a free log subscription operation binding the contract event 0x76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a.
//
// Solidity: event InitiatedChallenge(uint64 indexed challengeIndex, (bytes32[2],uint64[2]) startState, (bytes32[2],uint64[2]) endState)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) WatchInitiatedChallenge(opts *bind.WatchOpts, sink chan<- *TimedOutChallengeManagerInitiatedChallenge, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.WatchLogs(opts, "InitiatedChallenge", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimedOutChallengeManagerInitiatedChallenge)
				if err := _TimedOutChallengeManager.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedChallenge is a log parse operation binding the contract event 0x76604fe17af46c9b5f53ffe99ff23e0f655dab91886b07ac1fc0254319f7145a.
//
// Solidity: event InitiatedChallenge(uint64 indexed challengeIndex, (bytes32[2],uint64[2]) startState, (bytes32[2],uint64[2]) endState)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) ParseInitiatedChallenge(log types.Log) (*TimedOutChallengeManagerInitiatedChallenge, error) {
	event := new(TimedOutChallengeManagerInitiatedChallenge)
	if err := _TimedOutChallengeManager.contract.UnpackLog(event, "InitiatedChallenge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimedOutChallengeManagerOneStepProofCompletedIterator is returned from FilterOneStepProofCompleted and is used to iterate over the raw logs and unpacked data for OneStepProofCompleted events raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerOneStepProofCompletedIterator struct {
	Event *TimedOutChallengeManagerOneStepProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimedOutChallengeManagerOneStepProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimedOutChallengeManagerOneStepProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimedOutChallengeManagerOneStepProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimedOutChallengeManagerOneStepProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimedOutChallengeManagerOneStepProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimedOutChallengeManagerOneStepProofCompleted represents a OneStepProofCompleted event raised by the TimedOutChallengeManager contract.
type TimedOutChallengeManagerOneStepProofCompleted struct {
	ChallengeIndex uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOneStepProofCompleted is a free log retrieval operation binding the contract event 0xc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e.
//
// Solidity: event OneStepProofCompleted(uint64 indexed challengeIndex)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) FilterOneStepProofCompleted(opts *bind.FilterOpts, challengeIndex []uint64) (*TimedOutChallengeManagerOneStepProofCompletedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.FilterLogs(opts, "OneStepProofCompleted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &TimedOutChallengeManagerOneStepProofCompletedIterator{contract: _TimedOutChallengeManager.contract, event: "OneStepProofCompleted", logs: logs, sub: sub}, nil
}

// WatchOneStepProofCompleted is a free log subscription operation binding the contract event 0xc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e.
//
// Solidity: event OneStepProofCompleted(uint64 indexed challengeIndex)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) WatchOneStepProofCompleted(opts *bind.WatchOpts, sink chan<- *TimedOutChallengeManagerOneStepProofCompleted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _TimedOutChallengeManager.contract.WatchLogs(opts, "OneStepProofCompleted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimedOutChallengeManagerOneStepProofCompleted)
				if err := _TimedOutChallengeManager.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneStepProofCompleted is a log parse operation binding the contract event 0xc2cc42e04ff8c36de71c6a2937ea9f161dd0dd9e175f00caa26e5200643c781e.
//
// Solidity: event OneStepProofCompleted(uint64 indexed challengeIndex)
func (_TimedOutChallengeManager *TimedOutChallengeManagerFilterer) ParseOneStepProofCompleted(log types.Log) (*TimedOutChallengeManagerOneStepProofCompleted, error) {
	event := new(TimedOutChallengeManagerOneStepProofCompleted)
	if err := _TimedOutChallengeManager.contract.UnpackLog(event, "OneStepProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradeExecutorMockMetaData contains all meta data concerning the UpgradeExecutorMock contract.
var UpgradeExecutorMockMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TargetCallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upgrade\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"UpgradeExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgrade\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"upgradeCallData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461012057600160975560005460ff8160081c161591828093610113575b80156100fc575b156100a3575060ff19811660011760005581610091575b50610056575b6040516110ce90816101268239f35b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1610047565b61ffff19166101011760005538610041565b62461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561002a5750600160ff83161461002a565b50600160ff831610610023565b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a7146108ad5750806307bd0265146108845780631cff79cd146107da578063248a9ca3146107af5780632f2ff15d1461071457806336568abe1461068257806375b238fc1461065957806391d1485414610612578063946d92041461023d578063a217fddf1461021e578063bca8c7b5146100e85763d547741f146100a857600080fd5b346100e457806003193601126100e4576100e191356100dc60016100ca610901565b93838752606560205286200154610c63565b610df5565b80f35b8280fd5b5082906100f4366109a6565b906100fd610a6b565b610105610d6f565b8251946101118661091c565b603186527f557067726164654578656375746f723a20696e6e65722063616c6c206661696c60208701527032b2103bb4ba3437baba103932b0b9b7b760791b848701523447106101cc575061019e8495857f4d7dbdcc249630ec373f584267f10abf44938de920c32562f5aee93959c25258959685516020870134875af1610197610dc5565b9084610e6b565b506101c1845192839234845286602085015260018060a01b031695830190610a46565b0390a2600160975580f35b608490602085519162461bcd60e51b8352820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152fd5b83823461023957816003193601126102395751908152602090f35b5080fd5b5090346100e457816003193601126100e4576001600160a01b03908035828116919082900361060e5760248035939091906001600160401b0380861161060a573660238701121561060a57858301359081116105f85760058160051b966020978951936102ac8a830186610968565b84528689850191830101913683116105f4578701905b8282106105d85750505088549560ff94858860081c1615968780986105cc575b80156105b6575b1561055d57908b95949392916001998960ff19988c8a841617905561054c575b50821561050c57878d5460081c16156104b6575050928795949289928c88968d6000805160206110798339815191529081845260659760658152828b838720018181549155817fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9181838a80a4600080516020611059833981519152809d818952858920019183835493558880a482855281852084865281528b828620541615610480575b509291508190508a5b610406575b50505050505050505050506103cf578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff0019855416855551908152a13880808380f35b8d855183101561047a578b93878285881b8901015116918b845289815281842083855281528c828520541615610445575b50505050018c908e8a6103b7565b8b845289815281842090838552528220848a82541617905589600080516020611019833981519152339380a48e388f8f610437565b506103bc565b82855260658152818520908486525283208b89825416179055600080516020611019833981519152339380a48c38808e8e6103ae565b8b5162461bcd60e51b81529182018b9052602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b8b5162461bcd60e51b81529182018b9052601b908201527a2ab833b930b232a2bc32b1baba37b91d103d32b9379030b236b4b760291b6044820152606490fd5b61ffff1916610101178d5538610309565b8a5162461bcd60e51b81529182018a9052602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156102e957506001878a16146102e9565b506001878a16106102e2565b813586811681036105f05781529089019089016102c2565b8c80fd5b8b80fd5b634e487b7160e01b8852604183528388fd5b8780fd5b8480fd5b5090346100e457816003193601126100e4578160209360ff92610633610901565b90358252606586528282206001600160a01b039091168252855220549151911615158152f35b838234610239578160031936011261023957602090516000805160206110798339815191528152f35b5091903461023957826003193601126102395761069d610901565b90336001600160a01b038316036106b957906100e19135610df5565b608490602085519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b5090346100e457816003193601126100e4573590610730610901565b90828452606560205261074860018286200154610c63565b828452606560209081528185206001600160a01b039093168086529290528084205460ff1615610776578380f35b82845260656020528084208285526020528320600160ff1982541617905533916000805160206110198339815191528480a43880808380f35b5090346100e45760203660031901126100e45781602093600192358152606585522001549051908152f35b83827f49f6851d1cd01a518db5bdea5cffbbe90276baa2595f74250b7472b96806302e610806366109a6565b9061080f610a6b565b610817610d6f565b61019e84516108258161091c565b603a81527f557067726164654578656375746f723a20696e6e65722064656c65676174652060208201527931b0b636103330b4b632b2103bb4ba3437baba103932b0b9b7b760311b868201528680855160208701865af4610197610dc5565b838234610239578160031936011261023957602090516000805160206110598339815191528152f35b849084346100e45760203660031901126100e4573563ffffffff60e01b81168091036100e45760209250637965db0b60e01b81149081156108f0575b5015158152f35b6301ffc9a760e01b149050836108e9565b602435906001600160a01b038216820361091757565b600080fd5b606081019081106001600160401b0382111761093757604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761093757604052565b601f909101601f19168101906001600160401b0382119082101761093757604052565b6001600160401b03811161093757601f01601f191660200190565b906040600319830112610917576004356001600160a01b038116810361091757916024356001600160401b0381116109175781602382011215610917578060040135906109f28261098b565b92610a006040519485610968565b828452602483830101116109175781600092602460209301838601378301015290565b60005b838110610a365750506000910152565b8181015183820152602001610a26565b90602091610a5f81518092818552858086019101610a23565b601f01601f1916010190565b3360009081527f7dc9f88e569f94faad6fa0d44dd44858caf3f34f1bd1c985800aedf5793aad8b602090815260408083205490926000805160206110598339815191529160ff1615610abd5750505050565b610ac633610f2b565b91845190610ad38261094d565b60428252848201926060368537825115610c4f576030845382519060019160011015610c4f5790607860218501536041915b818311610be157505050610bb1576048610bad938693610b9193610b82985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152610b59815180928c603789019101610a23565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190610a23565b01036028810187520185610968565b5192839262461bcd60e51b845260048401526024830190610a46565b0390fd5b60648486519062461bcd60e51b825280600483015260248201526000805160206110398339815191526044820152fd5b909192600f81166010811015610c3b576f181899199a1a9b1b9c1cb0b131b232b360811b901a610c118587610f04565b5360041c928015610c2757600019019190610b05565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b60009080825260209060658252604092838120338252835260ff848220541615610c8d5750505050565b610c9633610f2b565b91845190610ca38261094d565b60428252848201926060368537825115610c4f576030845382519060019160011015610c4f5790607860218501536041915b818311610d2957505050610bb1576048610bad938693610b9193610b82985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152610b59815180928c603789019101610a23565b909192600f81166010811015610c3b576f181899199a1a9b1b9c1cb0b131b232b360811b901a610d598587610f04565b5360041c928015610c2757600019019190610cd5565b600260975414610d80576002609755565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b3d15610df0573d90610dd68261098b565b91610de46040519384610968565b82523d6000602084013e565b606090565b906000918083526065602052604083209160018060a01b03169182845260205260ff604084205416610e2657505050565b8083526065602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b91929015610ecd5750815115610e7f575090565b3b15610e885790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610ee05750805190602001fd5b60405162461bcd60e51b815260206004820152908190610bad906024830190610a46565b908151811015610f15570160200190565b634e487b7160e01b600052603260045260246000fd5b60405190610f388261091c565b602a8252602082016040368237825115610f155760309053815160019060011015610f1557607860218401536029905b808211610faa575050610f785790565b606460405162461bcd60e51b815260206004820152602060248201526000805160206110398339815191526044820152fd5b9091600f81166010811015611003576f181899199a1a9b1b9c1cb0b131b232b360811b901a610fd98486610f04565b5360041c918015610fee576000190190610f68565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fdfe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d537472696e67733a20686578206c656e67746820696e73756666696369656e74d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212202b7383aa99f9fe12f6894d59812341bfd81d38fa24a37f196bc405825a48b60664736f6c63430008190033",
}

// UpgradeExecutorMockABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeExecutorMockMetaData.ABI instead.
var UpgradeExecutorMockABI = UpgradeExecutorMockMetaData.ABI

// UpgradeExecutorMockBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradeExecutorMockMetaData.Bin instead.
var UpgradeExecutorMockBin = UpgradeExecutorMockMetaData.Bin

// DeployUpgradeExecutorMock deploys a new Ethereum contract, binding an instance of UpgradeExecutorMock to it.
func DeployUpgradeExecutorMock(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UpgradeExecutorMock, error) {
	parsed, err := UpgradeExecutorMockMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UpgradeExecutorMockBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpgradeExecutorMock{UpgradeExecutorMockCaller: UpgradeExecutorMockCaller{contract: contract}, UpgradeExecutorMockTransactor: UpgradeExecutorMockTransactor{contract: contract}, UpgradeExecutorMockFilterer: UpgradeExecutorMockFilterer{contract: contract}}, nil
}

// UpgradeExecutorMock is an auto generated Go binding around an Ethereum contract.
type UpgradeExecutorMock struct {
	UpgradeExecutorMockCaller     // Read-only binding to the contract
	UpgradeExecutorMockTransactor // Write-only binding to the contract
	UpgradeExecutorMockFilterer   // Log filterer for contract events
}

// UpgradeExecutorMockCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeExecutorMockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeExecutorMockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeExecutorMockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeExecutorMockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeExecutorMockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeExecutorMockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeExecutorMockSession struct {
	Contract     *UpgradeExecutorMock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UpgradeExecutorMockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeExecutorMockCallerSession struct {
	Contract *UpgradeExecutorMockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// UpgradeExecutorMockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeExecutorMockTransactorSession struct {
	Contract     *UpgradeExecutorMockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// UpgradeExecutorMockRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeExecutorMockRaw struct {
	Contract *UpgradeExecutorMock // Generic contract binding to access the raw methods on
}

// UpgradeExecutorMockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeExecutorMockCallerRaw struct {
	Contract *UpgradeExecutorMockCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeExecutorMockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeExecutorMockTransactorRaw struct {
	Contract *UpgradeExecutorMockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeExecutorMock creates a new instance of UpgradeExecutorMock, bound to a specific deployed contract.
func NewUpgradeExecutorMock(address common.Address, backend bind.ContractBackend) (*UpgradeExecutorMock, error) {
	contract, err := bindUpgradeExecutorMock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMock{UpgradeExecutorMockCaller: UpgradeExecutorMockCaller{contract: contract}, UpgradeExecutorMockTransactor: UpgradeExecutorMockTransactor{contract: contract}, UpgradeExecutorMockFilterer: UpgradeExecutorMockFilterer{contract: contract}}, nil
}

// NewUpgradeExecutorMockCaller creates a new read-only instance of UpgradeExecutorMock, bound to a specific deployed contract.
func NewUpgradeExecutorMockCaller(address common.Address, caller bind.ContractCaller) (*UpgradeExecutorMockCaller, error) {
	contract, err := bindUpgradeExecutorMock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockCaller{contract: contract}, nil
}

// NewUpgradeExecutorMockTransactor creates a new write-only instance of UpgradeExecutorMock, bound to a specific deployed contract.
func NewUpgradeExecutorMockTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeExecutorMockTransactor, error) {
	contract, err := bindUpgradeExecutorMock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockTransactor{contract: contract}, nil
}

// NewUpgradeExecutorMockFilterer creates a new log filterer instance of UpgradeExecutorMock, bound to a specific deployed contract.
func NewUpgradeExecutorMockFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeExecutorMockFilterer, error) {
	contract, err := bindUpgradeExecutorMock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockFilterer{contract: contract}, nil
}

// bindUpgradeExecutorMock binds a generic wrapper to an already deployed contract.
func bindUpgradeExecutorMock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UpgradeExecutorMockMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeExecutorMock *UpgradeExecutorMockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeExecutorMock.Contract.UpgradeExecutorMockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeExecutorMock *UpgradeExecutorMockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.UpgradeExecutorMockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeExecutorMock *UpgradeExecutorMockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.UpgradeExecutorMockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeExecutorMock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _UpgradeExecutorMock.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) ADMINROLE() ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.ADMINROLE(&_UpgradeExecutorMock.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerSession) ADMINROLE() ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.ADMINROLE(&_UpgradeExecutorMock.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _UpgradeExecutorMock.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.DEFAULTADMINROLE(&_UpgradeExecutorMock.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.DEFAULTADMINROLE(&_UpgradeExecutorMock.CallOpts)
}

// EXECUTORROLE is a free data retrieval call binding the contract method 0x07bd0265.
//
// Solidity: function EXECUTOR_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCaller) EXECUTORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _UpgradeExecutorMock.contract.Call(opts, &out, "EXECUTOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EXECUTORROLE is a free data retrieval call binding the contract method 0x07bd0265.
//
// Solidity: function EXECUTOR_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) EXECUTORROLE() ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.EXECUTORROLE(&_UpgradeExecutorMock.CallOpts)
}

// EXECUTORROLE is a free data retrieval call binding the contract method 0x07bd0265.
//
// Solidity: function EXECUTOR_ROLE() view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerSession) EXECUTORROLE() ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.EXECUTORROLE(&_UpgradeExecutorMock.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _UpgradeExecutorMock.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.GetRoleAdmin(&_UpgradeExecutorMock.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _UpgradeExecutorMock.Contract.GetRoleAdmin(&_UpgradeExecutorMock.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_UpgradeExecutorMock *UpgradeExecutorMockCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _UpgradeExecutorMock.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _UpgradeExecutorMock.Contract.HasRole(&_UpgradeExecutorMock.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _UpgradeExecutorMock.Contract.HasRole(&_UpgradeExecutorMock.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_UpgradeExecutorMock *UpgradeExecutorMockCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _UpgradeExecutorMock.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _UpgradeExecutorMock.Contract.SupportsInterface(&_UpgradeExecutorMock.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_UpgradeExecutorMock *UpgradeExecutorMockCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _UpgradeExecutorMock.Contract.SupportsInterface(&_UpgradeExecutorMock.CallOpts, interfaceId)
}

// Execute is a paid mutator transaction binding the contract method 0x1cff79cd.
//
// Solidity: function execute(address upgrade, bytes upgradeCallData) payable returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactor) Execute(opts *bind.TransactOpts, upgrade common.Address, upgradeCallData []byte) (*types.Transaction, error) {
	return _UpgradeExecutorMock.contract.Transact(opts, "execute", upgrade, upgradeCallData)
}

// Execute is a paid mutator transaction binding the contract method 0x1cff79cd.
//
// Solidity: function execute(address upgrade, bytes upgradeCallData) payable returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) Execute(upgrade common.Address, upgradeCallData []byte) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.Execute(&_UpgradeExecutorMock.TransactOpts, upgrade, upgradeCallData)
}

// Execute is a paid mutator transaction binding the contract method 0x1cff79cd.
//
// Solidity: function execute(address upgrade, bytes upgradeCallData) payable returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorSession) Execute(upgrade common.Address, upgradeCallData []byte) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.Execute(&_UpgradeExecutorMock.TransactOpts, upgrade, upgradeCallData)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0xbca8c7b5.
//
// Solidity: function executeCall(address target, bytes targetCallData) payable returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactor) ExecuteCall(opts *bind.TransactOpts, target common.Address, targetCallData []byte) (*types.Transaction, error) {
	return _UpgradeExecutorMock.contract.Transact(opts, "executeCall", target, targetCallData)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0xbca8c7b5.
//
// Solidity: function executeCall(address target, bytes targetCallData) payable returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) ExecuteCall(target common.Address, targetCallData []byte) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.ExecuteCall(&_UpgradeExecutorMock.TransactOpts, target, targetCallData)
}

// ExecuteCall is a paid mutator transaction binding the contract method 0xbca8c7b5.
//
// Solidity: function executeCall(address target, bytes targetCallData) payable returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorSession) ExecuteCall(target common.Address, targetCallData []byte) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.ExecuteCall(&_UpgradeExecutorMock.TransactOpts, target, targetCallData)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.GrantRole(&_UpgradeExecutorMock.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.GrantRole(&_UpgradeExecutorMock.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x946d9204.
//
// Solidity: function initialize(address admin, address[] executors) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactor) Initialize(opts *bind.TransactOpts, admin common.Address, executors []common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.contract.Transact(opts, "initialize", admin, executors)
}

// Initialize is a paid mutator transaction binding the contract method 0x946d9204.
//
// Solidity: function initialize(address admin, address[] executors) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) Initialize(admin common.Address, executors []common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.Initialize(&_UpgradeExecutorMock.TransactOpts, admin, executors)
}

// Initialize is a paid mutator transaction binding the contract method 0x946d9204.
//
// Solidity: function initialize(address admin, address[] executors) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorSession) Initialize(admin common.Address, executors []common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.Initialize(&_UpgradeExecutorMock.TransactOpts, admin, executors)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.RenounceRole(&_UpgradeExecutorMock.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.RenounceRole(&_UpgradeExecutorMock.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.RevokeRole(&_UpgradeExecutorMock.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_UpgradeExecutorMock *UpgradeExecutorMockTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _UpgradeExecutorMock.Contract.RevokeRole(&_UpgradeExecutorMock.TransactOpts, role, account)
}

// UpgradeExecutorMockInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockInitializedIterator struct {
	Event *UpgradeExecutorMockInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeExecutorMockInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeExecutorMockInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeExecutorMockInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeExecutorMockInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeExecutorMockInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeExecutorMockInitialized represents a Initialized event raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) FilterInitialized(opts *bind.FilterOpts) (*UpgradeExecutorMockInitializedIterator, error) {

	logs, sub, err := _UpgradeExecutorMock.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockInitializedIterator{contract: _UpgradeExecutorMock.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *UpgradeExecutorMockInitialized) (event.Subscription, error) {

	logs, sub, err := _UpgradeExecutorMock.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeExecutorMockInitialized)
				if err := _UpgradeExecutorMock.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) ParseInitialized(log types.Log) (*UpgradeExecutorMockInitialized, error) {
	event := new(UpgradeExecutorMockInitialized)
	if err := _UpgradeExecutorMock.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradeExecutorMockRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockRoleAdminChangedIterator struct {
	Event *UpgradeExecutorMockRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeExecutorMockRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeExecutorMockRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeExecutorMockRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeExecutorMockRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeExecutorMockRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeExecutorMockRoleAdminChanged represents a RoleAdminChanged event raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*UpgradeExecutorMockRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockRoleAdminChangedIterator{contract: _UpgradeExecutorMock.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *UpgradeExecutorMockRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeExecutorMockRoleAdminChanged)
				if err := _UpgradeExecutorMock.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) ParseRoleAdminChanged(log types.Log) (*UpgradeExecutorMockRoleAdminChanged, error) {
	event := new(UpgradeExecutorMockRoleAdminChanged)
	if err := _UpgradeExecutorMock.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradeExecutorMockRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockRoleGrantedIterator struct {
	Event *UpgradeExecutorMockRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeExecutorMockRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeExecutorMockRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeExecutorMockRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeExecutorMockRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeExecutorMockRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeExecutorMockRoleGranted represents a RoleGranted event raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*UpgradeExecutorMockRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockRoleGrantedIterator{contract: _UpgradeExecutorMock.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *UpgradeExecutorMockRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeExecutorMockRoleGranted)
				if err := _UpgradeExecutorMock.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) ParseRoleGranted(log types.Log) (*UpgradeExecutorMockRoleGranted, error) {
	event := new(UpgradeExecutorMockRoleGranted)
	if err := _UpgradeExecutorMock.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradeExecutorMockRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockRoleRevokedIterator struct {
	Event *UpgradeExecutorMockRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeExecutorMockRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeExecutorMockRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeExecutorMockRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeExecutorMockRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeExecutorMockRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeExecutorMockRoleRevoked represents a RoleRevoked event raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*UpgradeExecutorMockRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockRoleRevokedIterator{contract: _UpgradeExecutorMock.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *UpgradeExecutorMockRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeExecutorMockRoleRevoked)
				if err := _UpgradeExecutorMock.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) ParseRoleRevoked(log types.Log) (*UpgradeExecutorMockRoleRevoked, error) {
	event := new(UpgradeExecutorMockRoleRevoked)
	if err := _UpgradeExecutorMock.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradeExecutorMockTargetCallExecutedIterator is returned from FilterTargetCallExecuted and is used to iterate over the raw logs and unpacked data for TargetCallExecuted events raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockTargetCallExecutedIterator struct {
	Event *UpgradeExecutorMockTargetCallExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeExecutorMockTargetCallExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeExecutorMockTargetCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeExecutorMockTargetCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeExecutorMockTargetCallExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeExecutorMockTargetCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeExecutorMockTargetCallExecuted represents a TargetCallExecuted event raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockTargetCallExecuted struct {
	Target common.Address
	Value  *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTargetCallExecuted is a free log retrieval operation binding the contract event 0x4d7dbdcc249630ec373f584267f10abf44938de920c32562f5aee93959c25258.
//
// Solidity: event TargetCallExecuted(address indexed target, uint256 value, bytes data)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) FilterTargetCallExecuted(opts *bind.FilterOpts, target []common.Address) (*UpgradeExecutorMockTargetCallExecutedIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.FilterLogs(opts, "TargetCallExecuted", targetRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockTargetCallExecutedIterator{contract: _UpgradeExecutorMock.contract, event: "TargetCallExecuted", logs: logs, sub: sub}, nil
}

// WatchTargetCallExecuted is a free log subscription operation binding the contract event 0x4d7dbdcc249630ec373f584267f10abf44938de920c32562f5aee93959c25258.
//
// Solidity: event TargetCallExecuted(address indexed target, uint256 value, bytes data)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) WatchTargetCallExecuted(opts *bind.WatchOpts, sink chan<- *UpgradeExecutorMockTargetCallExecuted, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.WatchLogs(opts, "TargetCallExecuted", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeExecutorMockTargetCallExecuted)
				if err := _UpgradeExecutorMock.contract.UnpackLog(event, "TargetCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTargetCallExecuted is a log parse operation binding the contract event 0x4d7dbdcc249630ec373f584267f10abf44938de920c32562f5aee93959c25258.
//
// Solidity: event TargetCallExecuted(address indexed target, uint256 value, bytes data)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) ParseTargetCallExecuted(log types.Log) (*UpgradeExecutorMockTargetCallExecuted, error) {
	event := new(UpgradeExecutorMockTargetCallExecuted)
	if err := _UpgradeExecutorMock.contract.UnpackLog(event, "TargetCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UpgradeExecutorMockUpgradeExecutedIterator is returned from FilterUpgradeExecuted and is used to iterate over the raw logs and unpacked data for UpgradeExecuted events raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockUpgradeExecutedIterator struct {
	Event *UpgradeExecutorMockUpgradeExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeExecutorMockUpgradeExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeExecutorMockUpgradeExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeExecutorMockUpgradeExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeExecutorMockUpgradeExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeExecutorMockUpgradeExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeExecutorMockUpgradeExecuted represents a UpgradeExecuted event raised by the UpgradeExecutorMock contract.
type UpgradeExecutorMockUpgradeExecuted struct {
	Upgrade common.Address
	Value   *big.Int
	Data    []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpgradeExecuted is a free log retrieval operation binding the contract event 0x49f6851d1cd01a518db5bdea5cffbbe90276baa2595f74250b7472b96806302e.
//
// Solidity: event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) FilterUpgradeExecuted(opts *bind.FilterOpts, upgrade []common.Address) (*UpgradeExecutorMockUpgradeExecutedIterator, error) {

	var upgradeRule []interface{}
	for _, upgradeItem := range upgrade {
		upgradeRule = append(upgradeRule, upgradeItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.FilterLogs(opts, "UpgradeExecuted", upgradeRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeExecutorMockUpgradeExecutedIterator{contract: _UpgradeExecutorMock.contract, event: "UpgradeExecuted", logs: logs, sub: sub}, nil
}

// WatchUpgradeExecuted is a free log subscription operation binding the contract event 0x49f6851d1cd01a518db5bdea5cffbbe90276baa2595f74250b7472b96806302e.
//
// Solidity: event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) WatchUpgradeExecuted(opts *bind.WatchOpts, sink chan<- *UpgradeExecutorMockUpgradeExecuted, upgrade []common.Address) (event.Subscription, error) {

	var upgradeRule []interface{}
	for _, upgradeItem := range upgrade {
		upgradeRule = append(upgradeRule, upgradeItem)
	}

	logs, sub, err := _UpgradeExecutorMock.contract.WatchLogs(opts, "UpgradeExecuted", upgradeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeExecutorMockUpgradeExecuted)
				if err := _UpgradeExecutorMock.contract.UnpackLog(event, "UpgradeExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradeExecuted is a log parse operation binding the contract event 0x49f6851d1cd01a518db5bdea5cffbbe90276baa2595f74250b7472b96806302e.
//
// Solidity: event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)
func (_UpgradeExecutorMock *UpgradeExecutorMockFilterer) ParseUpgradeExecuted(log types.Log) (*UpgradeExecutorMockUpgradeExecuted, error) {
	event := new(UpgradeExecutorMockUpgradeExecuted)
	if err := _UpgradeExecutorMock.contract.UnpackLog(event, "UpgradeExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
