// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rollupgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AssertionInputs is an auto generated low-level Go binding around an user-defined struct.
type AssertionInputs struct {
	BeforeStateData BeforeStateData
	BeforeState     AssertionState
	AfterState      AssertionState
}

// AssertionNode is an auto generated low-level Go binding around an user-defined struct.
type AssertionNode struct {
	FirstChildBlock  uint64
	SecondChildBlock uint64
	CreatedAtBlock   uint64
	IsFirstChild     bool
	Status           uint8
	ConfigHash       [32]byte
}

// AssertionState is an auto generated low-level Go binding around an user-defined struct.
type AssertionState struct {
	GlobalState    GlobalState
	MachineStatus  uint8
	EndHistoryRoot [32]byte
}

// BOLDUpgradeActionContracts is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionContracts struct {
	ExcessStakeReceiver common.Address
	Rollup              common.Address
	Bridge              common.Address
	SequencerInbox      common.Address
	RollupEventInbox    common.Address
	Outbox              common.Address
	Inbox               common.Address
	Osp                 common.Address
}

// BOLDUpgradeActionImplementations is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionImplementations struct {
	Bridge           common.Address
	SeqInbox         common.Address
	Inbox            common.Address
	Rei              common.Address
	Outbox           common.Address
	NewRollupUser    common.Address
	NewRollupAdmin   common.Address
	ChallengeManager common.Address
}

// BOLDUpgradeActionProxyAdmins is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionProxyAdmins struct {
	Outbox   common.Address
	Bridge   common.Address
	Rei      common.Address
	SeqInbox common.Address
	Inbox    common.Address
}

// BOLDUpgradeActionSettings is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionSettings struct {
	ConfirmPeriodBlocks        uint64
	ChallengePeriodBlocks      uint64
	StakeToken                 common.Address
	StakeAmt                   *big.Int
	MiniStakeAmounts           []*big.Int
	ChainId                    *big.Int
	MinimumAssertionPeriod     *big.Int
	ValidatorAfkBlocks         uint64
	DisableValidatorWhitelist  bool
	BlockLeafSize              *big.Int
	BigStepLeafSize            *big.Int
	SmallStepLeafSize          *big.Int
	NumBigStepLevel            uint8
	ChallengeGracePeriodBlocks uint64
	IsDelayBufferable          bool
	BufferConfig               BufferConfig
}

// BeforeStateData is an auto generated low-level Go binding around an user-defined struct.
type BeforeStateData struct {
	PrevPrevAssertionHash [32]byte
	SequencerBatchAcc     [32]byte
	ConfigData            ConfigData
}

// BridgeCreatorBridgeContracts is an auto generated low-level Go binding around an user-defined struct.
type BridgeCreatorBridgeContracts struct {
	Bridge           common.Address
	Inbox            common.Address
	SequencerInbox   common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}

// BridgeCreatorBridgeTemplates is an auto generated low-level Go binding around an user-defined struct.
type BridgeCreatorBridgeTemplates struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}

// BufferConfig is an auto generated low-level Go binding around an user-defined struct.
type BufferConfig struct {
	Threshold            uint64
	Max                  uint64
	ReplenishRateInBasis uint64
}

// Config is an auto generated low-level Go binding around an user-defined struct.
type Config struct {
	ConfirmPeriodBlocks            uint64
	StakeToken                     common.Address
	BaseStake                      *big.Int
	WasmModuleRoot                 [32]byte
	Owner                          common.Address
	LoserStakeEscrow               common.Address
	ChainId                        *big.Int
	ChainConfig                    string
	MinimumAssertionPeriod         *big.Int
	ValidatorAfkBlocks             uint64
	MiniStakeValues                []*big.Int
	SequencerInboxMaxTimeVariation ISequencerInboxMaxTimeVariation
	LayerZeroBlockEdgeHeight       *big.Int
	LayerZeroBigStepEdgeHeight     *big.Int
	LayerZeroSmallStepEdgeHeight   *big.Int
	GenesisAssertionState          AssertionState
	GenesisInboxCount              *big.Int
	AnyTrustFastConfirmer          common.Address
	NumBigStepLevel                uint8
	ChallengeGracePeriodBlocks     uint64
	BufferConfig                   BufferConfig
	EspressoTEEVerifier            common.Address
}

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	NextInboxPosition   uint64
}

// ContractDependencies is an auto generated low-level Go binding around an user-defined struct.
type ContractDependencies struct {
	Bridge                 common.Address
	SequencerInbox         common.Address
	Inbox                  common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	RollupAdminLogic       common.Address
	RollupUserLogic        common.Address
	ValidatorWalletCreator common.Address
}

// ExecutionState is an auto generated low-level Go binding around an user-defined struct.
type ExecutionState struct {
	GlobalState   GlobalState
	MachineStatus uint8
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IOldRollupAssertion is an auto generated low-level Go binding around an user-defined struct.
type IOldRollupAssertion struct {
	BeforeState ExecutionState
	AfterState  ExecutionState
	NumBlocks   uint64
}

// IRollupCoreStaker is an auto generated low-level Go binding around an user-defined struct.
type IRollupCoreStaker struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   *big.Int
	FutureBlocks  *big.Int
	DelaySeconds  *big.Int
	FutureSeconds *big.Int
}

// Node is an auto generated low-level Go binding around an user-defined struct.
type Node struct {
	StateHash                   [32]byte
	ChallengeHash               [32]byte
	ConfirmData                 [32]byte
	PrevNum                     uint64
	DeadlineBlock               uint64
	NoChildConfirmedBeforeBlock uint64
	StakerCount                 uint64
	ChildStakerCount            uint64
	FirstChildBlock             uint64
	LatestChildNumber           uint64
	CreatedAtBlock              uint64
	NodeHash                    [32]byte
}

// OldStaker is an auto generated low-level Go binding around an user-defined struct.
type OldStaker struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}

// RollupCreatorRollupDeploymentParams is an auto generated low-level Go binding around an user-defined struct.
type RollupCreatorRollupDeploymentParams struct {
	Config                    Config
	Validators                []common.Address
	MaxDataSize               *big.Int
	NativeToken               common.Address
	DeployFactoriesToL2       bool
	MaxFeePerGasForRetryables *big.Int
	BatchPosters              []common.Address
	BatchPosterManager        common.Address
}

// AbsRollupEventInboxMetaData contains all meta data concerning the AbsRollupEventInbox contract.
var AbsRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AbsRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use AbsRollupEventInboxMetaData.ABI instead.
var AbsRollupEventInboxABI = AbsRollupEventInboxMetaData.ABI

// AbsRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type AbsRollupEventInbox struct {
	AbsRollupEventInboxCaller     // Read-only binding to the contract
	AbsRollupEventInboxTransactor // Write-only binding to the contract
	AbsRollupEventInboxFilterer   // Log filterer for contract events
}

// AbsRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type AbsRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AbsRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AbsRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AbsRollupEventInboxSession struct {
	Contract     *AbsRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AbsRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AbsRollupEventInboxCallerSession struct {
	Contract *AbsRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// AbsRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AbsRollupEventInboxTransactorSession struct {
	Contract     *AbsRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// AbsRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type AbsRollupEventInboxRaw struct {
	Contract *AbsRollupEventInbox // Generic contract binding to access the raw methods on
}

// AbsRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AbsRollupEventInboxCallerRaw struct {
	Contract *AbsRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// AbsRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AbsRollupEventInboxTransactorRaw struct {
	Contract *AbsRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAbsRollupEventInbox creates a new instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInbox(address common.Address, backend bind.ContractBackend) (*AbsRollupEventInbox, error) {
	contract, err := bindAbsRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInbox{AbsRollupEventInboxCaller: AbsRollupEventInboxCaller{contract: contract}, AbsRollupEventInboxTransactor: AbsRollupEventInboxTransactor{contract: contract}, AbsRollupEventInboxFilterer: AbsRollupEventInboxFilterer{contract: contract}}, nil
}

// NewAbsRollupEventInboxCaller creates a new read-only instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*AbsRollupEventInboxCaller, error) {
	contract, err := bindAbsRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxCaller{contract: contract}, nil
}

// NewAbsRollupEventInboxTransactor creates a new write-only instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*AbsRollupEventInboxTransactor, error) {
	contract, err := bindAbsRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxTransactor{contract: contract}, nil
}

// NewAbsRollupEventInboxFilterer creates a new log filterer instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*AbsRollupEventInboxFilterer, error) {
	contract, err := bindAbsRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxFilterer{contract: contract}, nil
}

// bindAbsRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindAbsRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AbsRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Bridge() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Bridge(&_AbsRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Bridge(&_AbsRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Rollup() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Rollup(&_AbsRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Rollup(&_AbsRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.Initialize(&_AbsRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.Initialize(&_AbsRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.RollupInitialized(&_AbsRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.RollupInitialized(&_AbsRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.UpdateRollupAddress(&_AbsRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.UpdateRollupAddress(&_AbsRollupEventInbox.TransactOpts)
}

// AbsRollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredIterator struct {
	Event *AbsRollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*AbsRollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxInboxMessageDeliveredIterator{contract: _AbsRollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *AbsRollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupEventInboxInboxMessageDelivered)
				if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*AbsRollupEventInboxInboxMessageDelivered, error) {
	event := new(AbsRollupEventInboxInboxMessageDelivered)
	if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *AbsRollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _AbsRollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *AbsRollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*AbsRollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssertionNodeLibMetaData contains all meta data concerning the AssertionNodeLib contract.
var AssertionNodeLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122095d2df9694e3f97966dea5e1b7cc0ba7ff335dbce4eba2ea357c2e7c6596e16e64736f6c63430008190033",
}

// AssertionNodeLibABI is the input ABI used to generate the binding from.
// Deprecated: Use AssertionNodeLibMetaData.ABI instead.
var AssertionNodeLibABI = AssertionNodeLibMetaData.ABI

// AssertionNodeLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssertionNodeLibMetaData.Bin instead.
var AssertionNodeLibBin = AssertionNodeLibMetaData.Bin

// DeployAssertionNodeLib deploys a new Ethereum contract, binding an instance of AssertionNodeLib to it.
func DeployAssertionNodeLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AssertionNodeLib, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssertionNodeLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// AssertionNodeLib is an auto generated Go binding around an Ethereum contract.
type AssertionNodeLib struct {
	AssertionNodeLibCaller     // Read-only binding to the contract
	AssertionNodeLibTransactor // Write-only binding to the contract
	AssertionNodeLibFilterer   // Log filterer for contract events
}

// AssertionNodeLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssertionNodeLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssertionNodeLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssertionNodeLibSession struct {
	Contract     *AssertionNodeLib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AssertionNodeLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssertionNodeLibCallerSession struct {
	Contract *AssertionNodeLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AssertionNodeLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssertionNodeLibTransactorSession struct {
	Contract     *AssertionNodeLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AssertionNodeLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssertionNodeLibRaw struct {
	Contract *AssertionNodeLib // Generic contract binding to access the raw methods on
}

// AssertionNodeLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssertionNodeLibCallerRaw struct {
	Contract *AssertionNodeLibCaller // Generic read-only contract binding to access the raw methods on
}

// AssertionNodeLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactorRaw struct {
	Contract *AssertionNodeLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssertionNodeLib creates a new instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLib(address common.Address, backend bind.ContractBackend) (*AssertionNodeLib, error) {
	contract, err := bindAssertionNodeLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// NewAssertionNodeLibCaller creates a new read-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibCaller(address common.Address, caller bind.ContractCaller) (*AssertionNodeLibCaller, error) {
	contract, err := bindAssertionNodeLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibCaller{contract: contract}, nil
}

// NewAssertionNodeLibTransactor creates a new write-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibTransactor(address common.Address, transactor bind.ContractTransactor) (*AssertionNodeLibTransactor, error) {
	contract, err := bindAssertionNodeLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibTransactor{contract: contract}, nil
}

// NewAssertionNodeLibFilterer creates a new log filterer instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibFilterer(address common.Address, filterer bind.ContractFilterer) (*AssertionNodeLibFilterer, error) {
	contract, err := bindAssertionNodeLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibFilterer{contract: contract}, nil
}

// bindAssertionNodeLib binds a generic wrapper to an already deployed contract.
func bindAssertionNodeLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.AssertionNodeLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transact(opts, method, params...)
}

// AssertionStateLibMetaData contains all meta data concerning the AssertionStateLib contract.
var AssertionStateLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205134d89288ed83f463d3533c467ac4cebbcbad1a0869509008f18c6ab0dc9b0064736f6c63430008190033",
}

// AssertionStateLibABI is the input ABI used to generate the binding from.
// Deprecated: Use AssertionStateLibMetaData.ABI instead.
var AssertionStateLibABI = AssertionStateLibMetaData.ABI

// AssertionStateLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssertionStateLibMetaData.Bin instead.
var AssertionStateLibBin = AssertionStateLibMetaData.Bin

// DeployAssertionStateLib deploys a new Ethereum contract, binding an instance of AssertionStateLib to it.
func DeployAssertionStateLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AssertionStateLib, error) {
	parsed, err := AssertionStateLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssertionStateLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssertionStateLib{AssertionStateLibCaller: AssertionStateLibCaller{contract: contract}, AssertionStateLibTransactor: AssertionStateLibTransactor{contract: contract}, AssertionStateLibFilterer: AssertionStateLibFilterer{contract: contract}}, nil
}

// AssertionStateLib is an auto generated Go binding around an Ethereum contract.
type AssertionStateLib struct {
	AssertionStateLibCaller     // Read-only binding to the contract
	AssertionStateLibTransactor // Write-only binding to the contract
	AssertionStateLibFilterer   // Log filterer for contract events
}

// AssertionStateLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssertionStateLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionStateLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssertionStateLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionStateLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssertionStateLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionStateLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssertionStateLibSession struct {
	Contract     *AssertionStateLib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AssertionStateLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssertionStateLibCallerSession struct {
	Contract *AssertionStateLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// AssertionStateLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssertionStateLibTransactorSession struct {
	Contract     *AssertionStateLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// AssertionStateLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssertionStateLibRaw struct {
	Contract *AssertionStateLib // Generic contract binding to access the raw methods on
}

// AssertionStateLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssertionStateLibCallerRaw struct {
	Contract *AssertionStateLibCaller // Generic read-only contract binding to access the raw methods on
}

// AssertionStateLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssertionStateLibTransactorRaw struct {
	Contract *AssertionStateLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssertionStateLib creates a new instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLib(address common.Address, backend bind.ContractBackend) (*AssertionStateLib, error) {
	contract, err := bindAssertionStateLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLib{AssertionStateLibCaller: AssertionStateLibCaller{contract: contract}, AssertionStateLibTransactor: AssertionStateLibTransactor{contract: contract}, AssertionStateLibFilterer: AssertionStateLibFilterer{contract: contract}}, nil
}

// NewAssertionStateLibCaller creates a new read-only instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLibCaller(address common.Address, caller bind.ContractCaller) (*AssertionStateLibCaller, error) {
	contract, err := bindAssertionStateLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLibCaller{contract: contract}, nil
}

// NewAssertionStateLibTransactor creates a new write-only instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLibTransactor(address common.Address, transactor bind.ContractTransactor) (*AssertionStateLibTransactor, error) {
	contract, err := bindAssertionStateLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLibTransactor{contract: contract}, nil
}

// NewAssertionStateLibFilterer creates a new log filterer instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLibFilterer(address common.Address, filterer bind.ContractFilterer) (*AssertionStateLibFilterer, error) {
	contract, err := bindAssertionStateLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLibFilterer{contract: contract}, nil
}

// bindAssertionStateLib binds a generic wrapper to an already deployed contract.
func bindAssertionStateLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AssertionStateLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionStateLib *AssertionStateLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionStateLib.Contract.AssertionStateLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionStateLib *AssertionStateLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.AssertionStateLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionStateLib *AssertionStateLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.AssertionStateLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionStateLib *AssertionStateLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionStateLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionStateLib *AssertionStateLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionStateLib *AssertionStateLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.contract.Transact(opts, method, params...)
}

// BOLDUpgradeActionMetaData contains all meta data concerning the BOLDUpgradeAction contract.
var BOLDUpgradeActionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"excessStakeReceiver\",\"type\":\"address\"},{\"internalType\":\"contractIOldRollup\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seqInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.ProxyAdmins\",\"name\":\"proxyAdmins\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seqInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRollupUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRollupAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.Implementations\",\"name\":\"implementations\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"challengePeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAssertionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validatorAfkBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"disableValidatorWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bigStepLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"smallStepLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDelayBufferable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"internalType\":\"structBOLDUpgradeAction.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"name\":\"RollupMigrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIGSTEP_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCK_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIRM_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLE_VALIDATOR_WHITELIST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCESS_STAKE_RECEIVER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_CHALLENGE_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_NEW_ROLLUP_ADMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_NEW_ROLLUP_USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_OUTBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_REI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_SEQUENCER_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_DELAY_BUFFERABLE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_ASSERTION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINI_STAKE_AMOUNTS_STORAGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_BIGSTEP_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLD_ROLLUP\",\"outputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OSP\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREIMAGE_LOOKUP\",\"outputs\":[{\"internalType\":\"contractStateHashPreImageLookup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_BRIDGE\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_INBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_OUTBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_REI\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_SEQUENCER_INBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPLENISH_RATE_IN_BASIS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_SLOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQ_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMALLSTEP_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"expectedRollupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"validateRollupDeployedAtAddress\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// BOLDUpgradeActionABI is the input ABI used to generate the binding from.
// Deprecated: Use BOLDUpgradeActionMetaData.ABI instead.
var BOLDUpgradeActionABI = BOLDUpgradeActionMetaData.ABI

// BOLDUpgradeActionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BOLDUpgradeActionMetaData.Bin instead.
var BOLDUpgradeActionBin = BOLDUpgradeActionMetaData.Bin

// DeployBOLDUpgradeAction deploys a new Ethereum contract, binding an instance of BOLDUpgradeAction to it.
func DeployBOLDUpgradeAction(auth *bind.TransactOpts, backend bind.ContractBackend, contracts BOLDUpgradeActionContracts, proxyAdmins BOLDUpgradeActionProxyAdmins, implementations BOLDUpgradeActionImplementations, settings BOLDUpgradeActionSettings) (common.Address, *types.Transaction, *BOLDUpgradeAction, error) {
	parsed, err := BOLDUpgradeActionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BOLDUpgradeActionBin), backend, contracts, proxyAdmins, implementations, settings)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BOLDUpgradeAction{BOLDUpgradeActionCaller: BOLDUpgradeActionCaller{contract: contract}, BOLDUpgradeActionTransactor: BOLDUpgradeActionTransactor{contract: contract}, BOLDUpgradeActionFilterer: BOLDUpgradeActionFilterer{contract: contract}}, nil
}

// BOLDUpgradeAction is an auto generated Go binding around an Ethereum contract.
type BOLDUpgradeAction struct {
	BOLDUpgradeActionCaller     // Read-only binding to the contract
	BOLDUpgradeActionTransactor // Write-only binding to the contract
	BOLDUpgradeActionFilterer   // Log filterer for contract events
}

// BOLDUpgradeActionCaller is an auto generated read-only Go binding around an Ethereum contract.
type BOLDUpgradeActionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BOLDUpgradeActionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BOLDUpgradeActionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BOLDUpgradeActionSession struct {
	Contract     *BOLDUpgradeAction // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BOLDUpgradeActionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BOLDUpgradeActionCallerSession struct {
	Contract *BOLDUpgradeActionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BOLDUpgradeActionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BOLDUpgradeActionTransactorSession struct {
	Contract     *BOLDUpgradeActionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BOLDUpgradeActionRaw is an auto generated low-level Go binding around an Ethereum contract.
type BOLDUpgradeActionRaw struct {
	Contract *BOLDUpgradeAction // Generic contract binding to access the raw methods on
}

// BOLDUpgradeActionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BOLDUpgradeActionCallerRaw struct {
	Contract *BOLDUpgradeActionCaller // Generic read-only contract binding to access the raw methods on
}

// BOLDUpgradeActionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BOLDUpgradeActionTransactorRaw struct {
	Contract *BOLDUpgradeActionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBOLDUpgradeAction creates a new instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeAction(address common.Address, backend bind.ContractBackend) (*BOLDUpgradeAction, error) {
	contract, err := bindBOLDUpgradeAction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeAction{BOLDUpgradeActionCaller: BOLDUpgradeActionCaller{contract: contract}, BOLDUpgradeActionTransactor: BOLDUpgradeActionTransactor{contract: contract}, BOLDUpgradeActionFilterer: BOLDUpgradeActionFilterer{contract: contract}}, nil
}

// NewBOLDUpgradeActionCaller creates a new read-only instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionCaller(address common.Address, caller bind.ContractCaller) (*BOLDUpgradeActionCaller, error) {
	contract, err := bindBOLDUpgradeAction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionCaller{contract: contract}, nil
}

// NewBOLDUpgradeActionTransactor creates a new write-only instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionTransactor(address common.Address, transactor bind.ContractTransactor) (*BOLDUpgradeActionTransactor, error) {
	contract, err := bindBOLDUpgradeAction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionTransactor{contract: contract}, nil
}

// NewBOLDUpgradeActionFilterer creates a new log filterer instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionFilterer(address common.Address, filterer bind.ContractFilterer) (*BOLDUpgradeActionFilterer, error) {
	contract, err := bindBOLDUpgradeAction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionFilterer{contract: contract}, nil
}

// bindBOLDUpgradeAction binds a generic wrapper to an already deployed contract.
func bindBOLDUpgradeAction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BOLDUpgradeActionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOLDUpgradeAction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.contract.Transact(opts, method, params...)
}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BIGSTEPLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BIGSTEP_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BIGSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BIGSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BIGSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BIGSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BLOCKLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BLOCK_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BLOCKLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BLOCKLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BLOCKLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BLOCKLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.BRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.BRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHAINID() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.CHAINID(&_BOLDUpgradeAction.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHAINID() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.CHAINID(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHALLENGEGRACEPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHALLENGE_GRACE_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHALLENGEGRACEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEGRACEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHALLENGEGRACEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEGRACEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHALLENGEPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHALLENGE_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHALLENGEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHALLENGEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CONFIRMPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CONFIRM_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CONFIRMPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CONFIRMPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CONFIRMPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CONFIRMPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) DISABLEVALIDATORWHITELIST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "DISABLE_VALIDATOR_WHITELIST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) DISABLEVALIDATORWHITELIST() (bool, error) {
	return _BOLDUpgradeAction.Contract.DISABLEVALIDATORWHITELIST(&_BOLDUpgradeAction.CallOpts)
}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) DISABLEVALIDATORWHITELIST() (bool, error) {
	return _BOLDUpgradeAction.Contract.DISABLEVALIDATORWHITELIST(&_BOLDUpgradeAction.CallOpts)
}

// EXCESSSTAKERECEIVER is a free data retrieval call binding the contract method 0x64f4992a.
//
// Solidity: function EXCESS_STAKE_RECEIVER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) EXCESSSTAKERECEIVER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "EXCESS_STAKE_RECEIVER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EXCESSSTAKERECEIVER is a free data retrieval call binding the contract method 0x64f4992a.
//
// Solidity: function EXCESS_STAKE_RECEIVER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) EXCESSSTAKERECEIVER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.EXCESSSTAKERECEIVER(&_BOLDUpgradeAction.CallOpts)
}

// EXCESSSTAKERECEIVER is a free data retrieval call binding the contract method 0x64f4992a.
//
// Solidity: function EXCESS_STAKE_RECEIVER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) EXCESSSTAKERECEIVER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.EXCESSSTAKERECEIVER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLCHALLENGEMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_CHALLENGE_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLCHALLENGEMANAGER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLCHALLENGEMANAGER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLCHALLENGEMANAGER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLCHALLENGEMANAGER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLINBOX is a free data retrieval call binding the contract method 0x817cd312.
//
// Solidity: function IMPL_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLINBOX is a free data retrieval call binding the contract method 0x817cd312.
//
// Solidity: function IMPL_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLINBOX is a free data retrieval call binding the contract method 0x817cd312.
//
// Solidity: function IMPL_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLNEWROLLUPADMIN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_NEW_ROLLUP_ADMIN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLNEWROLLUPADMIN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPADMIN(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLNEWROLLUPADMIN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPADMIN(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLNEWROLLUPUSER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_NEW_ROLLUP_USER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLNEWROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLNEWROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLOUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLREI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLREI(&_BOLDUpgradeAction.CallOpts)
}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLREI(&_BOLDUpgradeAction.CallOpts)
}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLSEQUENCERINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_SEQUENCER_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) INBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) INBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.INBOX(&_BOLDUpgradeAction.CallOpts)
}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) INBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.INBOX(&_BOLDUpgradeAction.CallOpts)
}

// ISDELAYBUFFERABLE is a free data retrieval call binding the contract method 0xe8180c29.
//
// Solidity: function IS_DELAY_BUFFERABLE() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ISDELAYBUFFERABLE(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IS_DELAY_BUFFERABLE")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISDELAYBUFFERABLE is a free data retrieval call binding the contract method 0xe8180c29.
//
// Solidity: function IS_DELAY_BUFFERABLE() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ISDELAYBUFFERABLE() (bool, error) {
	return _BOLDUpgradeAction.Contract.ISDELAYBUFFERABLE(&_BOLDUpgradeAction.CallOpts)
}

// ISDELAYBUFFERABLE is a free data retrieval call binding the contract method 0xe8180c29.
//
// Solidity: function IS_DELAY_BUFFERABLE() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ISDELAYBUFFERABLE() (bool, error) {
	return _BOLDUpgradeAction.Contract.ISDELAYBUFFERABLE(&_BOLDUpgradeAction.CallOpts)
}

// MAX is a free data retrieval call binding the contract method 0xd49d5181.
//
// Solidity: function MAX() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) MAX(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "MAX")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// MAX is a free data retrieval call binding the contract method 0xd49d5181.
//
// Solidity: function MAX() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) MAX() (uint64, error) {
	return _BOLDUpgradeAction.Contract.MAX(&_BOLDUpgradeAction.CallOpts)
}

// MAX is a free data retrieval call binding the contract method 0xd49d5181.
//
// Solidity: function MAX() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) MAX() (uint64, error) {
	return _BOLDUpgradeAction.Contract.MAX(&_BOLDUpgradeAction.CallOpts)
}

// MINIMUMASSERTIONPERIOD is a free data retrieval call binding the contract method 0x003c78fb.
//
// Solidity: function MINIMUM_ASSERTION_PERIOD() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) MINIMUMASSERTIONPERIOD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "MINIMUM_ASSERTION_PERIOD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINIMUMASSERTIONPERIOD is a free data retrieval call binding the contract method 0x003c78fb.
//
// Solidity: function MINIMUM_ASSERTION_PERIOD() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) MINIMUMASSERTIONPERIOD() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.MINIMUMASSERTIONPERIOD(&_BOLDUpgradeAction.CallOpts)
}

// MINIMUMASSERTIONPERIOD is a free data retrieval call binding the contract method 0x003c78fb.
//
// Solidity: function MINIMUM_ASSERTION_PERIOD() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) MINIMUMASSERTIONPERIOD() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.MINIMUMASSERTIONPERIOD(&_BOLDUpgradeAction.CallOpts)
}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) MINISTAKEAMOUNTSSTORAGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "MINI_STAKE_AMOUNTS_STORAGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) MINISTAKEAMOUNTSSTORAGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.MINISTAKEAMOUNTSSTORAGE(&_BOLDUpgradeAction.CallOpts)
}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) MINISTAKEAMOUNTSSTORAGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.MINISTAKEAMOUNTSSTORAGE(&_BOLDUpgradeAction.CallOpts)
}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) NUMBIGSTEPLEVEL(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "NUM_BIGSTEP_LEVEL")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) NUMBIGSTEPLEVEL() (uint8, error) {
	return _BOLDUpgradeAction.Contract.NUMBIGSTEPLEVEL(&_BOLDUpgradeAction.CallOpts)
}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) NUMBIGSTEPLEVEL() (uint8, error) {
	return _BOLDUpgradeAction.Contract.NUMBIGSTEPLEVEL(&_BOLDUpgradeAction.CallOpts)
}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OLDROLLUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OLD_ROLLUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OLDROLLUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OLDROLLUP(&_BOLDUpgradeAction.CallOpts)
}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OLDROLLUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OLDROLLUP(&_BOLDUpgradeAction.CallOpts)
}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OSP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OSP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OSP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OSP(&_BOLDUpgradeAction.CallOpts)
}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OSP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OSP(&_BOLDUpgradeAction.CallOpts)
}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PREIMAGELOOKUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PREIMAGE_LOOKUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PREIMAGELOOKUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PREIMAGELOOKUP(&_BOLDUpgradeAction.CallOpts)
}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PREIMAGELOOKUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PREIMAGELOOKUP(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMININBOX is a free data retrieval call binding the contract method 0x4b2f51ef.
//
// Solidity: function PROXY_ADMIN_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMININBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMININBOX is a free data retrieval call binding the contract method 0x4b2f51ef.
//
// Solidity: function PROXY_ADMIN_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMININBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMININBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMININBOX is a free data retrieval call binding the contract method 0x4b2f51ef.
//
// Solidity: function PROXY_ADMIN_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMININBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMININBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINOUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINREI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINREI(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINREI(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINSEQUENCERINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_SEQUENCER_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) REI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) REI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.REI(&_BOLDUpgradeAction.CallOpts)
}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) REI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.REI(&_BOLDUpgradeAction.CallOpts)
}

// REPLENISHRATEINBASIS is a free data retrieval call binding the contract method 0xeb657a4e.
//
// Solidity: function REPLENISH_RATE_IN_BASIS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) REPLENISHRATEINBASIS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "REPLENISH_RATE_IN_BASIS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// REPLENISHRATEINBASIS is a free data retrieval call binding the contract method 0xeb657a4e.
//
// Solidity: function REPLENISH_RATE_IN_BASIS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) REPLENISHRATEINBASIS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.REPLENISHRATEINBASIS(&_BOLDUpgradeAction.CallOpts)
}

// REPLENISHRATEINBASIS is a free data retrieval call binding the contract method 0xeb657a4e.
//
// Solidity: function REPLENISH_RATE_IN_BASIS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) REPLENISHRATEINBASIS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.REPLENISHRATEINBASIS(&_BOLDUpgradeAction.CallOpts)
}

// SECONDSPERSLOT is a free data retrieval call binding the contract method 0x304b9071.
//
// Solidity: function SECONDS_PER_SLOT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SECONDSPERSLOT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SECONDS_PER_SLOT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECONDSPERSLOT is a free data retrieval call binding the contract method 0x304b9071.
//
// Solidity: function SECONDS_PER_SLOT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SECONDSPERSLOT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SECONDSPERSLOT(&_BOLDUpgradeAction.CallOpts)
}

// SECONDSPERSLOT is a free data retrieval call binding the contract method 0x304b9071.
//
// Solidity: function SECONDS_PER_SLOT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SECONDSPERSLOT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SECONDSPERSLOT(&_BOLDUpgradeAction.CallOpts)
}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SEQINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SEQ_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SEQINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.SEQINBOX(&_BOLDUpgradeAction.CallOpts)
}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SEQINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.SEQINBOX(&_BOLDUpgradeAction.CallOpts)
}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SMALLSTEPLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SMALLSTEP_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SMALLSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SMALLSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SMALLSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SMALLSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) STAKEAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "STAKE_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) STAKEAMOUNT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.STAKEAMOUNT(&_BOLDUpgradeAction.CallOpts)
}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) STAKEAMOUNT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.STAKEAMOUNT(&_BOLDUpgradeAction.CallOpts)
}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) STAKETOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "STAKE_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) STAKETOKEN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.STAKETOKEN(&_BOLDUpgradeAction.CallOpts)
}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) STAKETOKEN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.STAKETOKEN(&_BOLDUpgradeAction.CallOpts)
}

// THRESHOLD is a free data retrieval call binding the contract method 0x785ffb37.
//
// Solidity: function THRESHOLD() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) THRESHOLD(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "THRESHOLD")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// THRESHOLD is a free data retrieval call binding the contract method 0x785ffb37.
//
// Solidity: function THRESHOLD() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) THRESHOLD() (uint64, error) {
	return _BOLDUpgradeAction.Contract.THRESHOLD(&_BOLDUpgradeAction.CallOpts)
}

// THRESHOLD is a free data retrieval call binding the contract method 0x785ffb37.
//
// Solidity: function THRESHOLD() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) THRESHOLD() (uint64, error) {
	return _BOLDUpgradeAction.Contract.THRESHOLD(&_BOLDUpgradeAction.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) VALIDATORAFKBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.VALIDATORAFKBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) VALIDATORAFKBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.VALIDATORAFKBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// ExpectedRollupAddress is a free data retrieval call binding the contract method 0x28fb228c.
//
// Solidity: function expectedRollupAddress(address deployer, uint256 chainId) pure returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ExpectedRollupAddress(opts *bind.CallOpts, deployer common.Address, chainId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "expectedRollupAddress", deployer, chainId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ExpectedRollupAddress is a free data retrieval call binding the contract method 0x28fb228c.
//
// Solidity: function expectedRollupAddress(address deployer, uint256 chainId) pure returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ExpectedRollupAddress(deployer common.Address, chainId *big.Int) (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ExpectedRollupAddress(&_BOLDUpgradeAction.CallOpts, deployer, chainId)
}

// ExpectedRollupAddress is a free data retrieval call binding the contract method 0x28fb228c.
//
// Solidity: function expectedRollupAddress(address deployer, uint256 chainId) pure returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ExpectedRollupAddress(deployer common.Address, chainId *big.Int) (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ExpectedRollupAddress(&_BOLDUpgradeAction.CallOpts, deployer, chainId)
}

// ValidateRollupDeployedAtAddress is a free data retrieval call binding the contract method 0x999f20db.
//
// Solidity: function validateRollupDeployedAtAddress(address rollupAddress, address deployer, uint256 chainId) view returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ValidateRollupDeployedAtAddress(opts *bind.CallOpts, rollupAddress common.Address, deployer common.Address, chainId *big.Int) error {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "validateRollupDeployedAtAddress", rollupAddress, deployer, chainId)

	if err != nil {
		return err
	}

	return err

}

// ValidateRollupDeployedAtAddress is a free data retrieval call binding the contract method 0x999f20db.
//
// Solidity: function validateRollupDeployedAtAddress(address rollupAddress, address deployer, uint256 chainId) view returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ValidateRollupDeployedAtAddress(rollupAddress common.Address, deployer common.Address, chainId *big.Int) error {
	return _BOLDUpgradeAction.Contract.ValidateRollupDeployedAtAddress(&_BOLDUpgradeAction.CallOpts, rollupAddress, deployer, chainId)
}

// ValidateRollupDeployedAtAddress is a free data retrieval call binding the contract method 0x999f20db.
//
// Solidity: function validateRollupDeployedAtAddress(address rollupAddress, address deployer, uint256 chainId) view returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ValidateRollupDeployedAtAddress(rollupAddress common.Address, deployer common.Address, chainId *big.Int) error {
	return _BOLDUpgradeAction.Contract.ValidateRollupDeployedAtAddress(&_BOLDUpgradeAction.CallOpts, rollupAddress, deployer, chainId)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactor) Perform(opts *bind.TransactOpts, validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.contract.Transact(opts, "perform", validators)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) Perform(validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.Perform(&_BOLDUpgradeAction.TransactOpts, validators)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorSession) Perform(validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.Perform(&_BOLDUpgradeAction.TransactOpts, validators)
}

// BOLDUpgradeActionRollupMigratedIterator is returned from FilterRollupMigrated and is used to iterate over the raw logs and unpacked data for RollupMigrated events raised by the BOLDUpgradeAction contract.
type BOLDUpgradeActionRollupMigratedIterator struct {
	Event *BOLDUpgradeActionRollupMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOLDUpgradeActionRollupMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOLDUpgradeActionRollupMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOLDUpgradeActionRollupMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOLDUpgradeActionRollupMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOLDUpgradeActionRollupMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOLDUpgradeActionRollupMigrated represents a RollupMigrated event raised by the BOLDUpgradeAction contract.
type BOLDUpgradeActionRollupMigrated struct {
	Rollup           common.Address
	ChallengeManager common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterRollupMigrated is a free log retrieval operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) FilterRollupMigrated(opts *bind.FilterOpts) (*BOLDUpgradeActionRollupMigratedIterator, error) {

	logs, sub, err := _BOLDUpgradeAction.contract.FilterLogs(opts, "RollupMigrated")
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionRollupMigratedIterator{contract: _BOLDUpgradeAction.contract, event: "RollupMigrated", logs: logs, sub: sub}, nil
}

// WatchRollupMigrated is a free log subscription operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) WatchRollupMigrated(opts *bind.WatchOpts, sink chan<- *BOLDUpgradeActionRollupMigrated) (event.Subscription, error) {

	logs, sub, err := _BOLDUpgradeAction.contract.WatchLogs(opts, "RollupMigrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOLDUpgradeActionRollupMigrated)
				if err := _BOLDUpgradeAction.contract.UnpackLog(event, "RollupMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupMigrated is a log parse operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) ParseRollupMigrated(log types.Log) (*BOLDUpgradeActionRollupMigrated, error) {
	event := new(BOLDUpgradeActionRollupMigrated)
	if err := _BOLDUpgradeAction.contract.UnpackLog(event, "RollupMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorMetaData contains all meta data concerning the BridgeCreator contract.
var BridgeCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_ethBasedTemplates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_erc20BasedTemplates\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ERC20TemplatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"espressoTEEVerifier\",\"type\":\"address\"}],\"name\":\"createBridge\",\"outputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20BasedTemplates\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBasedTemplates\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_newTemplates\",\"type\":\"tuple\"}],\"name\":\"updateERC20Templates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_newTemplates\",\"type\":\"tuple\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60803461016157611e123881900390601f8201601f19168301906001600160401b038211848310176101665782916040528339810161018082820312610161578060c061004f6100569385610190565b9301610190565b906000549160a0600180821b03918282600180821b031995338789161760005560405197833391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a382815116876001541617600155826020820151168760025416176002558260408201511687600354161760035582606082015116876004541617600455826080820151168760055416176005550151168460065416176006558281511684600754161760075582602082015116846008541617600855826040820151168460095416176009558260608201511684600a541617600a558260808201511684600b541617600b5501511690600c541617600c55611be3908161022f8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361016157565b91908260c0910312610161576040519160c083016001600160401b038111848210176101665760405280516001600160a01b0391849183811681036101615782526101dd6020820161017c565b60208301526101ee6040820161017c565b60408301526060810151838116810361016157606083015260808101519083821682036101615760a0916080840152015191821682036101615760a0015256fe608080604052600436101561001357600080fd5b600090813560e01c90816311f0222714610d2657508063715018a614610cc057806376768ab914610c5d5780638da5cb5b14610c37578063bf2359f714610340578063ceab941014610262578063e83b0e161461017c5763f2fde38b1461007957600080fd5b3461017957602060031936011261017957610092610d80565b61009a610e28565b6001600160a01b038091169081156100f5576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b80fd5b50346101795760c060031936011261017957610196610e28565b6004356001600160a01b039081811680910361025a5773ffffffffffffffffffffffffffffffffffffffff1990816001541617600155816101d5610dfc565b16816002541617600255816101e8610e12565b1681600354161760035560643582811680910361025e5781600454161760045560843582811680910361025e5781600554161760055560a43591821680920361025a5760065416176006557fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b8180a180f35b8280fd5b8380fd5b50346101795760c06003193601126101795761027c610e28565b6004356001600160a01b039081811680910361025a5773ffffffffffffffffffffffffffffffffffffffff1990816007541617600755816102bb610dfc565b16816008541617600855816102ce610e12565b1681600954161760095560643582811680910361025e5781600a541617600a5560843582811680910361025e5781600b541617600b5560a43591821680920361025a57600c541617600c557fa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e8180a180f35b5034610179576101606003193601126101795761035b610d80565b6024356001600160a01b038116810361025a57604435916001600160a01b038316830361025e5760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c36011261025e5760607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1c36011261025e5761014435916001600160a01b0383168303610c33576103f3610dc0565b50604051936020850192604084523660608701523687608088013786608036880101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0903360408801528682601f360116810103946060860188528783609f88011681011067ffffffffffffffff84609f8901168a011117610c1f5782609f8701168801604052875190209160e4359567ffffffffffffffff87168703610c1b576001600160a01b038516610c145760015b67ffffffffffffffff60c0609f840185168c01908101918211911017610bb357609f820183168a0160c08101604090815282546001600160a01b03908116835260018401548116602084015260028401548116918301919091526003830154811660608301526004830154811660808301526005929092015490911660a090910152610530610dc0565b50610539610dc0565b986001600160a01b0383609f840116820151166040519081610d1381011067ffffffffffffffff610d1384011117610be65790806105a9878994610d13610e9b8539610d138401906080926001600160a01b03809216835216602082015260606040820152600060608201520190565b03908df58015610bc7576001600160a01b03168a5267ffffffffffffffff881615610bfa576001600160a01b03604084609f85011683010151165b6040519081610d1381011067ffffffffffffffff610d1384011117610be657908061064a876001600160a01b038a95610d13610e9b863916610d138401906080926001600160a01b03809216835216602082015260606040820152600060608201520190565b03908df58015610bc7576001600160a01b031660408b01526001600160a01b03606084609f85011683010151166040519081610d1381011067ffffffffffffffff610d1384011117610be65790806106d4878994610d13610e9b8539610d138401906080926001600160a01b03809216835216602082015260606040820152600060608201520190565b03908df58015610bc7576001600160a01b031660208b01526001600160a01b03608084609f850116830101511660405190610d13820182811067ffffffffffffffff821117610bd257916107578782938a95610d13610e9b8639906080926001600160a01b03809216835216602082015260606040820152600060608201520190565b03908df5928315610bc757609f60a0938c60606001600160a01b038098169101520116010151169060405191610d13830183811067ffffffffffffffff821117610bb35783928b97969594926107d892610d13610e9b8639906080926001600160a01b03809216835216602082015260606040820152600060608201520190565b039085f58015610aba576001600160a01b031660808701526001600160a01b03811615600014610b2957506001600160a01b0385511690813b1561025a576001600160a01b03602484928360405195869485937fc4d66de80000000000000000000000000000000000000000000000000000000085521660048401525af18015610ad957610b15575b50505b6001600160a01b036040840151166001600160a01b0384511691813b15610b115767ffffffffffffffff90604051937fa84840b700000000000000000000000000000000000000000000000000000000855260048501526064356024850152608435604485015260a435606485015260c43560848501521660a4830152610104803567ffffffffffffffff8116809103610b0c5760c4840152610124803567ffffffffffffffff8116809103610b0c578780969486946001600160a01b038397879560e487015216908401525af18015610ad957610af8575b506001600160a01b036020830151166001600160a01b038351166001600160a01b03604085015116823b1561025e57604484928360405195869485937f485cc955000000000000000000000000000000000000000000000000000000008552600485015260248401525af18015610ad957610ae4575b50506001600160a01b03606082015116826001600160a01b0383511691803b15610ab6578180916024604051809481937fc4d66de8000000000000000000000000000000000000000000000000000000009889845260048401525af18015610ad957610ac5575b506001600160a01b03608084015116916001600160a01b0384511690833b1561025a57602490836040519586948593845260048401525af18015610aba57610aa2575b60a0826001600160a01b036080604051928281511684528260208201511660208501528260408201511660408501528260608201511660608501520151166080820152f35b610aac8391610d96565b610ab65781610a5d565b5080fd5b6040513d85823e3d90fd5b610ace90610d96565b61025a578238610a1a565b6040513d84823e3d90fd5b610aed90610d96565b610ab65781386109b3565b610b0190610d96565b610ab657813861093d565b600080fd5b8580fd5b610b1e90610d96565b61025e578338610861565b91906001600160a01b03865116803b1561025a576001600160a01b0391836044928460405197889687957f485cc9550000000000000000000000000000000000000000000000000000000087521660048601521660248401525af18015610ba857610b95575b50610864565b610ba190949194610d96565b9238610b8f565b6040513d87823e3d90fd5b60248b634e487b7160e01b81526041600452fd5b6040513d8d823e3d90fd5b60248e634e487b7160e01b81526041600452fd5b60248d634e487b7160e01b81526041600452fd5b6001600160a01b03602084609f85011683010151166105e4565b60076104a6565b8980fd5b602489634e487b7160e01b81526041600452fd5b8480fd5b50346101795780600319360112610179576001600160a01b036020915416604051908152f35b5034610179578060031936011261017957600754600854600954600a54600b54600c54604080516001600160a01b0397881681529587166020870152938616938501939093529084166060840152831660808301529190911660a082015260c090f35b5034610179578060031936011261017957610cd9610e28565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8234610179578060031936011261017957506001546002546003546004546005546006546001600160a01b0395861687529385166020870152918416604086015283166060850152821660808401521660a082015260c090f35b600435906001600160a01b0382168203610b0c57565b67ffffffffffffffff8111610daa57604052565b634e487b7160e01b600052604160045260246000fd5b6040519060a0820182811067ffffffffffffffff821117610daa5760405260006080838281528260208201528260408201528260608201520152565b6024356001600160a01b0381168103610b0c5790565b6044356001600160a01b0381168103610b0c5790565b6001600160a01b03600054163303610e3c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe604060808152610d1380380380610015816102eb565b9283398101906060818303126102e65761002e81610326565b9160209261003d848401610326565b8584015190936001600160401b0391908282116102e657019280601f850112156102e6578351936100756100708661033a565b6102eb565b94808652878601928882840101116102e65782886100939301610355565b823b1561028c577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b03199081166001600160a01b0386811691821790935590959194600093909290917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a2805115801590610285575b6101df575b50505050507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103937f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f86865493815196818616885216958684820152a1831561018d575016179055516108e7908161042c8239f35b60849086519062461bcd60e51b82526004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8951946060860190811186821017610271578a52602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c89860152660819985a5b195960ca1b8a8601525161025d9493929183918291845af4903d15610268573d61024e6100708261033a565b90815280938a3d92013e610378565b503880808080610119565b60609250610378565b634e487b7160e01b85526041600452602485fd5b5083610114565b865162461bcd60e51b815260048101879052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761031057604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036102e657565b6001600160401b03811161031057601f01601f191660200190565b60005b8381106103685750506000910152565b8181015183820152602001610358565b919290156103da575081511561038c575090565b3b156103955790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103ed5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261041d8151809281602486015260208686019101610355565b601f01601f19168101030190fdfe60806040526004361015610019575b36610460575b610460565b6000803560e01c9081633659cfe61461006c575080634f1ef286146100675780635c60da1b146100625780638f2839701461005d5763f851a4400361000e57610367565b610246565b6101c5565b610109565b346100de5760206003193601126100de576100856100e1565b73ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014576100db906100d26103f9565b90838252610571565b80f35b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010457565b600080fd5b60406003193601126101045761011d6100e1565b60243567ffffffffffffffff9182821161010457366023830112156101045781600401359283116101045736602484840101116101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146000146100145760006020848060246101b16101ac6101c399610444565b61041e565b9682885201838701378401015261068c565b005b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460405191168152602090f35b346101045760206003193601126101045761025f6100e1565b73ffffffffffffffffffffffffffffffffffffffff907fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610391808354163314600014610014577f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f604084549281519481851686521693846020820152a181156102fd5773ffffffffffffffffffffffffffffffffffffffff1916179055005b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61039080825416331460001461001457905460405191168152602090f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761041957604052565b6103ca565b90601f19601f604051930116820182811067ffffffffffffffff82111761041957604052565b67ffffffffffffffff811161041957601f01601f191660200190565b73ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146104e1577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e156104dd573d90f35b3d90fd5b60a460405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f65740000000000000000000000000000000000000000000000000000000000006084820152fd5b803b156106225773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061061a575b610605575050565b61061791610611610727565b91610797565b50565b5060006105fd565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b803b156106225773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061071f57610605575050565b5060016105fd565b604051906060820182811067ffffffffffffffff82111761041957604052602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806107cc9493602081519101845af43d156107cf573d916107bc6101ac84610444565b9283523d6000602085013e610822565b90565b606091610822565b156107de57565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b919290156108425750815115610836575090565b6107cc903b15156107d7565b8251909150156108555750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061089a57505050601f19601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161087756fea2646970667358221220ea74f55bbd38dae667995151af9c5ddc4beac0fe35938eb181ab1ab03796f56864736f6c63430008190033a2646970667358221220fef5e687de549ccc2d21941782774076bdbc4cc9d05f243b3f3a0ee7fc05d8c664736f6c63430008190033",
}

// BridgeCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeCreatorMetaData.ABI instead.
var BridgeCreatorABI = BridgeCreatorMetaData.ABI

// BridgeCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeCreatorMetaData.Bin instead.
var BridgeCreatorBin = BridgeCreatorMetaData.Bin

// DeployBridgeCreator deploys a new Ethereum contract, binding an instance of BridgeCreator to it.
func DeployBridgeCreator(auth *bind.TransactOpts, backend bind.ContractBackend, _ethBasedTemplates BridgeCreatorBridgeTemplates, _erc20BasedTemplates BridgeCreatorBridgeTemplates) (common.Address, *types.Transaction, *BridgeCreator, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeCreatorBin), backend, _ethBasedTemplates, _erc20BasedTemplates)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// BridgeCreator is an auto generated Go binding around an Ethereum contract.
type BridgeCreator struct {
	BridgeCreatorCaller     // Read-only binding to the contract
	BridgeCreatorTransactor // Write-only binding to the contract
	BridgeCreatorFilterer   // Log filterer for contract events
}

// BridgeCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeCreatorSession struct {
	Contract     *BridgeCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCreatorCallerSession struct {
	Contract *BridgeCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BridgeCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeCreatorTransactorSession struct {
	Contract     *BridgeCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeCreatorRaw struct {
	Contract *BridgeCreator // Generic contract binding to access the raw methods on
}

// BridgeCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCreatorCallerRaw struct {
	Contract *BridgeCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactorRaw struct {
	Contract *BridgeCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeCreator creates a new instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreator(address common.Address, backend bind.ContractBackend) (*BridgeCreator, error) {
	contract, err := bindBridgeCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// NewBridgeCreatorCaller creates a new read-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorCaller(address common.Address, caller bind.ContractCaller) (*BridgeCreatorCaller, error) {
	contract, err := bindBridgeCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorCaller{contract: contract}, nil
}

// NewBridgeCreatorTransactor creates a new write-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeCreatorTransactor, error) {
	contract, err := bindBridgeCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTransactor{contract: contract}, nil
}

// NewBridgeCreatorFilterer creates a new log filterer instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeCreatorFilterer, error) {
	contract, err := bindBridgeCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorFilterer{contract: contract}, nil
}

// bindBridgeCreator binds a generic wrapper to an already deployed contract.
func bindBridgeCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.BridgeCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transact(opts, method, params...)
}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCaller) Erc20BasedTemplates(opts *bind.CallOpts) (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "erc20BasedTemplates")

	outstruct := new(struct {
		Bridge                        common.Address
		SequencerInbox                common.Address
		DelayBufferableSequencerInbox common.Address
		Inbox                         common.Address
		RollupEventInbox              common.Address
		Outbox                        common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Bridge = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SequencerInbox = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.DelayBufferableSequencerInbox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Inbox = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RollupEventInbox = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Outbox = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorSession) Erc20BasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.Erc20BasedTemplates(&_BridgeCreator.CallOpts)
}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCallerSession) Erc20BasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.Erc20BasedTemplates(&_BridgeCreator.CallOpts)
}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCaller) EthBasedTemplates(opts *bind.CallOpts) (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "ethBasedTemplates")

	outstruct := new(struct {
		Bridge                        common.Address
		SequencerInbox                common.Address
		DelayBufferableSequencerInbox common.Address
		Inbox                         common.Address
		RollupEventInbox              common.Address
		Outbox                        common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Bridge = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SequencerInbox = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.DelayBufferableSequencerInbox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Inbox = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RollupEventInbox = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Outbox = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorSession) EthBasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.EthBasedTemplates(&_BridgeCreator.CallOpts)
}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCallerSession) EthBasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.EthBasedTemplates(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// CreateBridge is a paid mutator transaction binding the contract method 0xbf2359f7.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint256,uint256,uint256,uint256) maxTimeVariation, (uint64,uint64,uint64) bufferConfig, address espressoTEEVerifier) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorTransactor) CreateBridge(opts *bind.TransactOpts, adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation, bufferConfig BufferConfig, espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "createBridge", adminProxy, rollup, nativeToken, maxTimeVariation, bufferConfig, espressoTEEVerifier)
}

// CreateBridge is a paid mutator transaction binding the contract method 0xbf2359f7.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint256,uint256,uint256,uint256) maxTimeVariation, (uint64,uint64,uint64) bufferConfig, address espressoTEEVerifier) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorSession) CreateBridge(adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation, bufferConfig BufferConfig, espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, nativeToken, maxTimeVariation, bufferConfig, espressoTEEVerifier)
}

// CreateBridge is a paid mutator transaction binding the contract method 0xbf2359f7.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint256,uint256,uint256,uint256) maxTimeVariation, (uint64,uint64,uint64) bufferConfig, address espressoTEEVerifier) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorTransactorSession) CreateBridge(adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation, bufferConfig BufferConfig, espressoTEEVerifier common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, nativeToken, maxTimeVariation, bufferConfig, espressoTEEVerifier)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0xceab9410.
//
// Solidity: function updateERC20Templates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateERC20Templates(opts *bind.TransactOpts, _newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateERC20Templates", _newTemplates)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0xceab9410.
//
// Solidity: function updateERC20Templates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateERC20Templates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateERC20Templates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0xceab9410.
//
// Solidity: function updateERC20Templates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateERC20Templates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateERC20Templates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xe83b0e16.
//
// Solidity: function updateTemplates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateTemplates(opts *bind.TransactOpts, _newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateTemplates", _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xe83b0e16.
//
// Solidity: function updateTemplates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateTemplates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xe83b0e16.
//
// Solidity: function updateTemplates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateTemplates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// BridgeCreatorERC20TemplatesUpdatedIterator is returned from FilterERC20TemplatesUpdated and is used to iterate over the raw logs and unpacked data for ERC20TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorERC20TemplatesUpdatedIterator struct {
	Event *BridgeCreatorERC20TemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorERC20TemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorERC20TemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorERC20TemplatesUpdated represents a ERC20TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorERC20TemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterERC20TemplatesUpdated is a free log retrieval operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterERC20TemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorERC20TemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "ERC20TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorERC20TemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "ERC20TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchERC20TemplatesUpdated is a free log subscription operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchERC20TemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorERC20TemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "ERC20TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorERC20TemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "ERC20TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20TemplatesUpdated is a log parse operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseERC20TemplatesUpdated(log types.Log) (*BridgeCreatorERC20TemplatesUpdated, error) {
	event := new(BridgeCreatorERC20TemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "ERC20TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferredIterator struct {
	Event *BridgeCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorOwnershipTransferredIterator{contract: _BridgeCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorOwnershipTransferred)
				if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeCreatorOwnershipTransferred, error) {
	event := new(BridgeCreatorOwnershipTransferred)
	if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdatedIterator struct {
	Event *BridgeCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorTemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*BridgeCreatorTemplatesUpdated, error) {
	event := new(BridgeCreatorTemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ConstantArrayStorageMetaData contains all meta data concerning the ConstantArrayStorage contract.
var ConstantArrayStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"__array\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"array\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523461012d576102e88038038061001981610132565b9283398101906020808284031261012d5781516001600160401b039283821161012d57019280601f8501121561012d57835190838211610107578160051b9483610064818801610132565b80948152019084829782010192831161012d5784809101915b83831061011d575050505051918211610107576801000000000000000082116101075760009283548385558084106100e2575b5090838052808420935b8381106100d05760405161019090816101588239f35b825185820155918101916001016100ba565b8480528383862091820191015b8181106100fc57506100b0565b8581556001016100ef565b634e487b7160e01b600052604160045260246000fd5b825181529181019185910161007d565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176101075760405256fe6080600436101561000f57600080fd5b600090813560e01c63b0ec2ae11461002657600080fd5b3461015657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101565781549081815260208181810180948680527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390875b8582821061013f575050505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019367ffffffffffffffff8511838610176101125790918493928460405280850191818652518092526040850193925b8281106100fb57505050500390f35b8351855286955093810193928101926001016100ec565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526041600452fd5b835485528795509093019260019283019201610089565b5080fdfea2646970667358221220389bcd361b7ec0ba26e662b79f3eee0a02b438b66f906ec60142eeef96267af064736f6c63430008190033",
}

// ConstantArrayStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ConstantArrayStorageMetaData.ABI instead.
var ConstantArrayStorageABI = ConstantArrayStorageMetaData.ABI

// ConstantArrayStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConstantArrayStorageMetaData.Bin instead.
var ConstantArrayStorageBin = ConstantArrayStorageMetaData.Bin

// DeployConstantArrayStorage deploys a new Ethereum contract, binding an instance of ConstantArrayStorage to it.
func DeployConstantArrayStorage(auth *bind.TransactOpts, backend bind.ContractBackend, __array []*big.Int) (common.Address, *types.Transaction, *ConstantArrayStorage, error) {
	parsed, err := ConstantArrayStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConstantArrayStorageBin), backend, __array)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConstantArrayStorage{ConstantArrayStorageCaller: ConstantArrayStorageCaller{contract: contract}, ConstantArrayStorageTransactor: ConstantArrayStorageTransactor{contract: contract}, ConstantArrayStorageFilterer: ConstantArrayStorageFilterer{contract: contract}}, nil
}

// ConstantArrayStorage is an auto generated Go binding around an Ethereum contract.
type ConstantArrayStorage struct {
	ConstantArrayStorageCaller     // Read-only binding to the contract
	ConstantArrayStorageTransactor // Write-only binding to the contract
	ConstantArrayStorageFilterer   // Log filterer for contract events
}

// ConstantArrayStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantArrayStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantArrayStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantArrayStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantArrayStorageSession struct {
	Contract     *ConstantArrayStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ConstantArrayStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantArrayStorageCallerSession struct {
	Contract *ConstantArrayStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ConstantArrayStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantArrayStorageTransactorSession struct {
	Contract     *ConstantArrayStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ConstantArrayStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantArrayStorageRaw struct {
	Contract *ConstantArrayStorage // Generic contract binding to access the raw methods on
}

// ConstantArrayStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantArrayStorageCallerRaw struct {
	Contract *ConstantArrayStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantArrayStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantArrayStorageTransactorRaw struct {
	Contract *ConstantArrayStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstantArrayStorage creates a new instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorage(address common.Address, backend bind.ContractBackend) (*ConstantArrayStorage, error) {
	contract, err := bindConstantArrayStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorage{ConstantArrayStorageCaller: ConstantArrayStorageCaller{contract: contract}, ConstantArrayStorageTransactor: ConstantArrayStorageTransactor{contract: contract}, ConstantArrayStorageFilterer: ConstantArrayStorageFilterer{contract: contract}}, nil
}

// NewConstantArrayStorageCaller creates a new read-only instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageCaller(address common.Address, caller bind.ContractCaller) (*ConstantArrayStorageCaller, error) {
	contract, err := bindConstantArrayStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageCaller{contract: contract}, nil
}

// NewConstantArrayStorageTransactor creates a new write-only instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantArrayStorageTransactor, error) {
	contract, err := bindConstantArrayStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageTransactor{contract: contract}, nil
}

// NewConstantArrayStorageFilterer creates a new log filterer instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantArrayStorageFilterer, error) {
	contract, err := bindConstantArrayStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageFilterer{contract: contract}, nil
}

// bindConstantArrayStorage binds a generic wrapper to an already deployed contract.
func bindConstantArrayStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ConstantArrayStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConstantArrayStorage *ConstantArrayStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ConstantArrayStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConstantArrayStorage *ConstantArrayStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConstantArrayStorage *ConstantArrayStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.contract.Transact(opts, method, params...)
}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageCaller) Array(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _ConstantArrayStorage.contract.Call(opts, &out, "array")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageSession) Array() ([]*big.Int, error) {
	return _ConstantArrayStorage.Contract.Array(&_ConstantArrayStorage.CallOpts)
}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageCallerSession) Array() ([]*big.Int, error) {
	return _ConstantArrayStorage.Contract.Array(&_ConstantArrayStorage.CallOpts)
}

// DeployHelperMetaData contains all meta data concerning the DeployHelper contract.
var DeployHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ERC1820_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1820_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1820_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_CREATE2_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_CREATE2_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"getDeploymentTotalCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608080604052346015576122c6908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631b9a680c14611124578063290302ce146110f55780632e796641146110d95780634367d652146100ea57806355e34a6b146110aa57806375ae22b51461108e57806389cf8ae6146110625780639ed2c6f014611040578063acd7d02a14610f3f578063d3a3faab14610f10578063d7c641e714610112578063db633c3e146100ef578063dd0c625a146100ea5763ef77e71a146100b657600080fd5b346100e55760006003193601126100e5576020604051733fab184622dc19b6109349b94811493bf2a453628152f35b600080fd5b611f28565b346100e55760006003193601126100e557602060405167011c37937e0800008152f35b60606003193601126100e55773ffffffffffffffffffffffffffffffffffffffff60043581811681036100e5576024359082821682036100e557610154611179565b60405163a66b327d60e01b8152600060048201524860248201526020816044818887165afa9081156107d357600091610ede575b5080662386f26fc100000180662386f26fc10000116108535761520860443581020460443503610853576101c390604435615208029061221d565b84861615610e2757806040519163313ce56760e01b83526020836004818b8b165afa9283156107d357600093610de9575b50601260ff84161015610dbd575061021361020e8361226e565b61227f565b80156108695761022b61020e6102319284049461226e565b8361222a565b10610dac575b60405191632a4f421360e11b8352733fab184622dc19b6109349b94811493bf2a453626004840152662386f26fc100006024840152604483015233606483015233608483015261520860a483015260443560c483015260e482015261012061010482015260006101248201526020816101448160008988165af180156107d357610d81575b5060206102de915b6040518093819263b75436bb60e01b835260048301611281565b038160008887165af180156107d357610d56575b506102fb61202b565b60405163a66b327d60e01b8152600060048201524860248201526020816044818887165afa9081156107d357600091610d24575b50806657c084e5f3c000016657c084e5f3c000116108535761036060443561520802826657c084e5f3c0000161221d565b84861615610c6d57806040519163313ce56760e01b83526020836004818b8b165afa9283156107d357600093610c2f575b50601260ff84161015610c0357506103ab61020e8361226e565b80156108695761022b61020e6103c39284049461226e565b10610bf2575b60405191632a4f421360e11b835273bb6e024b9cffacb947a71991e386681b1cd1477d60048401526657c084e5f3c0006024840152604483015233606483015233608483015261520860a483015260443560c483015260e482015261012061010482015260006101248201526020816101448160008988165af180156107d357610bc7575b50602061046f916040518093819263b75436bb60e01b835260048301611281565b038160008887165af180156107d357610b9c575b5061048c611f4a565b60405163a66b327d60e01b8152600060048201524860248201526020816044818887165afa9081156107d357600091610b6a575b5080662386f26fc1000001662386f26fc1000011610853576104f16044356152080282662386f26fc100000161221d565b84861615610ab357806040519163313ce56760e01b83526020836004818b8b165afa9283156107d357600093610a75575b50601260ff84161015610a49575061053c61020e8361226e565b80156108695761022b61020e6105549284049461226e565b10610a38575b60405191632a4f421360e11b8352734c8d290a1b368ac4728d83a9e8321fc3af2b39b16004840152662386f26fc100006024840152604483015233606483015233608483015261520860a483015260443560c483015260e482015261012061010482015260006101248201526020816101448160008988165af180156107d357610a0d575b506020610600916040518093819263b75436bb60e01b835260048301611281565b038160008887165af180156107d3576109e2575b5061061d6112c9565b906040519163a66b327d60e01b8352600060048401524860248401526020836044818886165afa9283156107d3576000936109ae575b508267011c37937e0800000167011c37937e0800001161085357610687604435615208028467011c37937e0800000161221d565b848616156108ee57806040519163313ce56760e01b83526020836004818b8b165afa9283156107d3576000936108b0575b5060ff8316601281101561087f5750506106d461020e8361226e565b80156108695761022b61020e6106ec9284049461226e565b10610842575b60405193632a4f421360e11b855273a990077c3205cbdf861e17fa532eeb069ce9ff96600486015267011c37937e0800006024860152604485015233606485015233608485015261520860a485015260443560c485015260e484015261012061010484015260006101248401526020836101448160008987165af19283156107d3578593610813575b506020916107a2915b600060405195868095819463b75436bb60e01b835260048301611281565b0393165af180156107d3576107e8575b5016156107bb57005b6000808080478181156107df575b3390f1156107d357005b6040513d6000823e3d90fd5b506108fc6107c9565b602090813d831161080c575b6107fe8183611140565b810103126100e557826107b2565b503d6107f4565b6020809294503d831161083b575b61082b8183611140565b810103126100e55783918561077b565b503d610821565b6000198114610853576001016106f2565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60129093919311610892575b50506106f2565b6108a9925061020e6108a39161223d565b9061222a565b868061088b565b9092506020813d6020116108e6575b816108cc60209383611140565b810103126100e5575160ff811681036100e55791886106b8565b3d91506108bf565b926020906101246040518096819363679b6ded60e01b835273a990077c3205cbdf861e17fa532eeb069ce9ff96600484015267011c37937e0800006024840152604483015233606483015233608483015261520860a483015260443560c483015261010060e483015260006101048301528987165af19283156107d357859361097f575b506020916107a291610784565b6020809294503d83116109a7575b6109978183611140565b810103126100e557839185610972565b503d61098d565b9092506020813d6020116109da575b816109ca60209383611140565b810103126100e557519185610653565b3d91506109bd565b602090813d8311610a06575b6109f88183611140565b810103126100e55783610614565b503d6109ee565b602090813d8311610a31575b610a238183611140565b810103126100e557846105df565b503d610a19565b60001981146108535760010161055a565b91601260ff821611610a5d575b505061055a565b610a6e925061020e6108a39161223d565b8680610a56565b9092506020813d602011610aab575b81610a9160209383611140565b810103126100e5575160ff811681036100e5579188610522565b3d9150610a84565b906020906101246040518094819363679b6ded60e01b8352734c8d290a1b368ac4728d83a9e8321fc3af2b39b16004840152662386f26fc100006024840152604483015233606483015233608483015261520860a483015260443560c483015261010060e483015260006101048301528988165af180156107d357610b3f575b506020610600916102c4565b602090813d8311610b63575b610b558183611140565b810103126100e55784610b33565b503d610b4b565b90506020813d602011610b94575b81610b8560209383611140565b810103126100e55751856104c0565b3d9150610b78565b602090813d8311610bc0575b610bb28183611140565b810103126100e55783610483565b503d610ba8565b602090813d8311610beb575b610bdd8183611140565b810103126100e5578461044e565b503d610bd3565b6000198114610853576001016103c9565b91601260ff821611610c17575b50506103c9565b610c28925061020e6108a39161223d565b8680610c10565b9092506020813d602011610c65575b81610c4b60209383611140565b810103126100e5575160ff811681036100e5579188610391565b3d9150610c3e565b906020906101246040518094819363679b6ded60e01b835273bb6e024b9cffacb947a71991e386681b1cd1477d60048401526657c084e5f3c0006024840152604483015233606483015233608483015261520860a483015260443560c483015261010060e483015260006101048301528988165af180156107d357610cf9575b50602061046f916102c4565b602090813d8311610d1d575b610d0f8183611140565b810103126100e55784610ced565b503d610d05565b90506020813d602011610d4e575b81610d3f60209383611140565b810103126100e557518561032f565b3d9150610d32565b602090813d8311610d7a575b610d6c8183611140565b810103126100e557836102f2565b503d610d62565b602090813d8311610da5575b610d978183611140565b810103126100e557846102bc565b503d610d8d565b600019811461085357600101610237565b91601260ff821611610dd1575b5050610237565b610de2925061020e6108a39161223d565b8680610dca565b9092506020813d602011610e1f575b81610e0560209383611140565b810103126100e5575160ff811681036100e55791886101f4565b3d9150610df8565b906020906101246040518094819363679b6ded60e01b8352733fab184622dc19b6109349b94811493bf2a453626004840152662386f26fc100006024840152604483015233606483015233608483015261520860a483015260443560c483015261010060e483015260006101048301528988165af180156107d357610eb3575b5060206102de916102c4565b602090813d8311610ed7575b610ec98183611140565b810103126100e55784610ea7565b503d610ebf565b90506020813d602011610f08575b81610ef960209383611140565b810103126100e5575185610188565b3d9150610eec565b346100e55760006003193601126100e5576020604051734c8d290a1b368ac4728d83a9e8321fc3af2b39b18152f35b346100e55760406003193601126100e55760043573ffffffffffffffffffffffffffffffffffffffff81168091036100e5576044906020602435916040519384809263a66b327d60e01b8252600060048301524860248301525afa9182156107d35760009261100c575b50615208908082029182040361085357610fc29161221d565b7f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168103610853576701bb05fd437dc0009060021b810180911161085357602090604051908152f35b9091506020813d602011611038575b8161102860209383611140565b810103126100e557519082610fa9565b3d915061101b565b346100e55760006003193601126100e55760206040516657c084e5f3c0008152f35b346100e55760006003193601126100e55761108a61107e61202b565b60405191829182611281565b0390f35b346100e55760006003193601126100e55761108a61107e611f4a565b346100e55760006003193601126100e557602060405173bb6e024b9cffacb947a71991e386681b1cd1477d8152f35b346100e55760006003193601126100e55761108a61107e6112c9565b346100e55760006003193601126100e557602060405173a990077c3205cbdf861e17fa532eeb069ce9ff968152f35b346100e55760006003193601126100e55761108a61107e611179565b90601f601f19910116810190811067ffffffffffffffff82111761116357604052565b634e487b7160e01b600052604160045260246000fd5b6040519060e0820182811067ffffffffffffffff8211176111635760405260a882527f222222222222222200000000000000000000000000000000000000000000000060c0837f04f8a58085174876e800830186a08080b853604580600e600039806000f350fe60208201527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408201527fe03601600081602082378035828234f58015156039578182fd5b80825250505060608201527f6014600cf31ba02222222222222222222222222222222222222222222222222260808201527f22222222222222a022222222222222222222222222222222222222222222222260a08201520152565b60208082528251818301819052939260005b8581106112b557505050601f19601f8460006040809697860101520116010190565b818101830151848201604001528201611293565b60405190610a60820182811067ffffffffffffffff82111761116357604052610a3c82527f1820182018201820182018201820182018201820182018201820182000000000610a40837f04f90a388085174876e800830c35008080b909e560806040523480156100105760208201527f600080fd5b506109c5806100206000396000f3fe60806040523480156100105760408201527f600080fd5b50600436106100a5576000357c010000000000000000000000000060608201527090048063a41e7d5111610078578063a41e60808201527f7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f760a08201527f12f3e814610280576100a5565b806329965a1d146100aa5780633d584063146160c08201527ee25780635df8122f1461012457806365ba36c114610152575b600080fd5b6160e08201527ee0600480360360608110156100c057600080fd5b50600160a060020a0381356101008201527f811691602081013591604090910135166102b6565b005b6101086004803603606101208201527f208110156100f857600080fd5b5035600160a060020a0316610570565b6040806101408201527f51600160a060020a039092168252519081900360200190f35b6100e0600480366101608201527f03604081101561013a57600080fd5b50600160a060020a0381358116916020016101808201527f35166105bc565b6101c26004803603602081101561016857600080fd5b8101906101a08201527f60208101813564010000000081111561018357600080fd5b82018360208201116101c08201527f1561019557600080fd5b803590602001918460018302840111640100000000836101e08201527f1117156101b757600080fd5b5090925090506106b3565b6040805191825251906102008201527f81900360200190f35b6100e0600480360360408110156101ea57600080fd5b506102208201527f8035600160a060020a03169060200135600160e060020a0319166106ee565b616102408201527f01086004803603604081101561022057600080fd5b50600160a060020a0381356102608201527f169060200135610778565b61026c6004803603604081101561024c57600080fd6102808201527f5b508035600160a060020a03169060200135600160e060020a0319166107ef566102a08201527f5b604080519115158252519081900360200190f35b61026c60048036036040816102c08201527f101561029657600080fd5b508035600160a060020a03169060200135600160e06102e08201527f60020a0319166108aa565b6000600160a060020a038416156102cd57836102cf6103008201527f565b335b9050336102db82610570565b600160a060020a0316146103395760406103208201527f805160e560020a62461bcd02815260206004820152600f60248201527f4e6f746103408201527f20746865206d616e6167657200000000000000000000000000000000006044826103608201527f015290519081900360640190fd5b6103428361092a565b1561039757604080516103808201527f60e560020a62461bcd02815260206004820152601a60248201527f4d757374206103a08201527f6e6f7420626520616e20455243313635206861736800000000000060448201526103c08201527f90519081900360640190fd5b600160a060020a038216158015906103b85750606103e08201527f0160a060020a0382163314155b156104ff5760405160200180807f45524331386104008201527f32305f4143434550545f4d4147494300000000000000000000000081525060146104208201527f0190506040516020818303038152906040528051906020012082600160a060026104408201527f0a031663249cb3fa85846040518363ffffffff167c01000000000000000000006104608201526d02815260040180838152602001826104808201527f600160a060020a0316600160a060020a031681526020019250505060206040516104a08201527f8083038186803b15801561047e57600080fd5b505afa158015610492573d60006104c08201527f803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104e08201527f6104ff576040805160e560020a62461bcd0281526020600482018190526024826105008201527f01527f446f6573206e6f7420696d706c656d656e742074686520696e746572666105208201527f616365604482015290519081900360640190fd5b600160a060020a03818116606105408201527e81815260208181526040808320888452909152808220805473ffffffffffff6105608201527fffffffffffffffffffffffffffff19169487169485179055518692917f93baa66105808201527fefbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a4506105a08201527f505050565b600160a060020a03818116600090815260016020526040812054906105c08201527f9116151561059a5750806105b7565b50600160a060020a0380821660009081526105e08201527f60016020526040902054165b919050565b336105c683610570565b600160a0606106008201527f020a031614610624576040805160e560020a62461bcd028152602060048201526106208201527f600f60248201527f4e6f7420746865206d616e6167657200000000000000000061064082015277604482015290519081900360640190fd5b81600160a060026106608201527f0a031681600160a060020a0316146106435780610646565b60005b600160a0606106808201527f020a03838116600081815260016020526040808220805473ffffffffffffffff6106a08201527fffffffffffffffffffffffff19169585169590951790945592519184169290916106c08201527f7f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a436106e08201527f509190a35050565b6000828260405160200180838380828437808301925050506107008201527f925050506040516020818303038152906040528051906020012090505b9291506107208201527f50565b6106f882826107ef565b610703576000610705565b815b600160a060026107408201527f0a03928316600081815260208181526040808320600160e060020a03199690966107608201527f16808452958252808320805473ffffffffffffffffffffffffffffffffffffff6107808201527fff191695909716949094179095559081526002845281812092815291909252206107a08201527f805460ff19166001179055565b600080600160a060020a0384161561079057836107c08201527f610792565b335b905061079d8361092a565b156107c357826107ad82826108aa6107e08201527f565b6107b85760006107ba565b815b925050506106e8565b600160a060020a036108008201527f90811660009081526020818152604080832086845290915290205416905092916108208201527f5050565b6000808061081d857f01ffc9a70000000000000000000000000000006108408201527261094c565b909250905081158061082d5750806108608201527f155b1561083d576000925050506106e8565b61084f85600160e060020a0319616108808201527f094c565b909250905081158061086057508015155b15610870576000925050506108a08201527f6106e8565b61087a858561094c565b909250905060018214801561088f5750806108c08201527f6001145b1561089f576001925050506106e8565b506000949350505050565b606108e08201527f0160a060020a0382166000908152600260209081526040808320600160e060026109008201527f0a03198516845290915281205460ff1615156108f2576108eb83836107ef565b6109208201527f90506106e8565b50600160a060020a03808316600081815260208181526040806109408201527f8320600160e060020a0319871684529091529020549091161492915050565b7b6109608201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590566109808201527f5b6040517f01ffc9a700000000000000000000000000000000000000000000006109a08201527a8082526004820183905260009182919060208160248189617530fa6109c08201527f90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9946109e08201527f9f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018610a008201527f201820182018201820182018201820182018201820182018201820a018201820610a208201520152565b346100e55760006003193601126100e5576020604051662386f26fc100008152f35b6040519060c0820182811067ffffffffffffffff82111761116357604052608182527f220000000000000000000000000000000000000000000000000000000000000060a0837f04f87e8085174876e800830186a08080ad601f80600e600039806000f350fe6060208201527e3681823780368234f58015156014578182fd5b80825250506014600cf31ba060408201527f222222222222222222222222222222222222222222222222222222222222222260608201527fa02222222222222222222222222222222222222222222222222222222222222260808201520152565b604051906101a0820182811067ffffffffffffffff8211176111635760405261017082527f6c634300060200331b8324700082247000000000000000000000000000000000610180837f04f9016c8085174876e8008303c4d88080b9015460806040523480156100105760208201527f600080fd5b50610134806100206000396000f3fe6080604052348015600f576060408201527e80fd5b506004361060285760003560e01c80634af63f0214602d575b60008060608201527ffd5b60cf60048036036040811015604157600080fd5b8101906020810181356460808201527f0100000000811115605b57600080fd5b820183602082011115606c57600080fd60a08201527f5b80359060200191846001830284011164010000000083111715608d5760008060c08201527ffd5b91908080601f01602080910402602001604051908101604052809392919060e08201527f818152602001838380828437600092019190915250929550509135925060eb916101008201527f5050565b604080516001600160a01b039092168252519081900360200190f35b6101208201527f6000818351602085016000f5939250505056fea26469706673582212206b44f86101408201527fa82cb6b156bfcc3dc6aadd6df4eefd204bc928a4397fd15dacf6d5320564736f6101608201520152565b9190820180921161085357565b8181029291811591840414171561085357565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee9116019060ff821161085357565b60ff166012039060ff821161085357565b60ff16604d811161085357600a0a9056fea2646970667358221220c6793f1de7de0c1824191f9396d800f0df6e5d2d63d400821b4e45e9bd96cadd64736f6c63430008190033",
}

// DeployHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use DeployHelperMetaData.ABI instead.
var DeployHelperABI = DeployHelperMetaData.ABI

// DeployHelperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DeployHelperMetaData.Bin instead.
var DeployHelperBin = DeployHelperMetaData.Bin

// DeployDeployHelper deploys a new Ethereum contract, binding an instance of DeployHelper to it.
func DeployDeployHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DeployHelper, error) {
	parsed, err := DeployHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DeployHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DeployHelper{DeployHelperCaller: DeployHelperCaller{contract: contract}, DeployHelperTransactor: DeployHelperTransactor{contract: contract}, DeployHelperFilterer: DeployHelperFilterer{contract: contract}}, nil
}

// DeployHelper is an auto generated Go binding around an Ethereum contract.
type DeployHelper struct {
	DeployHelperCaller     // Read-only binding to the contract
	DeployHelperTransactor // Write-only binding to the contract
	DeployHelperFilterer   // Log filterer for contract events
}

// DeployHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeployHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeployHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeployHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeployHelperSession struct {
	Contract     *DeployHelper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DeployHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeployHelperCallerSession struct {
	Contract *DeployHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DeployHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeployHelperTransactorSession struct {
	Contract     *DeployHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DeployHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeployHelperRaw struct {
	Contract *DeployHelper // Generic contract binding to access the raw methods on
}

// DeployHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeployHelperCallerRaw struct {
	Contract *DeployHelperCaller // Generic read-only contract binding to access the raw methods on
}

// DeployHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeployHelperTransactorRaw struct {
	Contract *DeployHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeployHelper creates a new instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelper(address common.Address, backend bind.ContractBackend) (*DeployHelper, error) {
	contract, err := bindDeployHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeployHelper{DeployHelperCaller: DeployHelperCaller{contract: contract}, DeployHelperTransactor: DeployHelperTransactor{contract: contract}, DeployHelperFilterer: DeployHelperFilterer{contract: contract}}, nil
}

// NewDeployHelperCaller creates a new read-only instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperCaller(address common.Address, caller bind.ContractCaller) (*DeployHelperCaller, error) {
	contract, err := bindDeployHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeployHelperCaller{contract: contract}, nil
}

// NewDeployHelperTransactor creates a new write-only instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*DeployHelperTransactor, error) {
	contract, err := bindDeployHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeployHelperTransactor{contract: contract}, nil
}

// NewDeployHelperFilterer creates a new log filterer instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*DeployHelperFilterer, error) {
	contract, err := bindDeployHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeployHelperFilterer{contract: contract}, nil
}

// bindDeployHelper binds a generic wrapper to an already deployed contract.
func bindDeployHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DeployHelperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeployHelper *DeployHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeployHelper.Contract.DeployHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeployHelper *DeployHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeployHelper.Contract.DeployHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeployHelper *DeployHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeployHelper.Contract.DeployHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeployHelper *DeployHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeployHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeployHelper *DeployHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeployHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeployHelper *DeployHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeployHelper.Contract.contract.Transact(opts, method, params...)
}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ERC1820DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ERC1820DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC1820DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ERC1820DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC1820DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ERC1820PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ERC1820PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC1820PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ERC1820PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC1820PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ERC1820VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ERC1820VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC1820VALUE(&_DeployHelper.CallOpts)
}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ERC1820VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC1820VALUE(&_DeployHelper.CallOpts)
}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ERC2470DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ERC2470DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC2470DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ERC2470DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC2470DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ERC2470PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ERC2470PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC2470PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ERC2470PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC2470PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ERC2470VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ERC2470VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC2470VALUE(&_DeployHelper.CallOpts)
}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ERC2470VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC2470VALUE(&_DeployHelper.CallOpts)
}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) NICKCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.NICKCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.NICKCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) NICKCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.NICKCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.NICKCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) NICKCREATE2VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.NICKCREATE2VALUE(&_DeployHelper.CallOpts)
}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.NICKCREATE2VALUE(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ZOLTUCREATE2DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_CREATE2_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ZOLTUCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ZOLTUCREATE2PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_CREATE2_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ZOLTUCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ZOLTUVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ZOLTUVALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ZOLTUVALUE(&_DeployHelper.CallOpts)
}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUVALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ZOLTUVALUE(&_DeployHelper.CallOpts)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperCaller) GetDeploymentTotalCost(opts *bind.CallOpts, inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "getDeploymentTotalCost", inbox, maxFeePerGas)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _DeployHelper.Contract.GetDeploymentTotalCost(&_DeployHelper.CallOpts, inbox, maxFeePerGas)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _DeployHelper.Contract.GetDeploymentTotalCost(&_DeployHelper.CallOpts, inbox, maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperTransactor) Perform(opts *bind.TransactOpts, _inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.contract.Transact(opts, "perform", _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.Contract.Perform(&_DeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperTransactorSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.Contract.Perform(&_DeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// ERC20RollupEventInboxMetaData contains all meta data concerning the ERC20RollupEventInbox contract.
var ERC20RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a0806040523460225730608052610793908161002882396080518161035f0152f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182636ae71f12146104f857508163c4d66de814610326578163cb23bcb5146102f1578163cf8d56d614610091575063e78cea921461005c57600080fd5b3461008d578160031936011261008d5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b9050346102ed57816003193601126102ed5760249182359167ffffffffffffffff8084116102e957366023850112156102e957838201359081116102e957368582860101116102e95773ffffffffffffffffffffffffffffffffffffffff91826001541633036102a75781156102655783519485936020968488958a87840195873587528a85017f010000000000000000000000000000000000000000000000000000000000000090528d604186015201606184013781018a60618201520360418101865260610161016390866106da565b88541690845190208886519889947f75d81e250000000000000000000000000000000000000000000000000000000086528501600b9052840152604483015287606483015281885a92608493f193841561025b578594610228575b508151928084528151918282860152865b838110610215575050509082601f19601f84888585977fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b9901015201168101030190a280f35b81810183015186820186015282016101cf565b9093508281813d8311610254575b61024081836106da565b81010312610250575192386101be565b8480fd5b503d610236565b82513d87823e3d90fd5b606490601287602087519362461bcd60e51b85528401528201527f454d5054595f434841494e5f434f4e46494700000000000000000000000000006044820152fd5b606490600b87602087519362461bcd60e51b85528401528201527f4f4e4c595f524f4c4c55500000000000000000000000000000000000000000006044820152fd5b8580fd5b8280fd5b50503461008d578160031936011261008d5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b9050346102ed5760206003193601126102ed5780359173ffffffffffffffffffffffffffffffffffffffff9182841680940361025057827f00000000000000000000000000000000000000000000000000000000000000001630146104905784549383851661046857801561044057806020917fffffffffffffffffffffffff00000000000000000000000000000000000000008097161787558351928380927fcb23bcb50000000000000000000000000000000000000000000000000000000082525afa91821561043757508491610408575b501690600154161760015580f35b61042a915060203d602011610430575b61042281836106da565b81019061072c565b386103fa565b503d610418565b513d86823e3d90fd5b5090517f1ad0f743000000000000000000000000000000000000000000000000000000008152fd5b5090517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b6020608492519162461bcd60e51b8352820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b929150346106d657836003193601126106d6576001549173ffffffffffffffffffffffffffffffffffffffff808416947f8da5cb5b00000000000000000000000000000000000000000000000000000000808252602091828187818b5afa9081156106cc579084918a916106af575b5016330361063157508381838954168551928380927fcb23bcb50000000000000000000000000000000000000000000000000000000082525afa91821561062757889261060a575b5050168094146105e45750507fffffffffffffffffffffffff0000000000000000000000000000000000000000161760015580f35b517fd054909f000000000000000000000000000000000000000000000000000000008152fd5b6106209250803d106104305761042281836106da565b38806105af565b84513d8a823e3d90fd5b8482959793965084518094819382525afa9283156106a55760449693610686575b505051927f23295f0e0000000000000000000000000000000000000000000000000000000084523390840152166024820152fd5b61069d929350803d106104305761042281836106da565b903880610652565b82513d88823e3d90fd5b6106c69150843d86116104305761042281836106da565b38610567565b85513d8b823e3d90fd5b8380fd5b90601f601f19910116810190811067ffffffffffffffff8211176106fd57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90816020910312610758575173ffffffffffffffffffffffffffffffffffffffff811681036107585790565b600080fdfea26469706673582212207920447530e16864b67907b0af27c231db2c81a0792f87ce1e6deed4ee55992164736f6c63430008190033",
}

// ERC20RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20RollupEventInboxMetaData.ABI instead.
var ERC20RollupEventInboxABI = ERC20RollupEventInboxMetaData.ABI

// ERC20RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20RollupEventInboxMetaData.Bin instead.
var ERC20RollupEventInboxBin = ERC20RollupEventInboxMetaData.Bin

// DeployERC20RollupEventInbox deploys a new Ethereum contract, binding an instance of ERC20RollupEventInbox to it.
func DeployERC20RollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20RollupEventInbox, error) {
	parsed, err := ERC20RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20RollupEventInbox{ERC20RollupEventInboxCaller: ERC20RollupEventInboxCaller{contract: contract}, ERC20RollupEventInboxTransactor: ERC20RollupEventInboxTransactor{contract: contract}, ERC20RollupEventInboxFilterer: ERC20RollupEventInboxFilterer{contract: contract}}, nil
}

// ERC20RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type ERC20RollupEventInbox struct {
	ERC20RollupEventInboxCaller     // Read-only binding to the contract
	ERC20RollupEventInboxTransactor // Write-only binding to the contract
	ERC20RollupEventInboxFilterer   // Log filterer for contract events
}

// ERC20RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20RollupEventInboxSession struct {
	Contract     *ERC20RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ERC20RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20RollupEventInboxCallerSession struct {
	Contract *ERC20RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ERC20RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20RollupEventInboxTransactorSession struct {
	Contract     *ERC20RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ERC20RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20RollupEventInboxRaw struct {
	Contract *ERC20RollupEventInbox // Generic contract binding to access the raw methods on
}

// ERC20RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxCallerRaw struct {
	Contract *ERC20RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxTransactorRaw struct {
	Contract *ERC20RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20RollupEventInbox creates a new instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInbox(address common.Address, backend bind.ContractBackend) (*ERC20RollupEventInbox, error) {
	contract, err := bindERC20RollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInbox{ERC20RollupEventInboxCaller: ERC20RollupEventInboxCaller{contract: contract}, ERC20RollupEventInboxTransactor: ERC20RollupEventInboxTransactor{contract: contract}, ERC20RollupEventInboxFilterer: ERC20RollupEventInboxFilterer{contract: contract}}, nil
}

// NewERC20RollupEventInboxCaller creates a new read-only instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*ERC20RollupEventInboxCaller, error) {
	contract, err := bindERC20RollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxCaller{contract: contract}, nil
}

// NewERC20RollupEventInboxTransactor creates a new write-only instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20RollupEventInboxTransactor, error) {
	contract, err := bindERC20RollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxTransactor{contract: contract}, nil
}

// NewERC20RollupEventInboxFilterer creates a new log filterer instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20RollupEventInboxFilterer, error) {
	contract, err := bindERC20RollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxFilterer{contract: contract}, nil
}

// bindERC20RollupEventInbox binds a generic wrapper to an already deployed contract.
func bindERC20RollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Bridge() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Bridge(&_ERC20RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Bridge(&_ERC20RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Rollup() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Rollup(&_ERC20RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Rollup(&_ERC20RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.Initialize(&_ERC20RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.Initialize(&_ERC20RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.RollupInitialized(&_ERC20RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.RollupInitialized(&_ERC20RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.UpdateRollupAddress(&_ERC20RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.UpdateRollupAddress(&_ERC20RollupEventInbox.TransactOpts)
}

// ERC20RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *ERC20RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*ERC20RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxInboxMessageDeliveredIterator{contract: _ERC20RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *ERC20RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupEventInboxInboxMessageDelivered)
				if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*ERC20RollupEventInboxInboxMessageDelivered, error) {
	event := new(ERC20RollupEventInboxInboxMessageDelivered)
	if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *ERC20RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _ERC20RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *ERC20RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*ERC20RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FactoryDeployerHelperMetaData contains all meta data concerning the FactoryDeployerHelper contract.
var FactoryDeployerHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"DEPLOY_HELPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_PER_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601557610738908161001b8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826313a694a91461060c575081634956eaf0146103555781634c96a389146100825750636d739b421461005157600080fd5b3461007e578160031936011261007e57602090517390d68b056c411015eae3ec0b98ad94e2c91419f18152f35b5080fd5b91905034610351578260208060031936011261007e576100a061062a565b9373ffffffffffffffffffffffffffffffffffffffff908186169285517fe78cea9200000000000000000000000000000000000000000000000000000000815281818481885afa90811561032a57849183918891610334575b50848951809781937fe1758bd8000000000000000000000000000000000000000000000000000000008352165afa93841561032a5786946102fb575b508651917facd7d02a00000000000000000000000000000000000000000000000000000000835285848401526305f5e100928360248201527390d68b056c411015eae3ec0b98ad94e2c91419f19582826044818a5afa9182156102f15789926102bc575b5089517f23b872dd0000000000000000000000000000000000000000000000000000000081523387820190815273ffffffffffffffffffffffffffffffffffffffff909c1660208d015260408c019290925292909216988190839081906060015b03818a8d5af180156102b25761027b575b5050823b15610277576064928591875198899687957fd7c641e7000000000000000000000000000000000000000000000000000000008752860152602485015260448401525af190811561026e5750610262575080f35b61026b90610652565b80f35b513d84823e3d90fd5b8480fd5b81813d83116102ab575b61028f8183610695565b810103126102a757518015150361027757388061020b565b8580fd5b503d610285565b88513d89823e3d90fd5b91508282813d83116102ea575b6102d38183610695565b810103126102e6579051906101fa610199565b8880fd5b503d6102c9565b8a513d8b823e3d90fd5b61031c919450823d8411610323575b6103148183610695565b8101906106d6565b9238610135565b503d61030a565b87513d88823e3d90fd5b61034b9150823d8411610323576103148183610695565b386100f9565b8280fd5b919050346103515780600319360112610351578261037161062a565b6024359373ffffffffffffffffffffffffffffffffffffffff918281169185517fe78cea9200000000000000000000000000000000000000000000000000000000815260209081818481885afa9081156102b2578691839189916105ef575b50848a51809981937fe1758bd8000000000000000000000000000000000000000000000000000000008352165afa9586156102b25787966105d0575b508751947facd7d02a000000000000000000000000000000000000000000000000000000008652838601528860248601527390d68b056c411015eae3ec0b98ad94e2c91419f1948281604481895afa9081156105c6579088939291849161058f575b5089517f23b872dd0000000000000000000000000000000000000000000000000000000081523386820190815273ffffffffffffffffffffffffffffffffffffffff88166020820152604081019290925293839285928390036060019183918b165af180156102b25761055c575b5050823b156102775784906105488751988996879586947fd7c641e7000000000000000000000000000000000000000000000000000000008652850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af190811561026e5750610262575080f35b81813d8311610588575b6105708183610695565b810103126102a75751801515036102775738806104dc565b503d610566565b809450838092503d83116105bf575b6105a88183610695565b810103126105bb5791518792908261046e565b8780fd5b503d61059e565b89513d8a823e3d90fd5b6105e8919650823d8411610323576103148183610695565b943861040c565b6106069150823d8411610323576103148183610695565b386103d0565b84903461007e578160031936011261007e57806305f5e10060209252f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361064d57565b600080fd5b67ffffffffffffffff811161066657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761066657604052565b9081602091031261064d575173ffffffffffffffffffffffffffffffffffffffff8116810361064d579056fea26469706673582212201301ef32a02394ce1baff772931bca9664ad8209ffb56e9abc23c332aebacda264736f6c63430008190033",
}

// FactoryDeployerHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use FactoryDeployerHelperMetaData.ABI instead.
var FactoryDeployerHelperABI = FactoryDeployerHelperMetaData.ABI

// FactoryDeployerHelperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FactoryDeployerHelperMetaData.Bin instead.
var FactoryDeployerHelperBin = FactoryDeployerHelperMetaData.Bin

// DeployFactoryDeployerHelper deploys a new Ethereum contract, binding an instance of FactoryDeployerHelper to it.
func DeployFactoryDeployerHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FactoryDeployerHelper, error) {
	parsed, err := FactoryDeployerHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FactoryDeployerHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FactoryDeployerHelper{FactoryDeployerHelperCaller: FactoryDeployerHelperCaller{contract: contract}, FactoryDeployerHelperTransactor: FactoryDeployerHelperTransactor{contract: contract}, FactoryDeployerHelperFilterer: FactoryDeployerHelperFilterer{contract: contract}}, nil
}

// FactoryDeployerHelper is an auto generated Go binding around an Ethereum contract.
type FactoryDeployerHelper struct {
	FactoryDeployerHelperCaller     // Read-only binding to the contract
	FactoryDeployerHelperTransactor // Write-only binding to the contract
	FactoryDeployerHelperFilterer   // Log filterer for contract events
}

// FactoryDeployerHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type FactoryDeployerHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryDeployerHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FactoryDeployerHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryDeployerHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FactoryDeployerHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryDeployerHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FactoryDeployerHelperSession struct {
	Contract     *FactoryDeployerHelper // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FactoryDeployerHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FactoryDeployerHelperCallerSession struct {
	Contract *FactoryDeployerHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FactoryDeployerHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FactoryDeployerHelperTransactorSession struct {
	Contract     *FactoryDeployerHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FactoryDeployerHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type FactoryDeployerHelperRaw struct {
	Contract *FactoryDeployerHelper // Generic contract binding to access the raw methods on
}

// FactoryDeployerHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FactoryDeployerHelperCallerRaw struct {
	Contract *FactoryDeployerHelperCaller // Generic read-only contract binding to access the raw methods on
}

// FactoryDeployerHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FactoryDeployerHelperTransactorRaw struct {
	Contract *FactoryDeployerHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFactoryDeployerHelper creates a new instance of FactoryDeployerHelper, bound to a specific deployed contract.
func NewFactoryDeployerHelper(address common.Address, backend bind.ContractBackend) (*FactoryDeployerHelper, error) {
	contract, err := bindFactoryDeployerHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FactoryDeployerHelper{FactoryDeployerHelperCaller: FactoryDeployerHelperCaller{contract: contract}, FactoryDeployerHelperTransactor: FactoryDeployerHelperTransactor{contract: contract}, FactoryDeployerHelperFilterer: FactoryDeployerHelperFilterer{contract: contract}}, nil
}

// NewFactoryDeployerHelperCaller creates a new read-only instance of FactoryDeployerHelper, bound to a specific deployed contract.
func NewFactoryDeployerHelperCaller(address common.Address, caller bind.ContractCaller) (*FactoryDeployerHelperCaller, error) {
	contract, err := bindFactoryDeployerHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryDeployerHelperCaller{contract: contract}, nil
}

// NewFactoryDeployerHelperTransactor creates a new write-only instance of FactoryDeployerHelper, bound to a specific deployed contract.
func NewFactoryDeployerHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*FactoryDeployerHelperTransactor, error) {
	contract, err := bindFactoryDeployerHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryDeployerHelperTransactor{contract: contract}, nil
}

// NewFactoryDeployerHelperFilterer creates a new log filterer instance of FactoryDeployerHelper, bound to a specific deployed contract.
func NewFactoryDeployerHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*FactoryDeployerHelperFilterer, error) {
	contract, err := bindFactoryDeployerHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FactoryDeployerHelperFilterer{contract: contract}, nil
}

// bindFactoryDeployerHelper binds a generic wrapper to an already deployed contract.
func bindFactoryDeployerHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FactoryDeployerHelperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FactoryDeployerHelper *FactoryDeployerHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FactoryDeployerHelper.Contract.FactoryDeployerHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FactoryDeployerHelper *FactoryDeployerHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.FactoryDeployerHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FactoryDeployerHelper *FactoryDeployerHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.FactoryDeployerHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FactoryDeployerHelper *FactoryDeployerHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FactoryDeployerHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FactoryDeployerHelper *FactoryDeployerHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FactoryDeployerHelper *FactoryDeployerHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.contract.Transact(opts, method, params...)
}

// DEPLOYHELPER is a free data retrieval call binding the contract method 0x6d739b42.
//
// Solidity: function DEPLOY_HELPER() view returns(address)
func (_FactoryDeployerHelper *FactoryDeployerHelperCaller) DEPLOYHELPER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FactoryDeployerHelper.contract.Call(opts, &out, "DEPLOY_HELPER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DEPLOYHELPER is a free data retrieval call binding the contract method 0x6d739b42.
//
// Solidity: function DEPLOY_HELPER() view returns(address)
func (_FactoryDeployerHelper *FactoryDeployerHelperSession) DEPLOYHELPER() (common.Address, error) {
	return _FactoryDeployerHelper.Contract.DEPLOYHELPER(&_FactoryDeployerHelper.CallOpts)
}

// DEPLOYHELPER is a free data retrieval call binding the contract method 0x6d739b42.
//
// Solidity: function DEPLOY_HELPER() view returns(address)
func (_FactoryDeployerHelper *FactoryDeployerHelperCallerSession) DEPLOYHELPER() (common.Address, error) {
	return _FactoryDeployerHelper.Contract.DEPLOYHELPER(&_FactoryDeployerHelper.CallOpts)
}

// MAXFEEPERGAS is a free data retrieval call binding the contract method 0x13a694a9.
//
// Solidity: function MAX_FEE_PER_GAS() view returns(uint256)
func (_FactoryDeployerHelper *FactoryDeployerHelperCaller) MAXFEEPERGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FactoryDeployerHelper.contract.Call(opts, &out, "MAX_FEE_PER_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXFEEPERGAS is a free data retrieval call binding the contract method 0x13a694a9.
//
// Solidity: function MAX_FEE_PER_GAS() view returns(uint256)
func (_FactoryDeployerHelper *FactoryDeployerHelperSession) MAXFEEPERGAS() (*big.Int, error) {
	return _FactoryDeployerHelper.Contract.MAXFEEPERGAS(&_FactoryDeployerHelper.CallOpts)
}

// MAXFEEPERGAS is a free data retrieval call binding the contract method 0x13a694a9.
//
// Solidity: function MAX_FEE_PER_GAS() view returns(uint256)
func (_FactoryDeployerHelper *FactoryDeployerHelperCallerSession) MAXFEEPERGAS() (*big.Int, error) {
	return _FactoryDeployerHelper.Contract.MAXFEEPERGAS(&_FactoryDeployerHelper.CallOpts)
}

// Deploy4956eaf0 is a paid mutator transaction binding the contract method 0x4956eaf0.
//
// Solidity: function deploy(address inbox, uint256 maxFeePerGas) returns()
func (_FactoryDeployerHelper *FactoryDeployerHelperTransactor) Deploy4956eaf0(opts *bind.TransactOpts, inbox common.Address, maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _FactoryDeployerHelper.contract.Transact(opts, "deploy", inbox, maxFeePerGas)
}

// Deploy4956eaf0 is a paid mutator transaction binding the contract method 0x4956eaf0.
//
// Solidity: function deploy(address inbox, uint256 maxFeePerGas) returns()
func (_FactoryDeployerHelper *FactoryDeployerHelperSession) Deploy4956eaf0(inbox common.Address, maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.Deploy4956eaf0(&_FactoryDeployerHelper.TransactOpts, inbox, maxFeePerGas)
}

// Deploy4956eaf0 is a paid mutator transaction binding the contract method 0x4956eaf0.
//
// Solidity: function deploy(address inbox, uint256 maxFeePerGas) returns()
func (_FactoryDeployerHelper *FactoryDeployerHelperTransactorSession) Deploy4956eaf0(inbox common.Address, maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.Deploy4956eaf0(&_FactoryDeployerHelper.TransactOpts, inbox, maxFeePerGas)
}

// Deploy4c96a389 is a paid mutator transaction binding the contract method 0x4c96a389.
//
// Solidity: function deploy(address inbox) returns()
func (_FactoryDeployerHelper *FactoryDeployerHelperTransactor) Deploy4c96a389(opts *bind.TransactOpts, inbox common.Address) (*types.Transaction, error) {
	return _FactoryDeployerHelper.contract.Transact(opts, "deploy0", inbox)
}

// Deploy4c96a389 is a paid mutator transaction binding the contract method 0x4c96a389.
//
// Solidity: function deploy(address inbox) returns()
func (_FactoryDeployerHelper *FactoryDeployerHelperSession) Deploy4c96a389(inbox common.Address) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.Deploy4c96a389(&_FactoryDeployerHelper.TransactOpts, inbox)
}

// Deploy4c96a389 is a paid mutator transaction binding the contract method 0x4c96a389.
//
// Solidity: function deploy(address inbox) returns()
func (_FactoryDeployerHelper *FactoryDeployerHelperTransactorSession) Deploy4c96a389(inbox common.Address) (*types.Transaction, error) {
	return _FactoryDeployerHelper.Contract.Deploy4c96a389(&_FactoryDeployerHelper.TransactOpts, inbox)
}

// IDeployHelperMetaData contains all meta data concerning the IDeployHelper contract.
var IDeployHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"getDeploymentTotalCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
}

// IDeployHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use IDeployHelperMetaData.ABI instead.
var IDeployHelperABI = IDeployHelperMetaData.ABI

// IDeployHelper is an auto generated Go binding around an Ethereum contract.
type IDeployHelper struct {
	IDeployHelperCaller     // Read-only binding to the contract
	IDeployHelperTransactor // Write-only binding to the contract
	IDeployHelperFilterer   // Log filterer for contract events
}

// IDeployHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDeployHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDeployHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDeployHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDeployHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDeployHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDeployHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDeployHelperSession struct {
	Contract     *IDeployHelper    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IDeployHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDeployHelperCallerSession struct {
	Contract *IDeployHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IDeployHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDeployHelperTransactorSession struct {
	Contract     *IDeployHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IDeployHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDeployHelperRaw struct {
	Contract *IDeployHelper // Generic contract binding to access the raw methods on
}

// IDeployHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDeployHelperCallerRaw struct {
	Contract *IDeployHelperCaller // Generic read-only contract binding to access the raw methods on
}

// IDeployHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDeployHelperTransactorRaw struct {
	Contract *IDeployHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDeployHelper creates a new instance of IDeployHelper, bound to a specific deployed contract.
func NewIDeployHelper(address common.Address, backend bind.ContractBackend) (*IDeployHelper, error) {
	contract, err := bindIDeployHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDeployHelper{IDeployHelperCaller: IDeployHelperCaller{contract: contract}, IDeployHelperTransactor: IDeployHelperTransactor{contract: contract}, IDeployHelperFilterer: IDeployHelperFilterer{contract: contract}}, nil
}

// NewIDeployHelperCaller creates a new read-only instance of IDeployHelper, bound to a specific deployed contract.
func NewIDeployHelperCaller(address common.Address, caller bind.ContractCaller) (*IDeployHelperCaller, error) {
	contract, err := bindIDeployHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDeployHelperCaller{contract: contract}, nil
}

// NewIDeployHelperTransactor creates a new write-only instance of IDeployHelper, bound to a specific deployed contract.
func NewIDeployHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*IDeployHelperTransactor, error) {
	contract, err := bindIDeployHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDeployHelperTransactor{contract: contract}, nil
}

// NewIDeployHelperFilterer creates a new log filterer instance of IDeployHelper, bound to a specific deployed contract.
func NewIDeployHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*IDeployHelperFilterer, error) {
	contract, err := bindIDeployHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDeployHelperFilterer{contract: contract}, nil
}

// bindIDeployHelper binds a generic wrapper to an already deployed contract.
func bindIDeployHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IDeployHelperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDeployHelper *IDeployHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDeployHelper.Contract.IDeployHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDeployHelper *IDeployHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDeployHelper.Contract.IDeployHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDeployHelper *IDeployHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDeployHelper.Contract.IDeployHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDeployHelper *IDeployHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDeployHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDeployHelper *IDeployHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDeployHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDeployHelper *IDeployHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDeployHelper.Contract.contract.Transact(opts, method, params...)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_IDeployHelper *IDeployHelperCaller) GetDeploymentTotalCost(opts *bind.CallOpts, inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IDeployHelper.contract.Call(opts, &out, "getDeploymentTotalCost", inbox, maxFeePerGas)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_IDeployHelper *IDeployHelperSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _IDeployHelper.Contract.GetDeploymentTotalCost(&_IDeployHelper.CallOpts, inbox, maxFeePerGas)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_IDeployHelper *IDeployHelperCallerSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _IDeployHelper.Contract.GetDeploymentTotalCost(&_IDeployHelper.CallOpts, inbox, maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_IDeployHelper *IDeployHelperTransactor) Perform(opts *bind.TransactOpts, _inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _IDeployHelper.contract.Transact(opts, "perform", _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_IDeployHelper *IDeployHelperSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _IDeployHelper.Contract.Perform(&_IDeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_IDeployHelper *IDeployHelperTransactorSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _IDeployHelper.Contract.Perform(&_IDeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, value)
}

// IERC20BridgeMetaData contains all meta data concerning the IERC20Bridge contract.
var IERC20BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC20BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20BridgeMetaData.ABI instead.
var IERC20BridgeABI = IERC20BridgeMetaData.ABI

// IERC20Bridge is an auto generated Go binding around an Ethereum contract.
type IERC20Bridge struct {
	IERC20BridgeCaller     // Read-only binding to the contract
	IERC20BridgeTransactor // Write-only binding to the contract
	IERC20BridgeFilterer   // Log filterer for contract events
}

// IERC20BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20BridgeSession struct {
	Contract     *IERC20Bridge     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20BridgeCallerSession struct {
	Contract *IERC20BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IERC20BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20BridgeTransactorSession struct {
	Contract     *IERC20BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IERC20BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20BridgeRaw struct {
	Contract *IERC20Bridge // Generic contract binding to access the raw methods on
}

// IERC20BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20BridgeCallerRaw struct {
	Contract *IERC20BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20BridgeTransactorRaw struct {
	Contract *IERC20BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Bridge creates a new instance of IERC20Bridge, bound to a specific deployed contract.
func NewIERC20Bridge(address common.Address, backend bind.ContractBackend) (*IERC20Bridge, error) {
	contract, err := bindIERC20Bridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Bridge{IERC20BridgeCaller: IERC20BridgeCaller{contract: contract}, IERC20BridgeTransactor: IERC20BridgeTransactor{contract: contract}, IERC20BridgeFilterer: IERC20BridgeFilterer{contract: contract}}, nil
}

// NewIERC20BridgeCaller creates a new read-only instance of IERC20Bridge, bound to a specific deployed contract.
func NewIERC20BridgeCaller(address common.Address, caller bind.ContractCaller) (*IERC20BridgeCaller, error) {
	contract, err := bindIERC20Bridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20BridgeCaller{contract: contract}, nil
}

// NewIERC20BridgeTransactor creates a new write-only instance of IERC20Bridge, bound to a specific deployed contract.
func NewIERC20BridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20BridgeTransactor, error) {
	contract, err := bindIERC20Bridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20BridgeTransactor{contract: contract}, nil
}

// NewIERC20BridgeFilterer creates a new log filterer instance of IERC20Bridge, bound to a specific deployed contract.
func NewIERC20BridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20BridgeFilterer, error) {
	contract, err := bindIERC20Bridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20BridgeFilterer{contract: contract}, nil
}

// bindIERC20Bridge binds a generic wrapper to an already deployed contract.
func bindIERC20Bridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20BridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Bridge *IERC20BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Bridge.Contract.IERC20BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Bridge *IERC20BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Bridge.Contract.IERC20BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Bridge *IERC20BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Bridge.Contract.IERC20BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Bridge *IERC20BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Bridge *IERC20BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Bridge *IERC20BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Bridge.Contract.contract.Transact(opts, method, params...)
}

// NativeToken is a free data retrieval call binding the contract method 0xe1758bd8.
//
// Solidity: function nativeToken() view returns(address)
func (_IERC20Bridge *IERC20BridgeCaller) NativeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IERC20Bridge.contract.Call(opts, &out, "nativeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NativeToken is a free data retrieval call binding the contract method 0xe1758bd8.
//
// Solidity: function nativeToken() view returns(address)
func (_IERC20Bridge *IERC20BridgeSession) NativeToken() (common.Address, error) {
	return _IERC20Bridge.Contract.NativeToken(&_IERC20Bridge.CallOpts)
}

// NativeToken is a free data retrieval call binding the contract method 0xe1758bd8.
//
// Solidity: function nativeToken() view returns(address)
func (_IERC20Bridge *IERC20BridgeCallerSession) NativeToken() (common.Address, error) {
	return _IERC20Bridge.Contract.NativeToken(&_IERC20Bridge.CallOpts)
}

// IInboxBaseMetaData contains all meta data concerning the IInboxBase contract.
var IInboxBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IInboxBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use IInboxBaseMetaData.ABI instead.
var IInboxBaseABI = IInboxBaseMetaData.ABI

// IInboxBase is an auto generated Go binding around an Ethereum contract.
type IInboxBase struct {
	IInboxBaseCaller     // Read-only binding to the contract
	IInboxBaseTransactor // Write-only binding to the contract
	IInboxBaseFilterer   // Log filterer for contract events
}

// IInboxBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type IInboxBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInboxBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IInboxBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInboxBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IInboxBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInboxBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IInboxBaseSession struct {
	Contract     *IInboxBase       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IInboxBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IInboxBaseCallerSession struct {
	Contract *IInboxBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IInboxBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IInboxBaseTransactorSession struct {
	Contract     *IInboxBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IInboxBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type IInboxBaseRaw struct {
	Contract *IInboxBase // Generic contract binding to access the raw methods on
}

// IInboxBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IInboxBaseCallerRaw struct {
	Contract *IInboxBaseCaller // Generic read-only contract binding to access the raw methods on
}

// IInboxBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IInboxBaseTransactorRaw struct {
	Contract *IInboxBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIInboxBase creates a new instance of IInboxBase, bound to a specific deployed contract.
func NewIInboxBase(address common.Address, backend bind.ContractBackend) (*IInboxBase, error) {
	contract, err := bindIInboxBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IInboxBase{IInboxBaseCaller: IInboxBaseCaller{contract: contract}, IInboxBaseTransactor: IInboxBaseTransactor{contract: contract}, IInboxBaseFilterer: IInboxBaseFilterer{contract: contract}}, nil
}

// NewIInboxBaseCaller creates a new read-only instance of IInboxBase, bound to a specific deployed contract.
func NewIInboxBaseCaller(address common.Address, caller bind.ContractCaller) (*IInboxBaseCaller, error) {
	contract, err := bindIInboxBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IInboxBaseCaller{contract: contract}, nil
}

// NewIInboxBaseTransactor creates a new write-only instance of IInboxBase, bound to a specific deployed contract.
func NewIInboxBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*IInboxBaseTransactor, error) {
	contract, err := bindIInboxBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IInboxBaseTransactor{contract: contract}, nil
}

// NewIInboxBaseFilterer creates a new log filterer instance of IInboxBase, bound to a specific deployed contract.
func NewIInboxBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*IInboxBaseFilterer, error) {
	contract, err := bindIInboxBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IInboxBaseFilterer{contract: contract}, nil
}

// bindIInboxBase binds a generic wrapper to an already deployed contract.
func bindIInboxBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IInboxBaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IInboxBase *IInboxBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IInboxBase.Contract.IInboxBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IInboxBase *IInboxBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IInboxBase.Contract.IInboxBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IInboxBase *IInboxBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IInboxBase.Contract.IInboxBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IInboxBase *IInboxBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IInboxBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IInboxBase *IInboxBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IInboxBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IInboxBase *IInboxBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IInboxBase.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IInboxBase *IInboxBaseCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IInboxBase.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IInboxBase *IInboxBaseSession) Bridge() (common.Address, error) {
	return _IInboxBase.Contract.Bridge(&_IInboxBase.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IInboxBase *IInboxBaseCallerSession) Bridge() (common.Address, error) {
	return _IInboxBase.Contract.Bridge(&_IInboxBase.CallOpts)
}

// IOldRollupMetaData contains all meta data concerning the IOldRollup contract.
var IOldRollupMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structIOldRollup.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structOldStaker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IOldRollupABI is the input ABI used to generate the binding from.
// Deprecated: Use IOldRollupMetaData.ABI instead.
var IOldRollupABI = IOldRollupMetaData.ABI

// IOldRollup is an auto generated Go binding around an Ethereum contract.
type IOldRollup struct {
	IOldRollupCaller     // Read-only binding to the contract
	IOldRollupTransactor // Write-only binding to the contract
	IOldRollupFilterer   // Log filterer for contract events
}

// IOldRollupCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOldRollupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOldRollupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOldRollupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOldRollupSession struct {
	Contract     *IOldRollup       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOldRollupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOldRollupCallerSession struct {
	Contract *IOldRollupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IOldRollupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOldRollupTransactorSession struct {
	Contract     *IOldRollupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IOldRollupRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOldRollupRaw struct {
	Contract *IOldRollup // Generic contract binding to access the raw methods on
}

// IOldRollupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOldRollupCallerRaw struct {
	Contract *IOldRollupCaller // Generic read-only contract binding to access the raw methods on
}

// IOldRollupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOldRollupTransactorRaw struct {
	Contract *IOldRollupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOldRollup creates a new instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollup(address common.Address, backend bind.ContractBackend) (*IOldRollup, error) {
	contract, err := bindIOldRollup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOldRollup{IOldRollupCaller: IOldRollupCaller{contract: contract}, IOldRollupTransactor: IOldRollupTransactor{contract: contract}, IOldRollupFilterer: IOldRollupFilterer{contract: contract}}, nil
}

// NewIOldRollupCaller creates a new read-only instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupCaller(address common.Address, caller bind.ContractCaller) (*IOldRollupCaller, error) {
	contract, err := bindIOldRollup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupCaller{contract: contract}, nil
}

// NewIOldRollupTransactor creates a new write-only instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupTransactor(address common.Address, transactor bind.ContractTransactor) (*IOldRollupTransactor, error) {
	contract, err := bindIOldRollup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupTransactor{contract: contract}, nil
}

// NewIOldRollupFilterer creates a new log filterer instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupFilterer(address common.Address, filterer bind.ContractFilterer) (*IOldRollupFilterer, error) {
	contract, err := bindIOldRollup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOldRollupFilterer{contract: contract}, nil
}

// bindIOldRollup binds a generic wrapper to an already deployed contract.
func bindIOldRollup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IOldRollupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollup *IOldRollupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollup.Contract.IOldRollupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollup *IOldRollupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.Contract.IOldRollupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollup *IOldRollupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollup.Contract.IOldRollupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollup *IOldRollupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollup *IOldRollupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollup *IOldRollupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollup.Contract.contract.Transact(opts, method, params...)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_IOldRollup *IOldRollupCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_IOldRollup *IOldRollupSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _IOldRollup.Contract.AnyTrustFastConfirmer(&_IOldRollup.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_IOldRollup *IOldRollupCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _IOldRollup.Contract.AnyTrustFastConfirmer(&_IOldRollup.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupSession) GetNode(nodeNum uint64) (Node, error) {
	return _IOldRollup.Contract.GetNode(&_IOldRollup.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IOldRollup.Contract.GetNode(&_IOldRollup.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (OldStaker, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(OldStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(OldStaker)).(*OldStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _IOldRollup.Contract.GetStaker(&_IOldRollup.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupCallerSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _IOldRollup.Contract.GetStaker(&_IOldRollup.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IOldRollup.Contract.GetStakerAddress(&_IOldRollup.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IOldRollup.Contract.GetStakerAddress(&_IOldRollup.CallOpts, stakerNum)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupSession) IsValidator(validator common.Address) (bool, error) {
	return _IOldRollup.Contract.IsValidator(&_IOldRollup.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _IOldRollup.Contract.IsValidator(&_IOldRollup.CallOpts, validator)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IOldRollup *IOldRollupCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IOldRollup *IOldRollupSession) IsZombie(staker common.Address) (bool, error) {
	return _IOldRollup.Contract.IsZombie(&_IOldRollup.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IOldRollup *IOldRollupCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IOldRollup.Contract.IsZombie(&_IOldRollup.CallOpts, staker)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupSession) LatestConfirmed() (uint64, error) {
	return _IOldRollup.Contract.LatestConfirmed(&_IOldRollup.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupCallerSession) LatestConfirmed() (uint64, error) {
	return _IOldRollup.Contract.LatestConfirmed(&_IOldRollup.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_IOldRollup *IOldRollupCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_IOldRollup *IOldRollupSession) Paused() (bool, error) {
	return _IOldRollup.Contract.Paused(&_IOldRollup.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_IOldRollup *IOldRollupCallerSession) Paused() (bool, error) {
	return _IOldRollup.Contract.Paused(&_IOldRollup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupSession) StakerCount() (uint64, error) {
	return _IOldRollup.Contract.StakerCount(&_IOldRollup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupCallerSession) StakerCount() (uint64, error) {
	return _IOldRollup.Contract.StakerCount(&_IOldRollup.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupSession) ValidatorWalletCreator() (common.Address, error) {
	return _IOldRollup.Contract.ValidatorWalletCreator(&_IOldRollup.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _IOldRollup.Contract.ValidatorWalletCreator(&_IOldRollup.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupSession) WasmModuleRoot() ([32]byte, error) {
	return _IOldRollup.Contract.WasmModuleRoot(&_IOldRollup.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IOldRollup.Contract.WasmModuleRoot(&_IOldRollup.CallOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IOldRollup *IOldRollupTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IOldRollup *IOldRollupSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IOldRollup.Contract.WithdrawStakerFunds(&_IOldRollup.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IOldRollup *IOldRollupTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IOldRollup.Contract.WithdrawStakerFunds(&_IOldRollup.TransactOpts)
}

// IOldRollupNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IOldRollup contract.
type IOldRollupNodeCreatedIterator struct {
	Event *IOldRollupNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOldRollupNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOldRollupNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOldRollupNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOldRollupNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOldRollupNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOldRollupNodeCreated represents a NodeCreated event raised by the IOldRollup contract.
type IOldRollupNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          IOldRollupAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IOldRollupNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IOldRollup.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IOldRollupNodeCreatedIterator{contract: _IOldRollup.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IOldRollupNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IOldRollup.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOldRollupNodeCreated)
				if err := _IOldRollup.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) ParseNodeCreated(log types.Log) (*IOldRollupNodeCreated, error) {
	event := new(IOldRollupNodeCreated)
	if err := _IOldRollup.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOldRollupAdminMetaData contains all meta data concerning the IOldRollupAdmin contract.
var IOldRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IOldRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IOldRollupAdminMetaData.ABI instead.
var IOldRollupAdminABI = IOldRollupAdminMetaData.ABI

// IOldRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IOldRollupAdmin struct {
	IOldRollupAdminCaller     // Read-only binding to the contract
	IOldRollupAdminTransactor // Write-only binding to the contract
	IOldRollupAdminFilterer   // Log filterer for contract events
}

// IOldRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOldRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOldRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOldRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOldRollupAdminSession struct {
	Contract     *IOldRollupAdmin  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOldRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOldRollupAdminCallerSession struct {
	Contract *IOldRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IOldRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOldRollupAdminTransactorSession struct {
	Contract     *IOldRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IOldRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOldRollupAdminRaw struct {
	Contract *IOldRollupAdmin // Generic contract binding to access the raw methods on
}

// IOldRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOldRollupAdminCallerRaw struct {
	Contract *IOldRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IOldRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOldRollupAdminTransactorRaw struct {
	Contract *IOldRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOldRollupAdmin creates a new instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdmin(address common.Address, backend bind.ContractBackend) (*IOldRollupAdmin, error) {
	contract, err := bindIOldRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdmin{IOldRollupAdminCaller: IOldRollupAdminCaller{contract: contract}, IOldRollupAdminTransactor: IOldRollupAdminTransactor{contract: contract}, IOldRollupAdminFilterer: IOldRollupAdminFilterer{contract: contract}}, nil
}

// NewIOldRollupAdminCaller creates a new read-only instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IOldRollupAdminCaller, error) {
	contract, err := bindIOldRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminCaller{contract: contract}, nil
}

// NewIOldRollupAdminTransactor creates a new write-only instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IOldRollupAdminTransactor, error) {
	contract, err := bindIOldRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminTransactor{contract: contract}, nil
}

// NewIOldRollupAdminFilterer creates a new log filterer instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IOldRollupAdminFilterer, error) {
	contract, err := bindIOldRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminFilterer{contract: contract}, nil
}

// bindIOldRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIOldRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IOldRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollupAdmin.Contract.IOldRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.IOldRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.IOldRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollupAdmin *IOldRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollupAdmin *IOldRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollupAdmin *IOldRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.ForceRefundStaker(&_IOldRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.ForceRefundStaker(&_IOldRollupAdmin.TransactOpts, stacker)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Pause(&_IOldRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Pause(&_IOldRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Resume(&_IOldRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Resume(&_IOldRollupAdmin.TransactOpts)
}

// IRollupAdminMetaData contains all meta data concerning the IRollupAdmin contract.
var IRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"AnyTrustFastConfirmerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"AssertionForceConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"AssertionForceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"BaseStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"name\":\"ChallengeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"ConfirmPeriodBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DelayedInboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"name\":\"InboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"LoserStakeEscrowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"MinimumAssertionPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"}],\"name\":\"OldOutboxRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"}],\"name\":\"OutboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSequencerInbox\",\"type\":\"address\"}],\"name\":\"SequencerInboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"StakersForceRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"ValidatorAfkBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"ValidatorWhitelistDisabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\"}],\"name\":\"ValidatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"WasmModuleRootSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumAssertionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validatorAfkBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"espressoTEEVerifier\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"setAnyTrustFastConfirmer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeManager\",\"type\":\"address\"}],\"name\":\"setChallengeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newAfkBlocks\",\"type\":\"uint64\"}],\"name\":\"setValidatorAfkBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupAdminMetaData.ABI instead.
var IRollupAdminABI = IRollupAdminMetaData.ABI

// IRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IRollupAdmin struct {
	IRollupAdminCaller     // Read-only binding to the contract
	IRollupAdminTransactor // Write-only binding to the contract
	IRollupAdminFilterer   // Log filterer for contract events
}

// IRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupAdminSession struct {
	Contract     *IRollupAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupAdminCallerSession struct {
	Contract *IRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupAdminTransactorSession struct {
	Contract     *IRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupAdminRaw struct {
	Contract *IRollupAdmin // Generic contract binding to access the raw methods on
}

// IRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupAdminCallerRaw struct {
	Contract *IRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupAdminTransactorRaw struct {
	Contract *IRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupAdmin creates a new instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdmin(address common.Address, backend bind.ContractBackend) (*IRollupAdmin, error) {
	contract, err := bindIRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupAdmin{IRollupAdminCaller: IRollupAdminCaller{contract: contract}, IRollupAdminTransactor: IRollupAdminTransactor{contract: contract}, IRollupAdminFilterer: IRollupAdminFilterer{contract: contract}}, nil
}

// NewIRollupAdminCaller creates a new read-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IRollupAdminCaller, error) {
	contract, err := bindIRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminCaller{contract: contract}, nil
}

// NewIRollupAdminTransactor creates a new write-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupAdminTransactor, error) {
	contract, err := bindIRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminTransactor{contract: contract}, nil
}

// NewIRollupAdminFilterer creates a new log filterer instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupAdminFilterer, error) {
	contract, err := bindIRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminFilterer{contract: contract}, nil
}

// bindIRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.IRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// Initialize is a paid mutator transaction binding the contract method 0xf5296a9a.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf5296a9a.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf5296a9a.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetAnyTrustFastConfirmer(opts *bind.TransactOpts, _anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setAnyTrustFastConfirmer", _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_IRollupAdmin *IRollupAdminSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetAnyTrustFastConfirmer(&_IRollupAdmin.TransactOpts, _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetAnyTrustFastConfirmer(&_IRollupAdmin.TransactOpts, _anyTrustFastConfirmer)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetChallengeManager(opts *bind.TransactOpts, _challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setChallengeManager", _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetChallengeManager(&_IRollupAdmin.TransactOpts, _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetChallengeManager(&_IRollupAdmin.TransactOpts, _challengeManager)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidatorAfkBlocks is a paid mutator transaction binding the contract method 0xf112cea3.
//
// Solidity: function setValidatorAfkBlocks(uint64 newAfkBlocks) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorAfkBlocks(opts *bind.TransactOpts, newAfkBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorAfkBlocks", newAfkBlocks)
}

// SetValidatorAfkBlocks is a paid mutator transaction binding the contract method 0xf112cea3.
//
// Solidity: function setValidatorAfkBlocks(uint64 newAfkBlocks) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorAfkBlocks(newAfkBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorAfkBlocks(&_IRollupAdmin.TransactOpts, newAfkBlocks)
}

// SetValidatorAfkBlocks is a paid mutator transaction binding the contract method 0xf112cea3.
//
// Solidity: function setValidatorAfkBlocks(uint64 newAfkBlocks) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorAfkBlocks(newAfkBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorAfkBlocks(&_IRollupAdmin.TransactOpts, newAfkBlocks)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// IRollupAdminAnyTrustFastConfirmerSetIterator is returned from FilterAnyTrustFastConfirmerSet and is used to iterate over the raw logs and unpacked data for AnyTrustFastConfirmerSet events raised by the IRollupAdmin contract.
type IRollupAdminAnyTrustFastConfirmerSetIterator struct {
	Event *IRollupAdminAnyTrustFastConfirmerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminAnyTrustFastConfirmerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminAnyTrustFastConfirmerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminAnyTrustFastConfirmerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminAnyTrustFastConfirmerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminAnyTrustFastConfirmerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminAnyTrustFastConfirmerSet represents a AnyTrustFastConfirmerSet event raised by the IRollupAdmin contract.
type IRollupAdminAnyTrustFastConfirmerSet struct {
	AnyTrustFastConfirmer common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterAnyTrustFastConfirmerSet is a free log retrieval operation binding the contract event 0xd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c.
//
// Solidity: event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)
func (_IRollupAdmin *IRollupAdminFilterer) FilterAnyTrustFastConfirmerSet(opts *bind.FilterOpts) (*IRollupAdminAnyTrustFastConfirmerSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "AnyTrustFastConfirmerSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminAnyTrustFastConfirmerSetIterator{contract: _IRollupAdmin.contract, event: "AnyTrustFastConfirmerSet", logs: logs, sub: sub}, nil
}

// WatchAnyTrustFastConfirmerSet is a free log subscription operation binding the contract event 0xd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c.
//
// Solidity: event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)
func (_IRollupAdmin *IRollupAdminFilterer) WatchAnyTrustFastConfirmerSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminAnyTrustFastConfirmerSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "AnyTrustFastConfirmerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminAnyTrustFastConfirmerSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "AnyTrustFastConfirmerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAnyTrustFastConfirmerSet is a log parse operation binding the contract event 0xd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c.
//
// Solidity: event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)
func (_IRollupAdmin *IRollupAdminFilterer) ParseAnyTrustFastConfirmerSet(log types.Log) (*IRollupAdminAnyTrustFastConfirmerSet, error) {
	event := new(IRollupAdminAnyTrustFastConfirmerSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "AnyTrustFastConfirmerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminAssertionForceConfirmedIterator is returned from FilterAssertionForceConfirmed and is used to iterate over the raw logs and unpacked data for AssertionForceConfirmed events raised by the IRollupAdmin contract.
type IRollupAdminAssertionForceConfirmedIterator struct {
	Event *IRollupAdminAssertionForceConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminAssertionForceConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminAssertionForceConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminAssertionForceConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminAssertionForceConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminAssertionForceConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminAssertionForceConfirmed represents a AssertionForceConfirmed event raised by the IRollupAdmin contract.
type IRollupAdminAssertionForceConfirmed struct {
	AssertionHash [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionForceConfirmed is a free log retrieval operation binding the contract event 0x0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea4938.
//
// Solidity: event AssertionForceConfirmed(bytes32 indexed assertionHash)
func (_IRollupAdmin *IRollupAdminFilterer) FilterAssertionForceConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupAdminAssertionForceConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "AssertionForceConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminAssertionForceConfirmedIterator{contract: _IRollupAdmin.contract, event: "AssertionForceConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionForceConfirmed is a free log subscription operation binding the contract event 0x0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea4938.
//
// Solidity: event AssertionForceConfirmed(bytes32 indexed assertionHash)
func (_IRollupAdmin *IRollupAdminFilterer) WatchAssertionForceConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupAdminAssertionForceConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "AssertionForceConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminAssertionForceConfirmed)
				if err := _IRollupAdmin.contract.UnpackLog(event, "AssertionForceConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionForceConfirmed is a log parse operation binding the contract event 0x0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea4938.
//
// Solidity: event AssertionForceConfirmed(bytes32 indexed assertionHash)
func (_IRollupAdmin *IRollupAdminFilterer) ParseAssertionForceConfirmed(log types.Log) (*IRollupAdminAssertionForceConfirmed, error) {
	event := new(IRollupAdminAssertionForceConfirmed)
	if err := _IRollupAdmin.contract.UnpackLog(event, "AssertionForceConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminAssertionForceCreatedIterator is returned from FilterAssertionForceCreated and is used to iterate over the raw logs and unpacked data for AssertionForceCreated events raised by the IRollupAdmin contract.
type IRollupAdminAssertionForceCreatedIterator struct {
	Event *IRollupAdminAssertionForceCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminAssertionForceCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminAssertionForceCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminAssertionForceCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminAssertionForceCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminAssertionForceCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminAssertionForceCreated represents a AssertionForceCreated event raised by the IRollupAdmin contract.
type IRollupAdminAssertionForceCreated struct {
	AssertionHash [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionForceCreated is a free log retrieval operation binding the contract event 0xe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e.
//
// Solidity: event AssertionForceCreated(bytes32 indexed assertionHash)
func (_IRollupAdmin *IRollupAdminFilterer) FilterAssertionForceCreated(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupAdminAssertionForceCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "AssertionForceCreated", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminAssertionForceCreatedIterator{contract: _IRollupAdmin.contract, event: "AssertionForceCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionForceCreated is a free log subscription operation binding the contract event 0xe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e.
//
// Solidity: event AssertionForceCreated(bytes32 indexed assertionHash)
func (_IRollupAdmin *IRollupAdminFilterer) WatchAssertionForceCreated(opts *bind.WatchOpts, sink chan<- *IRollupAdminAssertionForceCreated, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "AssertionForceCreated", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminAssertionForceCreated)
				if err := _IRollupAdmin.contract.UnpackLog(event, "AssertionForceCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionForceCreated is a log parse operation binding the contract event 0xe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e.
//
// Solidity: event AssertionForceCreated(bytes32 indexed assertionHash)
func (_IRollupAdmin *IRollupAdminFilterer) ParseAssertionForceCreated(log types.Log) (*IRollupAdminAssertionForceCreated, error) {
	event := new(IRollupAdminAssertionForceCreated)
	if err := _IRollupAdmin.contract.UnpackLog(event, "AssertionForceCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminBaseStakeSetIterator is returned from FilterBaseStakeSet and is used to iterate over the raw logs and unpacked data for BaseStakeSet events raised by the IRollupAdmin contract.
type IRollupAdminBaseStakeSetIterator struct {
	Event *IRollupAdminBaseStakeSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminBaseStakeSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminBaseStakeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminBaseStakeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminBaseStakeSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminBaseStakeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminBaseStakeSet represents a BaseStakeSet event raised by the IRollupAdmin contract.
type IRollupAdminBaseStakeSet struct {
	NewBaseStake *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterBaseStakeSet is a free log retrieval operation binding the contract event 0x54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b.
//
// Solidity: event BaseStakeSet(uint256 newBaseStake)
func (_IRollupAdmin *IRollupAdminFilterer) FilterBaseStakeSet(opts *bind.FilterOpts) (*IRollupAdminBaseStakeSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "BaseStakeSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminBaseStakeSetIterator{contract: _IRollupAdmin.contract, event: "BaseStakeSet", logs: logs, sub: sub}, nil
}

// WatchBaseStakeSet is a free log subscription operation binding the contract event 0x54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b.
//
// Solidity: event BaseStakeSet(uint256 newBaseStake)
func (_IRollupAdmin *IRollupAdminFilterer) WatchBaseStakeSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminBaseStakeSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "BaseStakeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminBaseStakeSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "BaseStakeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBaseStakeSet is a log parse operation binding the contract event 0x54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b.
//
// Solidity: event BaseStakeSet(uint256 newBaseStake)
func (_IRollupAdmin *IRollupAdminFilterer) ParseBaseStakeSet(log types.Log) (*IRollupAdminBaseStakeSet, error) {
	event := new(IRollupAdminBaseStakeSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "BaseStakeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminChallengeManagerSetIterator is returned from FilterChallengeManagerSet and is used to iterate over the raw logs and unpacked data for ChallengeManagerSet events raised by the IRollupAdmin contract.
type IRollupAdminChallengeManagerSetIterator struct {
	Event *IRollupAdminChallengeManagerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminChallengeManagerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminChallengeManagerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminChallengeManagerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminChallengeManagerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminChallengeManagerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminChallengeManagerSet represents a ChallengeManagerSet event raised by the IRollupAdmin contract.
type IRollupAdminChallengeManagerSet struct {
	ChallengeManager common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterChallengeManagerSet is a free log retrieval operation binding the contract event 0xe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a4598742.
//
// Solidity: event ChallengeManagerSet(address challengeManager)
func (_IRollupAdmin *IRollupAdminFilterer) FilterChallengeManagerSet(opts *bind.FilterOpts) (*IRollupAdminChallengeManagerSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "ChallengeManagerSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminChallengeManagerSetIterator{contract: _IRollupAdmin.contract, event: "ChallengeManagerSet", logs: logs, sub: sub}, nil
}

// WatchChallengeManagerSet is a free log subscription operation binding the contract event 0xe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a4598742.
//
// Solidity: event ChallengeManagerSet(address challengeManager)
func (_IRollupAdmin *IRollupAdminFilterer) WatchChallengeManagerSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminChallengeManagerSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "ChallengeManagerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminChallengeManagerSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "ChallengeManagerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeManagerSet is a log parse operation binding the contract event 0xe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a4598742.
//
// Solidity: event ChallengeManagerSet(address challengeManager)
func (_IRollupAdmin *IRollupAdminFilterer) ParseChallengeManagerSet(log types.Log) (*IRollupAdminChallengeManagerSet, error) {
	event := new(IRollupAdminChallengeManagerSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "ChallengeManagerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminConfirmPeriodBlocksSetIterator is returned from FilterConfirmPeriodBlocksSet and is used to iterate over the raw logs and unpacked data for ConfirmPeriodBlocksSet events raised by the IRollupAdmin contract.
type IRollupAdminConfirmPeriodBlocksSetIterator struct {
	Event *IRollupAdminConfirmPeriodBlocksSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminConfirmPeriodBlocksSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminConfirmPeriodBlocksSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminConfirmPeriodBlocksSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminConfirmPeriodBlocksSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminConfirmPeriodBlocksSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminConfirmPeriodBlocksSet represents a ConfirmPeriodBlocksSet event raised by the IRollupAdmin contract.
type IRollupAdminConfirmPeriodBlocksSet struct {
	NewConfirmPeriod uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterConfirmPeriodBlocksSet is a free log retrieval operation binding the contract event 0xa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b7697.
//
// Solidity: event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) FilterConfirmPeriodBlocksSet(opts *bind.FilterOpts) (*IRollupAdminConfirmPeriodBlocksSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "ConfirmPeriodBlocksSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminConfirmPeriodBlocksSetIterator{contract: _IRollupAdmin.contract, event: "ConfirmPeriodBlocksSet", logs: logs, sub: sub}, nil
}

// WatchConfirmPeriodBlocksSet is a free log subscription operation binding the contract event 0xa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b7697.
//
// Solidity: event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) WatchConfirmPeriodBlocksSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminConfirmPeriodBlocksSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "ConfirmPeriodBlocksSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminConfirmPeriodBlocksSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "ConfirmPeriodBlocksSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmPeriodBlocksSet is a log parse operation binding the contract event 0xa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b7697.
//
// Solidity: event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) ParseConfirmPeriodBlocksSet(log types.Log) (*IRollupAdminConfirmPeriodBlocksSet, error) {
	event := new(IRollupAdminConfirmPeriodBlocksSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "ConfirmPeriodBlocksSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminDelayedInboxSetIterator is returned from FilterDelayedInboxSet and is used to iterate over the raw logs and unpacked data for DelayedInboxSet events raised by the IRollupAdmin contract.
type IRollupAdminDelayedInboxSetIterator struct {
	Event *IRollupAdminDelayedInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminDelayedInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminDelayedInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminDelayedInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminDelayedInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminDelayedInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminDelayedInboxSet represents a DelayedInboxSet event raised by the IRollupAdmin contract.
type IRollupAdminDelayedInboxSet struct {
	Inbox   common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDelayedInboxSet is a free log retrieval operation binding the contract event 0xce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef.
//
// Solidity: event DelayedInboxSet(address inbox, bool enabled)
func (_IRollupAdmin *IRollupAdminFilterer) FilterDelayedInboxSet(opts *bind.FilterOpts) (*IRollupAdminDelayedInboxSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "DelayedInboxSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminDelayedInboxSetIterator{contract: _IRollupAdmin.contract, event: "DelayedInboxSet", logs: logs, sub: sub}, nil
}

// WatchDelayedInboxSet is a free log subscription operation binding the contract event 0xce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef.
//
// Solidity: event DelayedInboxSet(address inbox, bool enabled)
func (_IRollupAdmin *IRollupAdminFilterer) WatchDelayedInboxSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminDelayedInboxSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "DelayedInboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminDelayedInboxSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "DelayedInboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelayedInboxSet is a log parse operation binding the contract event 0xce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef.
//
// Solidity: event DelayedInboxSet(address inbox, bool enabled)
func (_IRollupAdmin *IRollupAdminFilterer) ParseDelayedInboxSet(log types.Log) (*IRollupAdminDelayedInboxSet, error) {
	event := new(IRollupAdminDelayedInboxSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "DelayedInboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminInboxSetIterator is returned from FilterInboxSet and is used to iterate over the raw logs and unpacked data for InboxSet events raised by the IRollupAdmin contract.
type IRollupAdminInboxSetIterator struct {
	Event *IRollupAdminInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminInboxSet represents a InboxSet event raised by the IRollupAdmin contract.
type IRollupAdminInboxSet struct {
	Inbox common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterInboxSet is a free log retrieval operation binding the contract event 0x9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345.
//
// Solidity: event InboxSet(address inbox)
func (_IRollupAdmin *IRollupAdminFilterer) FilterInboxSet(opts *bind.FilterOpts) (*IRollupAdminInboxSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "InboxSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminInboxSetIterator{contract: _IRollupAdmin.contract, event: "InboxSet", logs: logs, sub: sub}, nil
}

// WatchInboxSet is a free log subscription operation binding the contract event 0x9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345.
//
// Solidity: event InboxSet(address inbox)
func (_IRollupAdmin *IRollupAdminFilterer) WatchInboxSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminInboxSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "InboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminInboxSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "InboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxSet is a log parse operation binding the contract event 0x9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345.
//
// Solidity: event InboxSet(address inbox)
func (_IRollupAdmin *IRollupAdminFilterer) ParseInboxSet(log types.Log) (*IRollupAdminInboxSet, error) {
	event := new(IRollupAdminInboxSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "InboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminLoserStakeEscrowSetIterator is returned from FilterLoserStakeEscrowSet and is used to iterate over the raw logs and unpacked data for LoserStakeEscrowSet events raised by the IRollupAdmin contract.
type IRollupAdminLoserStakeEscrowSetIterator struct {
	Event *IRollupAdminLoserStakeEscrowSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminLoserStakeEscrowSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminLoserStakeEscrowSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminLoserStakeEscrowSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminLoserStakeEscrowSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminLoserStakeEscrowSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminLoserStakeEscrowSet represents a LoserStakeEscrowSet event raised by the IRollupAdmin contract.
type IRollupAdminLoserStakeEscrowSet struct {
	NewLoserStakerEscrow common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterLoserStakeEscrowSet is a free log retrieval operation binding the contract event 0x0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd.
//
// Solidity: event LoserStakeEscrowSet(address newLoserStakerEscrow)
func (_IRollupAdmin *IRollupAdminFilterer) FilterLoserStakeEscrowSet(opts *bind.FilterOpts) (*IRollupAdminLoserStakeEscrowSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "LoserStakeEscrowSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminLoserStakeEscrowSetIterator{contract: _IRollupAdmin.contract, event: "LoserStakeEscrowSet", logs: logs, sub: sub}, nil
}

// WatchLoserStakeEscrowSet is a free log subscription operation binding the contract event 0x0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd.
//
// Solidity: event LoserStakeEscrowSet(address newLoserStakerEscrow)
func (_IRollupAdmin *IRollupAdminFilterer) WatchLoserStakeEscrowSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminLoserStakeEscrowSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "LoserStakeEscrowSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminLoserStakeEscrowSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "LoserStakeEscrowSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLoserStakeEscrowSet is a log parse operation binding the contract event 0x0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd.
//
// Solidity: event LoserStakeEscrowSet(address newLoserStakerEscrow)
func (_IRollupAdmin *IRollupAdminFilterer) ParseLoserStakeEscrowSet(log types.Log) (*IRollupAdminLoserStakeEscrowSet, error) {
	event := new(IRollupAdminLoserStakeEscrowSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "LoserStakeEscrowSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminMinimumAssertionPeriodSetIterator is returned from FilterMinimumAssertionPeriodSet and is used to iterate over the raw logs and unpacked data for MinimumAssertionPeriodSet events raised by the IRollupAdmin contract.
type IRollupAdminMinimumAssertionPeriodSetIterator struct {
	Event *IRollupAdminMinimumAssertionPeriodSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminMinimumAssertionPeriodSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminMinimumAssertionPeriodSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminMinimumAssertionPeriodSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminMinimumAssertionPeriodSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminMinimumAssertionPeriodSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminMinimumAssertionPeriodSet represents a MinimumAssertionPeriodSet event raised by the IRollupAdmin contract.
type IRollupAdminMinimumAssertionPeriodSet struct {
	NewPeriod *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinimumAssertionPeriodSet is a free log retrieval operation binding the contract event 0x238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873.
//
// Solidity: event MinimumAssertionPeriodSet(uint256 newPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) FilterMinimumAssertionPeriodSet(opts *bind.FilterOpts) (*IRollupAdminMinimumAssertionPeriodSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "MinimumAssertionPeriodSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminMinimumAssertionPeriodSetIterator{contract: _IRollupAdmin.contract, event: "MinimumAssertionPeriodSet", logs: logs, sub: sub}, nil
}

// WatchMinimumAssertionPeriodSet is a free log subscription operation binding the contract event 0x238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873.
//
// Solidity: event MinimumAssertionPeriodSet(uint256 newPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) WatchMinimumAssertionPeriodSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminMinimumAssertionPeriodSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "MinimumAssertionPeriodSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminMinimumAssertionPeriodSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "MinimumAssertionPeriodSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumAssertionPeriodSet is a log parse operation binding the contract event 0x238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873.
//
// Solidity: event MinimumAssertionPeriodSet(uint256 newPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) ParseMinimumAssertionPeriodSet(log types.Log) (*IRollupAdminMinimumAssertionPeriodSet, error) {
	event := new(IRollupAdminMinimumAssertionPeriodSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "MinimumAssertionPeriodSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminOldOutboxRemovedIterator is returned from FilterOldOutboxRemoved and is used to iterate over the raw logs and unpacked data for OldOutboxRemoved events raised by the IRollupAdmin contract.
type IRollupAdminOldOutboxRemovedIterator struct {
	Event *IRollupAdminOldOutboxRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOldOutboxRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOldOutboxRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOldOutboxRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOldOutboxRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOldOutboxRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOldOutboxRemoved represents a OldOutboxRemoved event raised by the IRollupAdmin contract.
type IRollupAdminOldOutboxRemoved struct {
	Outbox common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOldOutboxRemoved is a free log retrieval operation binding the contract event 0xfe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25.
//
// Solidity: event OldOutboxRemoved(address outbox)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOldOutboxRemoved(opts *bind.FilterOpts) (*IRollupAdminOldOutboxRemovedIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OldOutboxRemoved")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOldOutboxRemovedIterator{contract: _IRollupAdmin.contract, event: "OldOutboxRemoved", logs: logs, sub: sub}, nil
}

// WatchOldOutboxRemoved is a free log subscription operation binding the contract event 0xfe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25.
//
// Solidity: event OldOutboxRemoved(address outbox)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOldOutboxRemoved(opts *bind.WatchOpts, sink chan<- *IRollupAdminOldOutboxRemoved) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OldOutboxRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOldOutboxRemoved)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OldOutboxRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOldOutboxRemoved is a log parse operation binding the contract event 0xfe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25.
//
// Solidity: event OldOutboxRemoved(address outbox)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOldOutboxRemoved(log types.Log) (*IRollupAdminOldOutboxRemoved, error) {
	event := new(IRollupAdminOldOutboxRemoved)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OldOutboxRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminOutboxSetIterator is returned from FilterOutboxSet and is used to iterate over the raw logs and unpacked data for OutboxSet events raised by the IRollupAdmin contract.
type IRollupAdminOutboxSetIterator struct {
	Event *IRollupAdminOutboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOutboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOutboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOutboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOutboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOutboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOutboxSet represents a OutboxSet event raised by the IRollupAdmin contract.
type IRollupAdminOutboxSet struct {
	Outbox common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOutboxSet is a free log retrieval operation binding the contract event 0x0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7.
//
// Solidity: event OutboxSet(address outbox)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOutboxSet(opts *bind.FilterOpts) (*IRollupAdminOutboxSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OutboxSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOutboxSetIterator{contract: _IRollupAdmin.contract, event: "OutboxSet", logs: logs, sub: sub}, nil
}

// WatchOutboxSet is a free log subscription operation binding the contract event 0x0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7.
//
// Solidity: event OutboxSet(address outbox)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOutboxSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminOutboxSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OutboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOutboxSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OutboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutboxSet is a log parse operation binding the contract event 0x0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7.
//
// Solidity: event OutboxSet(address outbox)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOutboxSet(log types.Log) (*IRollupAdminOutboxSet, error) {
	event := new(IRollupAdminOutboxSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OutboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminSequencerInboxSetIterator is returned from FilterSequencerInboxSet and is used to iterate over the raw logs and unpacked data for SequencerInboxSet events raised by the IRollupAdmin contract.
type IRollupAdminSequencerInboxSetIterator struct {
	Event *IRollupAdminSequencerInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminSequencerInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminSequencerInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminSequencerInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminSequencerInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminSequencerInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminSequencerInboxSet represents a SequencerInboxSet event raised by the IRollupAdmin contract.
type IRollupAdminSequencerInboxSet struct {
	NewSequencerInbox common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSequencerInboxSet is a free log retrieval operation binding the contract event 0x82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34.
//
// Solidity: event SequencerInboxSet(address newSequencerInbox)
func (_IRollupAdmin *IRollupAdminFilterer) FilterSequencerInboxSet(opts *bind.FilterOpts) (*IRollupAdminSequencerInboxSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "SequencerInboxSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminSequencerInboxSetIterator{contract: _IRollupAdmin.contract, event: "SequencerInboxSet", logs: logs, sub: sub}, nil
}

// WatchSequencerInboxSet is a free log subscription operation binding the contract event 0x82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34.
//
// Solidity: event SequencerInboxSet(address newSequencerInbox)
func (_IRollupAdmin *IRollupAdminFilterer) WatchSequencerInboxSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminSequencerInboxSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "SequencerInboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminSequencerInboxSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "SequencerInboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerInboxSet is a log parse operation binding the contract event 0x82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34.
//
// Solidity: event SequencerInboxSet(address newSequencerInbox)
func (_IRollupAdmin *IRollupAdminFilterer) ParseSequencerInboxSet(log types.Log) (*IRollupAdminSequencerInboxSet, error) {
	event := new(IRollupAdminSequencerInboxSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "SequencerInboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminStakersForceRefundedIterator is returned from FilterStakersForceRefunded and is used to iterate over the raw logs and unpacked data for StakersForceRefunded events raised by the IRollupAdmin contract.
type IRollupAdminStakersForceRefundedIterator struct {
	Event *IRollupAdminStakersForceRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminStakersForceRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminStakersForceRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminStakersForceRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminStakersForceRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminStakersForceRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminStakersForceRefunded represents a StakersForceRefunded event raised by the IRollupAdmin contract.
type IRollupAdminStakersForceRefunded struct {
	Staker []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakersForceRefunded is a free log retrieval operation binding the contract event 0x53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d7352.
//
// Solidity: event StakersForceRefunded(address[] staker)
func (_IRollupAdmin *IRollupAdminFilterer) FilterStakersForceRefunded(opts *bind.FilterOpts) (*IRollupAdminStakersForceRefundedIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "StakersForceRefunded")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminStakersForceRefundedIterator{contract: _IRollupAdmin.contract, event: "StakersForceRefunded", logs: logs, sub: sub}, nil
}

// WatchStakersForceRefunded is a free log subscription operation binding the contract event 0x53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d7352.
//
// Solidity: event StakersForceRefunded(address[] staker)
func (_IRollupAdmin *IRollupAdminFilterer) WatchStakersForceRefunded(opts *bind.WatchOpts, sink chan<- *IRollupAdminStakersForceRefunded) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "StakersForceRefunded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminStakersForceRefunded)
				if err := _IRollupAdmin.contract.UnpackLog(event, "StakersForceRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakersForceRefunded is a log parse operation binding the contract event 0x53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d7352.
//
// Solidity: event StakersForceRefunded(address[] staker)
func (_IRollupAdmin *IRollupAdminFilterer) ParseStakersForceRefunded(log types.Log) (*IRollupAdminStakersForceRefunded, error) {
	event := new(IRollupAdminStakersForceRefunded)
	if err := _IRollupAdmin.contract.UnpackLog(event, "StakersForceRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminValidatorAfkBlocksSetIterator is returned from FilterValidatorAfkBlocksSet and is used to iterate over the raw logs and unpacked data for ValidatorAfkBlocksSet events raised by the IRollupAdmin contract.
type IRollupAdminValidatorAfkBlocksSetIterator struct {
	Event *IRollupAdminValidatorAfkBlocksSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminValidatorAfkBlocksSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminValidatorAfkBlocksSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminValidatorAfkBlocksSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminValidatorAfkBlocksSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminValidatorAfkBlocksSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminValidatorAfkBlocksSet represents a ValidatorAfkBlocksSet event raised by the IRollupAdmin contract.
type IRollupAdminValidatorAfkBlocksSet struct {
	NewPeriod *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorAfkBlocksSet is a free log retrieval operation binding the contract event 0x43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33.
//
// Solidity: event ValidatorAfkBlocksSet(uint256 newPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) FilterValidatorAfkBlocksSet(opts *bind.FilterOpts) (*IRollupAdminValidatorAfkBlocksSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "ValidatorAfkBlocksSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminValidatorAfkBlocksSetIterator{contract: _IRollupAdmin.contract, event: "ValidatorAfkBlocksSet", logs: logs, sub: sub}, nil
}

// WatchValidatorAfkBlocksSet is a free log subscription operation binding the contract event 0x43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33.
//
// Solidity: event ValidatorAfkBlocksSet(uint256 newPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) WatchValidatorAfkBlocksSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminValidatorAfkBlocksSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "ValidatorAfkBlocksSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminValidatorAfkBlocksSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "ValidatorAfkBlocksSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorAfkBlocksSet is a log parse operation binding the contract event 0x43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33.
//
// Solidity: event ValidatorAfkBlocksSet(uint256 newPeriod)
func (_IRollupAdmin *IRollupAdminFilterer) ParseValidatorAfkBlocksSet(log types.Log) (*IRollupAdminValidatorAfkBlocksSet, error) {
	event := new(IRollupAdminValidatorAfkBlocksSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "ValidatorAfkBlocksSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminValidatorWhitelistDisabledSetIterator is returned from FilterValidatorWhitelistDisabledSet and is used to iterate over the raw logs and unpacked data for ValidatorWhitelistDisabledSet events raised by the IRollupAdmin contract.
type IRollupAdminValidatorWhitelistDisabledSetIterator struct {
	Event *IRollupAdminValidatorWhitelistDisabledSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminValidatorWhitelistDisabledSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminValidatorWhitelistDisabledSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminValidatorWhitelistDisabledSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminValidatorWhitelistDisabledSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminValidatorWhitelistDisabledSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminValidatorWhitelistDisabledSet represents a ValidatorWhitelistDisabledSet event raised by the IRollupAdmin contract.
type IRollupAdminValidatorWhitelistDisabledSet struct {
	ValidatorWhitelistDisabled bool
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterValidatorWhitelistDisabledSet is a free log retrieval operation binding the contract event 0x016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e9.
//
// Solidity: event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)
func (_IRollupAdmin *IRollupAdminFilterer) FilterValidatorWhitelistDisabledSet(opts *bind.FilterOpts) (*IRollupAdminValidatorWhitelistDisabledSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "ValidatorWhitelistDisabledSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminValidatorWhitelistDisabledSetIterator{contract: _IRollupAdmin.contract, event: "ValidatorWhitelistDisabledSet", logs: logs, sub: sub}, nil
}

// WatchValidatorWhitelistDisabledSet is a free log subscription operation binding the contract event 0x016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e9.
//
// Solidity: event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)
func (_IRollupAdmin *IRollupAdminFilterer) WatchValidatorWhitelistDisabledSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminValidatorWhitelistDisabledSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "ValidatorWhitelistDisabledSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminValidatorWhitelistDisabledSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "ValidatorWhitelistDisabledSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorWhitelistDisabledSet is a log parse operation binding the contract event 0x016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e9.
//
// Solidity: event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)
func (_IRollupAdmin *IRollupAdminFilterer) ParseValidatorWhitelistDisabledSet(log types.Log) (*IRollupAdminValidatorWhitelistDisabledSet, error) {
	event := new(IRollupAdminValidatorWhitelistDisabledSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "ValidatorWhitelistDisabledSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminValidatorsSetIterator is returned from FilterValidatorsSet and is used to iterate over the raw logs and unpacked data for ValidatorsSet events raised by the IRollupAdmin contract.
type IRollupAdminValidatorsSetIterator struct {
	Event *IRollupAdminValidatorsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminValidatorsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminValidatorsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminValidatorsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminValidatorsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminValidatorsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminValidatorsSet represents a ValidatorsSet event raised by the IRollupAdmin contract.
type IRollupAdminValidatorsSet struct {
	Validators []common.Address
	Enabled    []bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterValidatorsSet is a free log retrieval operation binding the contract event 0x0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c0.
//
// Solidity: event ValidatorsSet(address[] validators, bool[] enabled)
func (_IRollupAdmin *IRollupAdminFilterer) FilterValidatorsSet(opts *bind.FilterOpts) (*IRollupAdminValidatorsSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "ValidatorsSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminValidatorsSetIterator{contract: _IRollupAdmin.contract, event: "ValidatorsSet", logs: logs, sub: sub}, nil
}

// WatchValidatorsSet is a free log subscription operation binding the contract event 0x0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c0.
//
// Solidity: event ValidatorsSet(address[] validators, bool[] enabled)
func (_IRollupAdmin *IRollupAdminFilterer) WatchValidatorsSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminValidatorsSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "ValidatorsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminValidatorsSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "ValidatorsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorsSet is a log parse operation binding the contract event 0x0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c0.
//
// Solidity: event ValidatorsSet(address[] validators, bool[] enabled)
func (_IRollupAdmin *IRollupAdminFilterer) ParseValidatorsSet(log types.Log) (*IRollupAdminValidatorsSet, error) {
	event := new(IRollupAdminValidatorsSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "ValidatorsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminWasmModuleRootSetIterator is returned from FilterWasmModuleRootSet and is used to iterate over the raw logs and unpacked data for WasmModuleRootSet events raised by the IRollupAdmin contract.
type IRollupAdminWasmModuleRootSetIterator struct {
	Event *IRollupAdminWasmModuleRootSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminWasmModuleRootSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminWasmModuleRootSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminWasmModuleRootSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminWasmModuleRootSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminWasmModuleRootSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminWasmModuleRootSet represents a WasmModuleRootSet event raised by the IRollupAdmin contract.
type IRollupAdminWasmModuleRootSet struct {
	NewWasmModuleRoot [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterWasmModuleRootSet is a free log retrieval operation binding the contract event 0x7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7.
//
// Solidity: event WasmModuleRootSet(bytes32 newWasmModuleRoot)
func (_IRollupAdmin *IRollupAdminFilterer) FilterWasmModuleRootSet(opts *bind.FilterOpts) (*IRollupAdminWasmModuleRootSetIterator, error) {

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "WasmModuleRootSet")
	if err != nil {
		return nil, err
	}
	return &IRollupAdminWasmModuleRootSetIterator{contract: _IRollupAdmin.contract, event: "WasmModuleRootSet", logs: logs, sub: sub}, nil
}

// WatchWasmModuleRootSet is a free log subscription operation binding the contract event 0x7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7.
//
// Solidity: event WasmModuleRootSet(bytes32 newWasmModuleRoot)
func (_IRollupAdmin *IRollupAdminFilterer) WatchWasmModuleRootSet(opts *bind.WatchOpts, sink chan<- *IRollupAdminWasmModuleRootSet) (event.Subscription, error) {

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "WasmModuleRootSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminWasmModuleRootSet)
				if err := _IRollupAdmin.contract.UnpackLog(event, "WasmModuleRootSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWasmModuleRootSet is a log parse operation binding the contract event 0x7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7.
//
// Solidity: event WasmModuleRootSet(bytes32 newWasmModuleRoot)
func (_IRollupAdmin *IRollupAdminFilterer) ParseWasmModuleRootSet(log types.Log) (*IRollupAdminWasmModuleRootSet, error) {
	event := new(IRollupAdminWasmModuleRootSet)
	if err := _IRollupAdmin.contract.UnpackLog(event, "WasmModuleRootSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreMetaData contains all meta data concerning the IRollupCore contract.
var IRollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAfkBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupCoreMetaData.ABI instead.
var IRollupCoreABI = IRollupCoreMetaData.ABI

// IRollupCore is an auto generated Go binding around an Ethereum contract.
type IRollupCore struct {
	IRollupCoreCaller     // Read-only binding to the contract
	IRollupCoreTransactor // Write-only binding to the contract
	IRollupCoreFilterer   // Log filterer for contract events
}

// IRollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupCoreSession struct {
	Contract     *IRollupCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupCoreCallerSession struct {
	Contract *IRollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupCoreTransactorSession struct {
	Contract     *IRollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupCoreRaw struct {
	Contract *IRollupCore // Generic contract binding to access the raw methods on
}

// IRollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupCoreCallerRaw struct {
	Contract *IRollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupCoreTransactorRaw struct {
	Contract *IRollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupCore creates a new instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCore(address common.Address, backend bind.ContractBackend) (*IRollupCore, error) {
	contract, err := bindIRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupCore{IRollupCoreCaller: IRollupCoreCaller{contract: contract}, IRollupCoreTransactor: IRollupCoreTransactor{contract: contract}, IRollupCoreFilterer: IRollupCoreFilterer{contract: contract}}, nil
}

// NewIRollupCoreCaller creates a new read-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*IRollupCoreCaller, error) {
	contract, err := bindIRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreCaller{contract: contract}, nil
}

// NewIRollupCoreTransactor creates a new write-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupCoreTransactor, error) {
	contract, err := bindIRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreTransactor{contract: contract}, nil
}

// NewIRollupCoreFilterer creates a new log filterer instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupCoreFilterer, error) {
	contract, err := bindIRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreFilterer{contract: contract}, nil
}

// bindIRollupCore binds a generic wrapper to an already deployed contract.
func bindIRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.IRollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupCore *IRollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupCore *IRollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupCore *IRollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_IRollupCore *IRollupCoreCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_IRollupCore *IRollupCoreSession) GetValidators() ([]common.Address, error) {
	return _IRollupCore.Contract.GetValidators(&_IRollupCore.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_IRollupCore *IRollupCoreCallerSession) GetValidators() ([]common.Address, error) {
	return _IRollupCore.Contract.GetValidators(&_IRollupCore.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ValidatorAfkBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorAfkBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ValidatorAfkBlocks() (uint64, error) {
	return _IRollupCore.Contract.ValidatorAfkBlocks(&_IRollupCore.CallOpts)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorAfkBlocks() (uint64, error) {
	return _IRollupCore.Contract.ValidatorAfkBlocks(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_IRollupCore *IRollupCoreCaller) WithdrawalAddress(opts *bind.CallOpts, staker common.Address) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawalAddress", staker)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_IRollupCore *IRollupCoreSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _IRollupCore.Contract.WithdrawalAddress(&_IRollupCore.CallOpts, staker)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _IRollupCore.Contract.WithdrawalAddress(&_IRollupCore.CallOpts, staker)
}

// IRollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmedIterator struct {
	Event *IRollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionConfirmedIterator{contract: _IRollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionConfirmed)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupCoreAssertionConfirmed, error) {
	event := new(IRollupCoreAssertionConfirmed)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupCore contract.
type IRollupCoreAssertionCreatedIterator struct {
	Event *IRollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionCreated represents a AssertionCreated event raised by the IRollupCore contract.
type IRollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionCreatedIterator{contract: _IRollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionCreated)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionCreated(log types.Log) (*IRollupCoreAssertionCreated, error) {
	event := new(IRollupCoreAssertionCreated)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStartedIterator struct {
	Event *IRollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupChallengeStartedIterator{contract: _IRollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupChallengeStarted)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupCoreRollupChallengeStarted, error) {
	event := new(IRollupCoreRollupChallengeStarted)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupCore contract.
type IRollupCoreRollupInitializedIterator struct {
	Event *IRollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupInitialized represents a RollupInitialized event raised by the IRollupCore contract.
type IRollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupInitializedIterator{contract: _IRollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupInitialized)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupInitialized(log types.Log) (*IRollupCoreRollupInitialized, error) {
	event := new(IRollupCoreRollupInitialized)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdatedIterator struct {
	Event *IRollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*IRollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserStakeUpdatedIterator{contract: _IRollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserStakeUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupCoreUserStakeUpdated, error) {
	event := new(IRollupCoreUserStakeUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserWithdrawableFundsUpdatedIterator{contract: _IRollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserWithdrawableFundsUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(IRollupCoreUserWithdrawableFundsUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupEventInboxMetaData contains all meta data concerning the IRollupEventInbox contract.
var IRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupEventInboxMetaData.ABI instead.
var IRollupEventInboxABI = IRollupEventInboxMetaData.ABI

// IRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type IRollupEventInbox struct {
	IRollupEventInboxCaller     // Read-only binding to the contract
	IRollupEventInboxTransactor // Write-only binding to the contract
	IRollupEventInboxFilterer   // Log filterer for contract events
}

// IRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupEventInboxSession struct {
	Contract     *IRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupEventInboxCallerSession struct {
	Contract *IRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupEventInboxTransactorSession struct {
	Contract     *IRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupEventInboxRaw struct {
	Contract *IRollupEventInbox // Generic contract binding to access the raw methods on
}

// IRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupEventInboxCallerRaw struct {
	Contract *IRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactorRaw struct {
	Contract *IRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupEventInbox creates a new instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInbox(address common.Address, backend bind.ContractBackend) (*IRollupEventInbox, error) {
	contract, err := bindIRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInbox{IRollupEventInboxCaller: IRollupEventInboxCaller{contract: contract}, IRollupEventInboxTransactor: IRollupEventInboxTransactor{contract: contract}, IRollupEventInboxFilterer: IRollupEventInboxFilterer{contract: contract}}, nil
}

// NewIRollupEventInboxCaller creates a new read-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*IRollupEventInboxCaller, error) {
	contract, err := bindIRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxCaller{contract: contract}, nil
}

// NewIRollupEventInboxTransactor creates a new write-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupEventInboxTransactor, error) {
	contract, err := bindIRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxTransactor{contract: contract}, nil
}

// NewIRollupEventInboxFilterer creates a new log filterer instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupEventInboxFilterer, error) {
	contract, err := bindIRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxFilterer{contract: contract}, nil
}

// bindIRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindIRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.IRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// IRollupUserMetaData contains all meta data concerning the IRollupUser contract.
var IRollupUserMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedWithdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"newStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAfkBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserMetaData.ABI instead.
var IRollupUserABI = IRollupUserMetaData.ABI

// IRollupUser is an auto generated Go binding around an Ethereum contract.
type IRollupUser struct {
	IRollupUserCaller     // Read-only binding to the contract
	IRollupUserTransactor // Write-only binding to the contract
	IRollupUserFilterer   // Log filterer for contract events
}

// IRollupUserCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserSession struct {
	Contract     *IRollupUser      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserCallerSession struct {
	Contract *IRollupUserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupUserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserTransactorSession struct {
	Contract     *IRollupUserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupUserRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserRaw struct {
	Contract *IRollupUser // Generic contract binding to access the raw methods on
}

// IRollupUserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserCallerRaw struct {
	Contract *IRollupUserCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserTransactorRaw struct {
	Contract *IRollupUserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUser creates a new instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUser(address common.Address, backend bind.ContractBackend) (*IRollupUser, error) {
	contract, err := bindIRollupUser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUser{IRollupUserCaller: IRollupUserCaller{contract: contract}, IRollupUserTransactor: IRollupUserTransactor{contract: contract}, IRollupUserFilterer: IRollupUserFilterer{contract: contract}}, nil
}

// NewIRollupUserCaller creates a new read-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserCaller, error) {
	contract, err := bindIRollupUser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserCaller{contract: contract}, nil
}

// NewIRollupUserTransactor creates a new write-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserTransactor, error) {
	contract, err := bindIRollupUser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserTransactor{contract: contract}, nil
}

// NewIRollupUserFilterer creates a new log filterer instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserFilterer, error) {
	contract, err := bindIRollupUser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserFilterer{contract: contract}, nil
}

// bindIRollupUser binds a generic wrapper to an already deployed contract.
func bindIRollupUser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupUserMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.IRollupUserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupUser *IRollupUserCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupUser *IRollupUserSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupUser *IRollupUserCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_IRollupUser *IRollupUserCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_IRollupUser *IRollupUserSession) GetValidators() ([]common.Address, error) {
	return _IRollupUser.Contract.GetValidators(&_IRollupUser.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_IRollupUser *IRollupUserCallerSession) GetValidators() ([]common.Address, error) {
	return _IRollupUser.Contract.GetValidators(&_IRollupUser.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ValidatorAfkBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorAfkBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ValidatorAfkBlocks() (uint64, error) {
	return _IRollupUser.Contract.ValidatorAfkBlocks(&_IRollupUser.CallOpts)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ValidatorAfkBlocks() (uint64, error) {
	return _IRollupUser.Contract.ValidatorAfkBlocks(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_IRollupUser *IRollupUserCaller) WithdrawalAddress(opts *bind.CallOpts, staker common.Address) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawalAddress", staker)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_IRollupUser *IRollupUserSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _IRollupUser.Contract.WithdrawalAddress(&_IRollupUser.CallOpts, staker)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _IRollupUser.Contract.WithdrawalAddress(&_IRollupUser.CallOpts, staker)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x685f5ecc.
//
// Solidity: function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, expectedWithdrawalAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "addToDeposit", stakerAddress, expectedWithdrawalAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x685f5ecc.
//
// Solidity: function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserSession) AddToDeposit(stakerAddress common.Address, expectedWithdrawalAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, expectedWithdrawalAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x685f5ecc.
//
// Solidity: function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactorSession) AddToDeposit(stakerAddress common.Address, expectedWithdrawalAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, expectedWithdrawalAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// NewStake is a paid mutator transaction binding the contract method 0x68129b14.
//
// Solidity: function newStake(uint256 tokenAmount, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserTransactor) NewStake(opts *bind.TransactOpts, tokenAmount *big.Int, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStake", tokenAmount, withdrawalAddress)
}

// NewStake is a paid mutator transaction binding the contract method 0x68129b14.
//
// Solidity: function newStake(uint256 tokenAmount, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserSession) NewStake(tokenAmount *big.Int, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStake(&_IRollupUser.TransactOpts, tokenAmount, withdrawalAddress)
}

// NewStake is a paid mutator transaction binding the contract method 0x68129b14.
//
// Solidity: function newStake(uint256 tokenAmount, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStake(tokenAmount *big.Int, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStake(&_IRollupUser.TransactOpts, tokenAmount, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewAssertion50f32f68(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion50f32f68(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion50f32f68(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewAssertion7300201c(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewAssertion0", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion7300201c(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion7300201c(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// ReturnOldDepositFor is a paid mutator transaction binding the contract method 0x588c7a16.
//
// Solidity: function returnOldDepositFor(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDepositFor(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDepositFor", stakerAddress)
}

// ReturnOldDepositFor is a paid mutator transaction binding the contract method 0x588c7a16.
//
// Solidity: function returnOldDepositFor(address stakerAddress) returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDepositFor(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDepositFor(&_IRollupUser.TransactOpts, stakerAddress)
}

// ReturnOldDepositFor is a paid mutator transaction binding the contract method 0x588c7a16.
//
// Solidity: function returnOldDepositFor(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDepositFor(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDepositFor(&_IRollupUser.TransactOpts, stakerAddress)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// IRollupUserAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupUser contract.
type IRollupUserAssertionConfirmedIterator struct {
	Event *IRollupUserAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupUser contract.
type IRollupUserAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupUserAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionConfirmedIterator{contract: _IRollupUser.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionConfirmed)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupUserAssertionConfirmed, error) {
	event := new(IRollupUserAssertionConfirmed)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupUser contract.
type IRollupUserAssertionCreatedIterator struct {
	Event *IRollupUserAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionCreated represents a AssertionCreated event raised by the IRollupUser contract.
type IRollupUserAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupUserAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionCreatedIterator{contract: _IRollupUser.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionCreated)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionCreated(log types.Log) (*IRollupUserAssertionCreated, error) {
	event := new(IRollupUserAssertionCreated)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUser contract.
type IRollupUserRollupChallengeStartedIterator struct {
	Event *IRollupUserRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUser contract.
type IRollupUserRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupChallengeStartedIterator{contract: _IRollupUser.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupChallengeStarted)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserRollupChallengeStarted, error) {
	event := new(IRollupUserRollupChallengeStarted)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUser contract.
type IRollupUserRollupInitializedIterator struct {
	Event *IRollupUserRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupInitialized represents a RollupInitialized event raised by the IRollupUser contract.
type IRollupUserRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupInitializedIterator{contract: _IRollupUser.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupInitialized)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserRollupInitialized, error) {
	event := new(IRollupUserRollupInitialized)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUser contract.
type IRollupUserUserStakeUpdatedIterator struct {
	Event *IRollupUserUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUser contract.
type IRollupUserUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*IRollupUserUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserStakeUpdatedIterator{contract: _IRollupUser.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserStakeUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserUserStakeUpdated, error) {
	event := new(IRollupUserUserStakeUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserWithdrawableFundsUpdatedIterator{contract: _IRollupUser.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserWithdrawableFundsUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserUserWithdrawableFundsUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISeqInboxPostUpgradeInitMetaData contains all meta data concerning the ISeqInboxPostUpgradeInit contract.
var ISeqInboxPostUpgradeInitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig_\",\"type\":\"tuple\"}],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ISeqInboxPostUpgradeInitABI is the input ABI used to generate the binding from.
// Deprecated: Use ISeqInboxPostUpgradeInitMetaData.ABI instead.
var ISeqInboxPostUpgradeInitABI = ISeqInboxPostUpgradeInitMetaData.ABI

// ISeqInboxPostUpgradeInit is an auto generated Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInit struct {
	ISeqInboxPostUpgradeInitCaller     // Read-only binding to the contract
	ISeqInboxPostUpgradeInitTransactor // Write-only binding to the contract
	ISeqInboxPostUpgradeInitFilterer   // Log filterer for contract events
}

// ISeqInboxPostUpgradeInitCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISeqInboxPostUpgradeInitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISeqInboxPostUpgradeInitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISeqInboxPostUpgradeInitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISeqInboxPostUpgradeInitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISeqInboxPostUpgradeInitSession struct {
	Contract     *ISeqInboxPostUpgradeInit // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ISeqInboxPostUpgradeInitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISeqInboxPostUpgradeInitCallerSession struct {
	Contract *ISeqInboxPostUpgradeInitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ISeqInboxPostUpgradeInitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISeqInboxPostUpgradeInitTransactorSession struct {
	Contract     *ISeqInboxPostUpgradeInitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ISeqInboxPostUpgradeInitRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitRaw struct {
	Contract *ISeqInboxPostUpgradeInit // Generic contract binding to access the raw methods on
}

// ISeqInboxPostUpgradeInitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitCallerRaw struct {
	Contract *ISeqInboxPostUpgradeInitCaller // Generic read-only contract binding to access the raw methods on
}

// ISeqInboxPostUpgradeInitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitTransactorRaw struct {
	Contract *ISeqInboxPostUpgradeInitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISeqInboxPostUpgradeInit creates a new instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInit(address common.Address, backend bind.ContractBackend) (*ISeqInboxPostUpgradeInit, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInit{ISeqInboxPostUpgradeInitCaller: ISeqInboxPostUpgradeInitCaller{contract: contract}, ISeqInboxPostUpgradeInitTransactor: ISeqInboxPostUpgradeInitTransactor{contract: contract}, ISeqInboxPostUpgradeInitFilterer: ISeqInboxPostUpgradeInitFilterer{contract: contract}}, nil
}

// NewISeqInboxPostUpgradeInitCaller creates a new read-only instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInitCaller(address common.Address, caller bind.ContractCaller) (*ISeqInboxPostUpgradeInitCaller, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInitCaller{contract: contract}, nil
}

// NewISeqInboxPostUpgradeInitTransactor creates a new write-only instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInitTransactor(address common.Address, transactor bind.ContractTransactor) (*ISeqInboxPostUpgradeInitTransactor, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInitTransactor{contract: contract}, nil
}

// NewISeqInboxPostUpgradeInitFilterer creates a new log filterer instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInitFilterer(address common.Address, filterer bind.ContractFilterer) (*ISeqInboxPostUpgradeInitFilterer, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInitFilterer{contract: contract}, nil
}

// bindISeqInboxPostUpgradeInit binds a generic wrapper to an already deployed contract.
func bindISeqInboxPostUpgradeInit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ISeqInboxPostUpgradeInitMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISeqInboxPostUpgradeInit.Contract.ISeqInboxPostUpgradeInitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.ISeqInboxPostUpgradeInitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.ISeqInboxPostUpgradeInitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISeqInboxPostUpgradeInit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.contract.Transact(opts, method, params...)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xa655d937.
//
// Solidity: function postUpgradeInit((uint64,uint64,uint64) bufferConfig_) returns()
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactor) PostUpgradeInit(opts *bind.TransactOpts, bufferConfig_ BufferConfig) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.contract.Transact(opts, "postUpgradeInit", bufferConfig_)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xa655d937.
//
// Solidity: function postUpgradeInit((uint64,uint64,uint64) bufferConfig_) returns()
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitSession) PostUpgradeInit(bufferConfig_ BufferConfig) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.PostUpgradeInit(&_ISeqInboxPostUpgradeInit.TransactOpts, bufferConfig_)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xa655d937.
//
// Solidity: function postUpgradeInit((uint64,uint64,uint64) bufferConfig_) returns()
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactorSession) PostUpgradeInit(bufferConfig_ BufferConfig) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.PostUpgradeInit(&_ISeqInboxPostUpgradeInit.TransactOpts, bufferConfig_)
}

// RollupAdminLogicMetaData contains all meta data concerning the RollupAdminLogic contract.
var RollupAdminLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"AnyTrustFastConfirmerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"AssertionForceConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"AssertionForceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"BaseStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"name\":\"ChallengeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"ConfirmPeriodBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DelayedInboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"name\":\"InboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"LoserStakeEscrowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"MinimumAssertionPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"}],\"name\":\"OldOutboxRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"}],\"name\":\"OutboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSequencerInbox\",\"type\":\"address\"}],\"name\":\"SequencerInboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"StakersForceRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"ValidatorAfkBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"ValidatorWhitelistDisabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\"}],\"name\":\"ValidatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"WasmModuleRootSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumAssertionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validatorAfkBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"espressoTEEVerifier\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"setAnyTrustFastConfirmer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeManager\",\"type\":\"address\"}],\"name\":\"setChallengeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"newInbox\",\"type\":\"address\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newAfkBlocks\",\"type\":\"uint64\"}],\"name\":\"setValidatorAfkBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeSecondaryTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeSecondaryToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAfkBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c03461012f576302881c7960e11b60208201908152600482526001600160401b0391604081018381118282101761011957604052600080928192519060645afa913d15610110573d8181116100fc5760405191601f8201601f19908116603f01168301908111838210176100e8576040528152809160203d92013e5b816100dc575b506080523060a05260405161552590816101358239608051818181610d2e015281816122af015261461a015260a0518181816105000152818161287c0152818161356b0152818161371c01528181613a820152613f950152f35b60209150511438610082565b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b83526041600452602483fd5b5050606061007c565b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163023a96fe1461428f57508063046f7da21461423f57806304972af9146141c757806306ae5851146141325780630d40a0fd14613f6c5780630d561b3714613ed75780631171558514613ea557806312ab3d3b14613e8257806313af403514613d8857806313c56ca714613d695780631b1689e914613d4b5780632abdd23014613d105780632e7acfa614613ce85780632f30cabd14613cb05780633083622814613c80578063353325e014613c365780633659cfe614613a5c5780633be680ea14613a3157806345e38b6414613a1357806347fb24c5146139245780634f1ef286146137055780634f61f8501461364c57806351ed6a301461362557806352d1902d1461355057806353b60c4a146134ea57806355840a58146134c0578063567ca41b146133cc57806356bbc9e6146133975780635bf038331461309d5780635c975abb1461307a5780636177fd181461303757806365f7f80d146130195780636ddd374414612fa357806371ef232c14612f8557806376e7e23b14612f675780637c75c29814612d205780638456cb5914612c8857806384728cd014612c475780638830288414612bc35780638938496014612b7d5780638ee1a12614612b5f578063948d658814612b195780639846129a146128635780639a7b455614611be15780639a8a059214611bc3578063a23c44b114611b0e578063a2b4f1d814611ab2578063a3ffb77214611915578063aa38a6e7146118ee578063b7626e731461188c578063b7ab4db5146117cf578063bc45e0ae146117a8578063ce11e6ab14611781578063ce66d05c146116d2578063dff69787146116aa578063e51019a61461155d578063e531d8c714611523578063e6b3082c146114f8578063e78cea92146114d1578063e8bd49221461145c578063ee35f327146113b2578063ef40a6701461137a578063f065de3f14611353578063f112cea3146112d1578063f5296a9a146104b2578063facd743b14610475578063fb0e722b1461044e578063fc8ffa03146103e15763ff204f3b1461031857600080fd5b346103de5760206003193601126103de57600435816001600160a01b038083168093036103cf57826001600160a01b0319606c541617606c55606b5416803b156103cf578180916044604051809481936319dc7ae560e31b8352886004840152600160248401525af180156103d3576103bb575b507f0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7602083604051908152a180f35b6103c4906142fc565b6103cf57813861038c565b5080fd5b6040513d84823e3d90fd5b80fd5b50346103de5760206003193601126103de577f0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd60206001600160a01b036104266142b4565b16610432811515614cbf565b806001600160a01b0319606f541617606f55604051908152a180f35b50346103de57806003193601126103de5760206001600160a01b03606a5416604051908152f35b50346103de5760206003193601126103de576001600160a01b036104976142b4565b16600052607360205260206040600020541515604051908152f35b50346103de57600319610140813601126103cf5767ffffffffffffffff600435116103cf5761040090600435360301126103de576101206023193601126103de5761055d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661052c813014156144d6565b6001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614614547565b805460ff8160081c1615908180926112c4575b80156112ad575b156112435781600160ff198316178455611215575b5043607a556001600160a01b036105a1614c25565b166001600160a01b0319606b541617606b55816001600160a01b036105c4614c25565b166001600160a01b036105d5614c3b565b16813b15610f005782916044839260405194859384926347fb24c560e01b84526004840152600160248401525af180156103d357611201575b506001600160a01b0361061f614c25565b166001600160a01b03610630614c51565b16813b15610f005782916024839260405194859384927f4f61f85000000000000000000000000000000000000000000000000000000000845260048401525af180156103d3576111ed575b50506001600160a01b0361068d614c3b565b166001600160a01b0319606a541617606a556001600160a01b036106af614c67565b166001600160a01b0319606c541617606c55816001600160a01b036106d2614c25565b166001600160a01b036106e3614c67565b16813b15610f005782916044839260405194859384926319dc7ae560e31b84526004840152600160248401525af180156103d3576111d9575b50506001600160a01b0361072e614c7d565b166001600160a01b0319606d541617606d556001600160a01b03606b541660206001600160a01b0361075e614c7d565b166024604051809481937fae60bd1300000000000000000000000000000000000000000000000000000000835260048301525afa90811561102057839161119e575b501561102b575b600460206001600160a01b036107bb614c51565b16604051928380927f7fa3a40e0000000000000000000000000000000000000000000000000000000082525afa908115611020578391610fee575b5015610f04575b610124356001600160a01b038116809103610e67576001600160a01b0319606e541617606e5560c4356001600160a01b0381168103610f00578260046069549267ffffffffffffffff61085283358401614caa565b16906066549060c4843501356065556044843501356067556064843501356068556101048435013560715561088b610124853501614caa565b60401b91837fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffffffffffffffff00000000000000008516921617176066556108d9610364853501614caa565b60a01b957bffffffffffffffff00000000000000000000000000000000000000008716907fffffffff000000000000000000000000000000000000000000000000000000006001600160a01b038416911617176069556001600160a01b0361095960a48635016109548361094c836147e6565b161515614cbf565b6147e6565b166001600160a01b0319606f541617606f556001600160a01b0361098060248635016147e6565b166001600160a01b031960705416176070556109a06103248535016147e6565b7fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff00607b549260081b16911617607b55610a046109ff6109fa36610244883501614b4c565b614ed5565b614f0a565b9560206001600160a01b03606b5416604051968780927e84120c0000000000000000000000000000000000000000000000000000000082525afa938415610ef55787958795610eba575b508461030460043501358114610e7f575b50928492610abc92886001600160a01b03610320978267ffffffffffffffff7f901c3aee23cf4478825462caaab375c606ab83516060388344f06503407536309b1696161793169116176044600435013560646004350135614f58565b610ac4614844565b506001610acf614844565b91610c0187896040860167ffffffffffffffff43168152610b8667ffffffffffffffff6020604060608b01958a875260a08c01998a5260808c01978b8952610b2660ff835460081c16610b2181615368565b615368565b60ff19603354166033556002895281526075835220998281511667ffffffffffffffff198c5416178b5501511688906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b51907fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff77ffffffffffffffff0000000000000000000000000000000078ff00000000000000000000000000000000000000000000000089549351151560c01b169360801b1691161717855551610bfb816144b6565b84614e81565b519101558360745560405190610c16826142ca565b604051610c22816142ca565b868152866020820152610c33614876565b604082015282526020820190610c47614d2d565b82526040830190610c56614d2d565b8252610c683661024460043501614b4c565b825260685460675491610d066001600160a01b036069541694610cfa67ffffffffffffffff606654169767ffffffffffffffff6080604080519c518d815190528d60208083015191015201518c604082519101528c606060208301519101528c826001600160a01b036040840151169101528c60a08460608401511691015201511660c08b01525160e08a0190614d53565b516101a0880190614d53565b896102608701526102808601526102a08501526102c08401526102e0830152610300820152a37f0000000000000000000000000000000000000000000000000000000000000000610de9575b507ffc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d7524646040805160646004350135815260c460043501356020820152a1610d955780f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff81541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b604051907fa3b1b31d00000000000000000000000000000000000000000000000000000000825260208260048160645afa918215610e74578492610e3b575b508352607c602052604083205538610d52565b9091506020813d602011610e6c575b81610e576020938361439c565b81010312610e6757519038610e28565b600080fd5b3d9150610e4a565b6040513d86823e3d90fd5b9294509550919350600181018111610ea65787948694600190920193919290610320610a5f565b602488634e487b7160e01b81526011600452fd5b9550935094506020843d602011610eed575b81610ed96020938361439c565b81010312610e675787948694519338610a4e565b3d9150610ecc565b6040513d88823e3d90fd5b8280fd5b6001600160a01b03610f14614c51565b16803b15610f00578290604051907f9902050100000000000000000000000000000000000000000000000000000000825282600483015260e060248301528260e483015260016044830152826064830152826084830152600160a483015261010060c48301526060518061010484015260005b818110610fd6575083918383819382601f19601f610124936000858286010152011681010301925af180156103d357610fc2575b50506107fd565b610fcb906142fc565b6103cf578138610fbb565b60808101518185016101240152869450602001610f87565b90506020813d602011611018575b816110096020938361439c565b81010312610e675751386107f6565b3d9150610ffc565b6040513d85823e3d90fd5b816001600160a01b0361103c614c25565b166001600160a01b0361104d614c7d565b16813b15610f005782916044839260405194859384926347fb24c560e01b84526004840152600160248401525af180156103d35761118a575b506001600160a01b03611097614c7d565b1660e460043501357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd600435360301811215610f00576004350160048101359067ffffffffffffffff82116111865760240190803603821361118657823b1561118657601f92818560648195601f19604051988997889687947fcf8d56d600000000000000000000000000000000000000000000000000000000865260c460043501356004870152604060248701528160448701528686013785858286010152011681010301925af180156103d357611172575b50506107a7565b61117b906142fc565b6103cf57813861116b565b8380fd5b611193906142fc565b6103cf578138611086565b90506020813d6020116111d1575b816111b96020938361439c565b81010312610f0057518015158103610f0057386107a0565b3d91506111ac565b6111e2906142fc565b6103cf57813861071c565b6111f6906142fc565b6103cf57813861067b565b61120a906142fc565b6103cf57813861060e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011782553861058c565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156105775750600160ff821614610577565b50600160ff821610610570565b50346103de5760206003193601126103de577f43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33602061130e614459565b6066546fffffffffffffffff0000000000000000196fffffffffffffffff00000000000000008360401b1691161760665567ffffffffffffffff60405191168152a180f35b50346103de57806003193601126103de5760206001600160a01b03606f5416604051908152f35b50346103de5760206003193601126103de5760406020916001600160a01b036113a16142b4565b168152607783522054604051908152f35b50346103de57806003193601126103de5760046001600160a01b03602081606b5416604051938480927fee35f3270000000000000000000000000000000000000000000000000000000082525afa91821561102057839261141b575b6020838360405191168152f35b9091506020813d602011611454575b816114376020938361439c565b81010312610f0057518181168103610f005760209250903861140e565b3d915061142a565b50346103de5760206003193601126103de5760a09060406001600160a01b0391826114856142b4565b168152607760205220908154916002600182015491015490604051938452602084015267ffffffffffffffff8116604084015260ff8160401c161515606084015260481c166080820152f35b50346103de57806003193601126103de5760206001600160a01b03606b5416604051908152f35b50346103de57806003193601126103de57602067ffffffffffffffff60665460401c16604051908152f35b50346103de5760206003193601126103de57602060ff611544600435614dd6565b5460c81c16611552816144b6565b600160405191148152f35b50346103de576101206003193601126103de57602319360160c081126103cf5760806040519161158c836142ca565b12610e675760405161159d81614348565b3660431215610e67576040516115b281614348565b606481368211610e67576024905b82821061169a5750505081523660831215610e67576040516115e181614348565b60a481368211610e67576064905b828210611682575050506020820152815260a435906003821015610e675761163391602082015260c435604082015261162b6101043591614ed5565b60e435614f35565b6004350361163e5780f35b606460405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f415353455254494f4e5f48415348000000000000000000006044820152fd5b6020809161168f84614470565b8152019101906115ef565b81358152602091820191016115c0565b50346103de57806003193601126103de57602067ffffffffffffffff60765416604051908152f35b50346103de5760206003193601126103de5767ffffffffffffffff6116f5614459565b16801561173d576020817fa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b76979267ffffffffffffffff196066541617606655604051908152a180f35b606460405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f434f4e4649524d5f504552494f44000000000000000000006044820152fd5b50346103de57806003193601126103de5760206001600160a01b03606c5416604051908152f35b50346103de57806003193601126103de5760206001600160a01b03606e5416604051908152f35b50346103de57806003193601126103de5760405180916072549081835260208093018092607283527fdffbd64cc7c1a7eb27984335d9416d51137a03d3fabec7141025c62663253fe190835b818110611878575050508461183191038561439c565b60405193838594850191818652518092526040850193925b82811061185857505050500390f35b83516001600160a01b031685528695509381019392810192600101611849565b82548452928601926001928301920161181b565b50346103de5760206003193601126103de577fe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a459874260206001600160a01b036118d16142b4565b16806001600160a01b03196069541617606955604051908152a180f35b50346103de57806003193601126103de5760206001600160a01b03606d5416604051908152f35b50346103de5760406003193601126103de5767ffffffffffffffff906004358281116103cf57611949903690600401614485565b9092602435908111610f0057611963903690600401614485565b909361197083151561478b565b818303611a6e57835b838110611a00575061199790604051936040855260408501916147fa565b906020809284810382860152828152019491845b8281106119dc57857f0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c086890387a180f35b90919295863590811515809203610e675790815282019582019291906001016119ab565b611a0b8184886147d6565b358015158103611a6a576001919015611a4557611a3d6001600160a01b03611a376109548489886147d6565b166152fd565b505b01611979565b611a646001600160a01b03611a5e6109548489886147d6565b16615210565b50611a3f565b8580fd5b606460405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f4c454e47544800000000000000000000000000000000000000006044820152fd5b50346103de5760206003193601126103de57600435801515809103610e675760207f016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e99160ff19607b541660ff821617607b55604051908152a180f35b50346103de5760206003193601126103de5760a0906040611b2d6142b4565b91611b36614876565b506001600160a01b0380931681526077602052209060405191611b5883614310565b80549283815260026001830154926020830193845201549167ffffffffffffffff9060408301908285168252856080606086019560ff8860401c1615158752019560481c16855260405196875251602087015251166040850152511515606084015251166080820152f35b50346103de57806003193601126103de576020606554604051908152f35b50346103de576102a06003193601126103de576102606023193601126103de57611c09614e30565b6001611c16600435614dd6565b01546001600160a01b0360a4351660a43503610e675767ffffffffffffffff60c4351660c43503610e675767ffffffffffffffff60e4351660e43503610e6757611c6d60e43560c43560a435608435606435614f58565b0361281f576003610244351015806103cf57611c8b610244356144b6565b600161024435148015612803575b156127bf5761010319360160c08112610e6757608060405191611cbb836142ca565b12610e6757604051611ccc81614348565b366101231215610e6757604051611ce281614348565b803661014411610e6757610104905b61014482106127af5750508152366101631215610e6757604051611d1481614348565b803661018411610e6757610144905b6101848210612797575050602082015281526003610184351015610e67576101843560208201526101a4356040820152611d6e60043591611d6660443591614ed5565b602435614f35565b0361275357611d7f610184356144b6565b6001610184350361270f57611d95600435614dd6565b9082611d9f615133565b126126cb57611dbe67ffffffffffffffff611db8614c93565b166151be565b9083821361268757610f0057611dd6610244356144b6565b826002610244351415918261267d575b505061262b575b6001600160a01b03606b54166040517e84120c000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610e745784916125f9575b5083611e40826151be565b136125b5578067ffffffffffffffff611e57614c93565b16116125715760806101c319360112610e6757604051611e7681614348565b366101e31215610e6757604051611e8c81614348565b803661020411610e67576101c4905b61020482106125615750508152366102231215610e675760405190611ebf82614348565b813661024411610e6757610204905b61024482106125495750506020018190525167ffffffffffffffff169080820361254357600181018091116124eb57905b80156124ff57806000198101116124eb57600019602460209260405195869384927f16bf55790000000000000000000000000000000000000000000000000000000084520160048301525afa918215610e745784926124b7575b5060c06101c319360112610e6757611fa482611f9c604051611f7a816142ca565b611f8336614948565b8152610244356020820152610264356040820152614ed5565b600435614f35565b9261028435841480156124ac575b156124685760ff611fc285614dd6565b5460c81c16611fd0816144b6565b6124245780549067ffffffffffffffff821615916120186068546067546001600160a01b036069541667ffffffffffffffff606654169167ffffffffffffffff891693614f58565b90612021614844565b5061202a614844565b9367ffffffffffffffff43169283604087015281606087015260a0860152600160808601526000146123d3575067ffffffffffffffff198254161790555b8385526075602052600160a0604087209267ffffffffffffffff81511667ffffffffffffffff198554161784556120da67ffffffffffffffff60208301511685906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b604081015184547fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff77ffffffffffffffff0000000000000000000000000000000078ff0000000000000000000000000000000000000000000000006060860151151560c01b169360801b16911617178455612162608082015161215c816144b6565b85614e81565b01519101556068546067546001600160a01b03606954169167ffffffffffffffff60665416936040519560243587526044356020880152606435604088015260843560608801526001600160a01b0360a43516608088015267ffffffffffffffff60c4351660a088015267ffffffffffffffff60e4351660c0880152604061010460e0890137610144600061012089015b600282106123ac5750505061220a610184356144b6565b610184356101608801526101a43561018088015260406101c46101a089013761020460006101e089015b600282106123855750505061224b610244356144b6565b61024435610220880152610264356102408801526102608701526102808601526102a08501526102c08401526102e0830152610300820152817f901c3aee23cf4478825462caaab375c606ab83516060388344f065034075363061032060043593a37f00000000000000000000000000000000000000000000000000000000000000006122ff575b50610284357fe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e8280a280f35b604051907fa3b1b31d00000000000000000000000000000000000000000000000000000000825260208260048160645afa918215611020578392612351575b508252607c6020526040822055386122d3565b9091506020813d60201161237d575b8161236d6020938361439c565b81010312610e675751903861233e565b3d9150612360565b60208060019267ffffffffffffffff61239d87614470565b16815201930191019091612234565b60208060019267ffffffffffffffff6123c487614470565b168152019301910190916121f3565b60401c67ffffffffffffffff16156123ed575b5050612068565b81546fffffffffffffffff0000000000000000191660409190911b6fffffffffffffffff00000000000000001617905538806123e6565b606460405162461bcd60e51b815260206004820152600e60248201527f415353455254494f4e5f5345454e0000000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601960248201527f554e45585045435445445f415353455254494f4e5f48415348000000000000006044820152fd5b506102843515611fb2565b9091506020813d6020116124e3575b816124d36020938361439c565b81010312610e6757519038611f59565b3d91506124c6565b602485634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601160248201527f454d5054595f494e424f585f434f554e540000000000000000000000000000006044820152fd5b90611eff565b6020809161255684614470565b815201910190611ece565b8135815260209182019101611e9b565b606460405162461bcd60e51b815260206004820152601360248201527f494e424f585f4e4f545f504f50554c41544544000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152600e60248201527f494e424f585f504153545f454e440000000000000000000000000000000000006044820152fd5b90506020813d602011612623575b816126146020938361439c565b81010312610e67575138611e35565b3d9150612607565b81612634615133565b13611ded57606460405162461bcd60e51b815260206004820152601360248201527f4f564552464c4f575f5354414e445354494c4c000000000000000000000000006044820152fd5b1290508238611de6565b606460405162461bcd60e51b815260206004820152600d60248201527f494e424f585f544f4f5f464152000000000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152600f60248201527f494e424f585f4241434b574152445300000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152600f60248201527f4241445f505245565f53544154555300000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4245464f52455f53544154450000000000000000000000006044820152fd5b602080916127a484614470565b815201910190611d23565b8135815260209182019101611cf1565b606460405162461bcd60e51b815260206004820152601060248201527f4241445f41465445525f535441545553000000000000000000000000000000006044820152fd5b50506000612813610244356144b6565b60026102443514611c99565b606460405162461bcd60e51b815260206004820152601460248201527f434f4e4649475f484153485f4d49534d415443480000000000000000000000006044820152fd5b5061286d366143db565b906001600160a01b036128d2817f0000000000000000000000000000000000000000000000000000000000000000166128a8813014156144d6565b827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614614547565b7f49bd798cd84788856140a4cd5030756b4d08a9e4d55db725ec195f232d262a895460ff161561290a57506129079150614fd9565b80f35b811691604051926352d1902d60e01b84526020938481600481855afa60009181612aea575b5061299e576084856040519062461bcd60e51b82526004820152603860248201527f45524331393637557067726164653a206e6577207365636f6e6461727920696d60448201527f706c656d656e746174696f6e206973206e6f74205555505300000000000000006064820152fd5b9293927fd4e24318bcdbdb73ddd0f13d2a12842cdc303bda4cc90fdac3a330258d9aab9301612a80576129d084614fd9565b7ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134600080a2805115801590612a78575b612a0b575b50505080f35b612a6f927f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60405193612a3d856142ca565b602785528401527f206661696c65640000000000000000000000000000000000000000000000000060408401526153d9565b50388080612a05565b506001612a00565b6084836040519062461bcd60e51b82526004820152603360248201527f45524331393637557067726164653a20756e737570706f72746564207365636f60448201527f6e646172792070726f786961626c6555554944000000000000000000000000006064820152fd5b9091508581813d8311612b12575b612b02818361439c565b81010312610e675751903861292f565b503d612af8565b50346103de5760206003193601126103de577f238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873602060043580607155604051908152a180f35b50346103de57806003193601126103de576020606854604051908152f35b50346103de5760206003193601126103de577f7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7602060043580606855604051908152a180f35b50346103de5760206003193601126103de57612bdd614844565b5060c0612bf3612bee600435614dd6565b6145b8565b60a06040519167ffffffffffffffff80825116845280602083015116602085015260408201511660408401526060810151151560608401526080810151612c39816144b6565b6080840152015160a0820152f35b50346103de5760206003193601126103de57602090600260406001600160a01b039283612c726142b4565b1681526077855220015460481c16604051908152f35b50346103de57806003193601126103de5760335460ff8116612cdc5760ff1960019116176033557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b50346103de576020806003193601126103cf5767ffffffffffffffff9060043582811161118657612d55903690600401614485565b92612d5e614e30565b612d6984151561478b565b845b848110612db05760405184815286907f53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d73529080612daa8189018a896147fa565b0390a180f35b6001600160a01b0380612dc76109548489886147d6565b1680885260779182875260029160ff8360408c20015460401c1615612f23578952828752600160408a20015485612e02607454831492614dd6565b541615158115612f1b575b5015612ed757917fd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8604088938b7fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae283888a998f6109548f9d612e719260019f6147d6565b169788855289528184209485015460481c169783899486549655848152607891828152838220549284612ea48986614d0a565b938492898252845220556079612ebb888254614d0a565b90558351928352820152a281519081528b8a820152a301612d6b565b6064876040519062461bcd60e51b82526004820152600c60248201527f5354414b455f41435449564500000000000000000000000000000000000000006044820152fd5b905038612e0d565b6064886040519062461bcd60e51b82526004820152600a60248201527f4e4f545f5354414b4544000000000000000000000000000000000000000000006044820152fd5b50346103de57806003193601126103de576020606754604051908152f35b50346103de57806003193601126103de576020607954604051908152f35b50346103de5760206003193601126103de57612fbd614459565b607654811015613003576001600160a01b0360209160766000527fb5732705f5241370a28908c2fe1303cb223f03b90d857fd0573f003f79fefed4015416604051908152f35b634e487b7160e01b600052603260045260246000fd5b50346103de57806003193601126103de576020607454604051908152f35b50346103de5760206003193601126103de5760ff600260406020936001600160a01b036130626142b4565b1681526077855220015460401c166040519015158152f35b50346103de57806003193601126103de57602060ff603354166040519015158152f35b50346103de576101206003193601126103de57600435604319360160c08112610f00576130c8614e30565b6130d182614dd6565b90600160ff835460c81c166130e5816144b6565b03613353576080604051916130f9836142ca565b12610e675760405161310a81614348565b3660631215610e675760405161311f81614348565b608481368211610e67576044905b8282106133435750505081523660a31215610e675760405161314e81614348565b60c481368211610e67576084905b82821061332b575050506020820152815260c435906003821015610e675761319891602082015260e4356040820152611d666101043591614ed5565b82036132e75782906131a9366148a1565b51519060206131b7366148a1565b510151906001600160a01b03606c5416803b156132d6578480916044604051809881937fa04cee600000000000000000000000000000000000000000000000000000000083528860048401528960248401525af19485156132da5786956132b9575b5050916040917ffc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c93856074557902000000000000000000000000000000000000000000000000007fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff82541617905582519182526020820152a27f0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea49388280a280f35b6132c79192939495506142fc565b6132d657908392918538613219565b8480fd5b50604051903d90823e3d90fd5b606460405162461bcd60e51b815260206004820152600c60248201527f434f4e4649524d5f4441544100000000000000000000000000000000000000006044820152fd5b6020809161333884614470565b81520191019061315c565b813581526020918201910161312d565b606460405162461bcd60e51b815260206004820152600b60248201527f4e4f545f50454e44494e470000000000000000000000000000000000000000006044820152fd5b50346103de5760206003193601126103de57602067ffffffffffffffff6133bf600435614dd6565b5460401c16604051908152f35b50346103de5760206003193601126103de576133e66142b4565b6001600160a01b038080606c5416921691821461347c578290606b5416803b156103cf578180916044604051809481936319dc7ae560e31b83528860048401528160248401525af180156103d357613468575b507ffe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25602083604051908152a180f35b613471906142fc565b6103cf578138613439565b606460405162461bcd60e51b815260206004820152600a60248201527f4355525f4f5554424f58000000000000000000000000000000000000000000006044820152fd5b50346103de57806003193601126103de5760206001600160a01b03607b5460081c16604051908152f35b50346103de5760206003193601126103de576004356001600160a01b0381168091036103cf576020817f9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345926001600160a01b0319606a541617606a55604051908152a180f35b50346103de57806003193601126103de576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036135bb5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b50346103de57806003193601126103de5760206001600160a01b0360705416604051908152f35b50346103de5760206003193601126103de576136666142b4565b816001600160a01b0380606b541692833b15610f005782916024839260405194859384927f4f61f85000000000000000000000000000000000000000000000000000000000845216978860048401525af180156103d3576136f1575b507f82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34602083604051908152a180f35b6136fa906142fc565b6103cf5781386136c2565b5061370f366143db565b906001600160a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692613749843014156144d6565b6137787f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614614547565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156137ae5750506129079150615086565b8216604051936352d1902d60e01b85526020948581600481865afa600091816138f5575b50613841576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9493940361388b5761385284615086565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590612a7857612a0b5750505080f35b6084836040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d831161391d575b61390d818361439c565b81010312610e67575190386137d2565b503d613903565b50346103de5760406003193601126103de5761393e6142b4565b9060243580151581036103cf576001600160a01b03606b5416803b15610f00576040516347fb24c560e01b81526001600160a01b038516600482015282151560248201529083908290604490829084905af18015611020576139e2575b50604080516001600160a01b039094168452901515602084015290917fce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef9181908101612daa565b91613a0d7fce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef936142fc565b9161399b565b50346103de57806003193601126103de576020607154604051908152f35b50346103de57806003193601126103de57602067ffffffffffffffff60695460a01c16604051908152f35b50346103de576020806003193601126103cf57613a776142b4565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016613aae813014156144d6565b613add7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614614547565b60405191613aea83614364565b8583527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613b24575050506129079150615086565b8316906040516352d1902d60e01b81528581600481865afa879181613c03575b50613bb3576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9493940361388b57613bc484615086565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a2805115801590613bfc57612a0b5750505080f35b5083612a00565b9091508681813d8311613c2f575b613c1b818361439c565b81010312613c2b57519038613b44565b8780fd5b503d613c11565b50346103de57806003193601126103de57613c786109ff602092613c5861471b565b9060405191613c66836142ca565b82526001858301526040820152614ed5565b604051908152f35b50346103de5760206003193601126103de57602060ff613ca1600435614dd6565b5460c01c166040519015158152f35b50346103de5760206003193601126103de5760406020916001600160a01b03613cd76142b4565b168152607883522054604051908152f35b50346103de57806003193601126103de57602067ffffffffffffffff60665416604051908152f35b50346103de5760206003193601126103de57600160406020926001600160a01b03613d396142b4565b16815260778452200154604051908152f35b50346103de57806003193601126103de576020607a54604051908152f35b50346103de5760206003193601126103de576020613c78600435614618565b50346103de5760206003193601126103de57613da26142b4565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61039081547f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60406001600160a01b0381519481851686521693846020820152a18115613e18576001600160a01b03191617905580f35b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103de57806003193601126103de57602060ff607b54166040519015158152f35b50346103de5760206003193601126103de57602067ffffffffffffffff613ecd600435614dd6565b5416604051908152f35b50346103de5760206003193601126103de577fd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c6020613f146142b4565b607b547fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff008360081b16911617607b556001600160a01b0360405191168152a180f35b50346103de576020806003193601126103cf57613f876142b4565b6001600160a01b03613fc1817f0000000000000000000000000000000000000000000000000000000000000000166128a8813014156144d6565b60405190613fce82614364565b8482527f49bd798cd84788856140a4cd5030756b4d08a9e4d55db725ec195f232d262a895460ff16156140075750506129079150614fd9565b82166040516352d1902d60e01b81528481600481855afa8691816140ff575b50614095576084856040519062461bcd60e51b82526004820152603860248201527f45524331393637557067726164653a206e6577207365636f6e6461727920696d60448201527f706c656d656e746174696f6e206973206e6f74205555505300000000000000006064820152fd5b9293927fd4e24318bcdbdb73ddd0f13d2a12842cdc303bda4cc90fdac3a330258d9aab9301612a80576140c784614fd9565b7ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b81348580a2805115801590613bfc57612a0b5750505080f35b9091508581813d831161412b575b614117818361439c565b8101031261412757519038614026565b8680fd5b503d61410d565b50346103de5760206003193601126103de57600435606754811115614183576020817f54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b92606755604051908152a180f35b606460405162461bcd60e51b815260206004820152601c60248201527f424153455f5354414b455f4d5553545f42455f494e43524541534544000000006044820152fd5b50346103de5760c06003193601126103de5760a06023193601126103de5760016141f2600435614dd6565b01546064356001600160a01b0381168103610f005767ffffffffffffffff60843581811681036132d65760a43591821682036132d65761423792604435602435614f58565b0361281f5780f35b50346103de57806003193601126103de57614258614e30565b60ff19603354166033557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b9050346103cf57816003193601126103cf576020906001600160a01b03606954168152f35b600435906001600160a01b0382168203610e6757565b6060810190811067ffffffffffffffff8211176142e657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116142e657604052565b60a0810190811067ffffffffffffffff8211176142e657604052565b60c0810190811067ffffffffffffffff8211176142e657604052565b6040810190811067ffffffffffffffff8211176142e657604052565b6020810190811067ffffffffffffffff8211176142e657604052565b6080810190811067ffffffffffffffff8211176142e657604052565b90601f601f19910116810190811067ffffffffffffffff8211176142e657604052565b67ffffffffffffffff81116142e657601f01601f191660200190565b906040600319830112610e67576004356001600160a01b0381168103610e67579160243567ffffffffffffffff8111610e675781602382011215610e6757806004013590614428826143bf565b92614436604051948561439c565b82845260248383010111610e675781600092602460209301838601378301015290565b6004359067ffffffffffffffff82168203610e6757565b359067ffffffffffffffff82168203610e6757565b9181601f84011215610e675782359167ffffffffffffffff8311610e67576020808501948460051b010111610e6757565b600311156144c057565b634e487b7160e01b600052602160045260246000fd5b156144dd57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561454e57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b906040516145c58161432c565b60a06001829460ff815467ffffffffffffffff8082168752808260401c1660208801528160801c166040870152818160c01c161515606087015260c81c1661460c816144b6565b60808501520154910152565b7f00000000000000000000000000000000000000000000000000000000000000001561469957600052607c60205260406000205480156146555790565b606460405162461bcd60e51b815260206004820152600c60248201527f4e4f5f415353455254494f4e00000000000000000000000000000000000000006044820152fd5b6146a290614dd6565b60806146ad826145b8565b01516146b8816144b6565b6146c1816144b6565b156146d7575460801c67ffffffffffffffff1690565b606460405162461bcd60e51b815260206004820152601360248201527f415353455254494f4e5f4e4f545f4558495354000000000000000000000000006044820152fd5b6040519061472882614348565b8160405161473581614348565b6040368237815260206040519161474b83614348565b60403684370152565b6072548110156130035760726000527fdffbd64cc7c1a7eb27984335d9416d51137a03d3fabec7141025c62663253fe10190600090565b1561479257565b606460405162461bcd60e51b815260206004820152600b60248201527f454d5054595f41525241590000000000000000000000000000000000000000006044820152fd5b91908110156130035760051b0190565b356001600160a01b0381168103610e675790565b9190808252602080920192916000805b83821061481957505050505090565b909192939485356001600160a01b038116809103610f0057815283019483019392916001019061480a565b604051906148518261432c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6040519061488382614310565b60006080838281528260208201528260408201528260608201520152565b906080604319830112610e6757604051916148bb83614348565b828160631215610e67576040516148d181614348565b608481848211610e67576044905b8282106149385750505081528160a31215610e67576040519161490183614348565b8260c49160c411610e67576084905b8282106149205750505060200152565b6020809161492d84614470565b815201910190614910565b81358152602091820191016148df565b9060806101c319830112610e67576040519161496383614348565b82816101e31215610e67576040519161497b83614348565b8261020493828511610e67576101c4905b8582106149e45750508252806102231215610e6757604051926149ae84614348565b8390610244928311610e6757905b8282106149cc5750505060200152565b602080916149d984614470565b8152019101906149bc565b813581526020918201910161498c565b90608061010319830112610e675760405191614a0f83614348565b82816101231215610e675760405191614a2783614348565b8261014493828511610e6757610104905b858210614a905750508252806101631215610e675760405192614a5a84614348565b8390610184928311610e6757905b828210614a785750505060200152565b60208091614a8584614470565b815201910190614a68565b8135815260209182019101614a38565b9060806101c319830112610e675760405191614abb83614348565b82816101e31215610e675760405191614ad383614348565b8261020493828511610e67576101c4905b858210614b3c5750508252806102231215610e675760405192614b0684614348565b8390610244928311610e6757905b828210614b245750505060200152565b60208091614b3184614470565b815201910190614b14565b8135815260209182019101614ae4565b91908281039260c08412610e6757604090815192614b69846142ca565b6080849612610e67578251614b7d81614348565b81601f84011215610e67578351614b9381614348565b8085850191848311610e675785905b838210614c15575050825282605f85011215610e6757845190614bc482614348565b819060808601948511610e6757905b848210614bfd5750506020820152845235906003821015610e675760a09160208501520135910152565b60208091614c0a84614470565b815201910190614bd3565b8135815260209182019101614ba2565b6024356001600160a01b0381168103610e675790565b6064356001600160a01b0381168103610e675790565b6044356001600160a01b0381168103610e675790565b6084356001600160a01b0381168103610e675790565b60a4356001600160a01b0381168103610e675790565b60e43567ffffffffffffffff81168103610e675790565b3567ffffffffffffffff81168103610e675790565b15614cc657565b606460405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f455343524f575f30000000000000000000000000000000006044820152fd5b91908201809211614d1757565b634e487b7160e01b600052601160045260246000fd5b60405190614d3a826142ca565b6000604083614d4761471b565b81528260208201520152565b80518051600090845b60028310614dbf57505050602090810151906000604085015b60028210614da05750505050604081602060a0930151614d94816144b6565b60808501520151910152565b828060019267ffffffffffffffff875116815201940191019092614d75565b600190825181526020809101920192019190614d5c565b8015614dec576000526075602052604060002090565b606460405162461bcd60e51b815260206004820152601b60248201527f415353455254494f4e5f49445f43414e4e4f545f42455f5a45524f00000000006044820152fd5b60ff6033541615614e3d57565b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b90614e8b816144b6565b7fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff79ff0000000000000000000000000000000000000000000000000083549260c81b169116179055565b604051614ee6602082018093614d53565b60c0815260e0810181811067ffffffffffffffff8211176142e65760405251902090565b60405160208101916000835260408201526000606082015260608152614f2f81614380565b51902090565b9160405191602083019384526040830152606082015260608152614f2f81614380565b939092917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000906040519460208601968752604086015260601b1660608401527fffffffffffffffff000000000000000000000000000000000000000000000000809260c01b16607484015260c01b16607c82015260648152614f2f81614310565b803b1561501c576001600160a01b037f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d91166001600160a01b0319825416179055565b608460405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e74726163740000000000000000006064820152fd5b803b156150c9576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b602067ffffffffffffffff808261514936614948565b015151168183615158366149f4565b01515116908181101561516f575050505060001990565b111561517c575050600190565b80828061518836614aa0565b01510151169180615198366149f4565b015101511690818110156151ae57505060001990565b11156151b957600190565b600090565b67ffffffffffffffff908160206151d436614aa0565b01515116818110156151e95750505060001990565b11156151f55750600190565b60208061520136614aa0565b0151015116156151b957600190565b60008181526073602052604081205490919080156152f857600019908181018181116124eb57607254908382019182116152e457808203615299575b50505060725480156152855781019061526482614754565b909182549160031b1b19169055607255815260736020526040812055600190565b602484634e487b7160e01b81526031600452fd5b6152ce6152a86152b793614754565b90549060031b1c928392614754565b81939154906000199060031b92831b921b19161790565b905584526073602052604084205538808061524c565b602486634e487b7160e01b81526011600452fd5b505090565b600081815260736020526040812054615363576072546801000000000000000081101561534f57908261533b6152b784600160409601607255614754565b905560725492815260736020522055600190565b602482634e487b7160e01b81526041600452fd5b905090565b1561536f57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b6000806154189493602081519101845af43d1561541b573d916153fb836143bf565b92615409604051948561439c565b83523d6000602085013e61541f565b90565b6060915b919290156154805750815115615433575090565b3b1561543c5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156154935750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b8481106154d857505050601f19601f836000604480968601015201168101030190fd5b8181018301518682016044015285935082016154b556fea26469706673582212201fdbb7ca574bc5da65ef6af630a79c67f19751f8f09854e0fad8a9b0b72e8fa064736f6c63430008190033",
}

// RollupAdminLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupAdminLogicMetaData.ABI instead.
var RollupAdminLogicABI = RollupAdminLogicMetaData.ABI

// RollupAdminLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupAdminLogicMetaData.Bin instead.
var RollupAdminLogicBin = RollupAdminLogicMetaData.Bin

// DeployRollupAdminLogic deploys a new Ethereum contract, binding an instance of RollupAdminLogic to it.
func DeployRollupAdminLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupAdminLogic, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupAdminLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// RollupAdminLogic is an auto generated Go binding around an Ethereum contract.
type RollupAdminLogic struct {
	RollupAdminLogicCaller     // Read-only binding to the contract
	RollupAdminLogicTransactor // Write-only binding to the contract
	RollupAdminLogicFilterer   // Log filterer for contract events
}

// RollupAdminLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupAdminLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupAdminLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupAdminLogicSession struct {
	Contract     *RollupAdminLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupAdminLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupAdminLogicCallerSession struct {
	Contract *RollupAdminLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupAdminLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupAdminLogicTransactorSession struct {
	Contract     *RollupAdminLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupAdminLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupAdminLogicRaw struct {
	Contract *RollupAdminLogic // Generic contract binding to access the raw methods on
}

// RollupAdminLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupAdminLogicCallerRaw struct {
	Contract *RollupAdminLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupAdminLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactorRaw struct {
	Contract *RollupAdminLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupAdminLogic creates a new instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogic(address common.Address, backend bind.ContractBackend) (*RollupAdminLogic, error) {
	contract, err := bindRollupAdminLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// NewRollupAdminLogicCaller creates a new read-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupAdminLogicCaller, error) {
	contract, err := bindRollupAdminLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicCaller{contract: contract}, nil
}

// NewRollupAdminLogicTransactor creates a new write-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupAdminLogicTransactor, error) {
	contract, err := bindRollupAdminLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicTransactor{contract: contract}, nil
}

// NewRollupAdminLogicFilterer creates a new log filterer instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupAdminLogicFilterer, error) {
	contract, err := bindRollupAdminLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicFilterer{contract: contract}, nil
}

// bindRollupAdminLogic binds a generic wrapper to an already deployed contract.
func bindRollupAdminLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.RollupAdminLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
		WithdrawalAddress     common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.WithdrawalAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ChallengeGracePeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ChallengeGracePeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupAdminLogic *RollupAdminLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupAdminLogic *RollupAdminLogicCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupAdminLogic *RollupAdminLogicSession) GetValidators() ([]common.Address, error) {
	return _RollupAdminLogic.Contract.GetValidators(&_RollupAdminLogic.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetValidators() ([]common.Address, error) {
	return _RollupAdminLogic.Contract.GetValidators(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorAfkBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorAfkBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorAfkBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ValidatorAfkBlocks(&_RollupAdminLogic.CallOpts)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorAfkBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ValidatorAfkBlocks(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawalAddress(opts *bind.CallOpts, staker common.Address) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawalAddress", staker)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _RollupAdminLogic.Contract.WithdrawalAddress(&_RollupAdminLogic.CallOpts, staker)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _RollupAdminLogic.Contract.WithdrawalAddress(&_RollupAdminLogic.CallOpts, staker)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceRefundStaker(opts *bind.TransactOpts, staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceRefundStaker", staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// Initialize is a paid mutator transaction binding the contract method 0xf5296a9a.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf5296a9a.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf5296a9a.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetAnyTrustFastConfirmer(opts *bind.TransactOpts, _anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setAnyTrustFastConfirmer", _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetChallengeManager(opts *bind.TransactOpts, _challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setChallengeManager", _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetChallengeManager(&_RollupAdminLogic.TransactOpts, _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetChallengeManager(&_RollupAdminLogic.TransactOpts, _challengeManager)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetInbox(opts *bind.TransactOpts, newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setInbox", newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidatorAfkBlocks is a paid mutator transaction binding the contract method 0xf112cea3.
//
// Solidity: function setValidatorAfkBlocks(uint64 newAfkBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorAfkBlocks(opts *bind.TransactOpts, newAfkBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorAfkBlocks", newAfkBlocks)
}

// SetValidatorAfkBlocks is a paid mutator transaction binding the contract method 0xf112cea3.
//
// Solidity: function setValidatorAfkBlocks(uint64 newAfkBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorAfkBlocks(newAfkBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorAfkBlocks(&_RollupAdminLogic.TransactOpts, newAfkBlocks)
}

// SetValidatorAfkBlocks is a paid mutator transaction binding the contract method 0xf112cea3.
//
// Solidity: function setValidatorAfkBlocks(uint64 newAfkBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorAfkBlocks(newAfkBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorAfkBlocks(&_RollupAdminLogic.TransactOpts, newAfkBlocks)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryTo", newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryToAndCall", newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// RollupAdminLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChangedIterator struct {
	Event *RollupAdminLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAdminChanged represents a AdminChanged event raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupAdminLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAdminChangedIterator{contract: _RollupAdminLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAdminChanged)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAdminChanged(log types.Log) (*RollupAdminLogicAdminChanged, error) {
	event := new(RollupAdminLogicAdminChanged)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAnyTrustFastConfirmerSetIterator is returned from FilterAnyTrustFastConfirmerSet and is used to iterate over the raw logs and unpacked data for AnyTrustFastConfirmerSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicAnyTrustFastConfirmerSetIterator struct {
	Event *RollupAdminLogicAnyTrustFastConfirmerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAnyTrustFastConfirmerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAnyTrustFastConfirmerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAnyTrustFastConfirmerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAnyTrustFastConfirmerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAnyTrustFastConfirmerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAnyTrustFastConfirmerSet represents a AnyTrustFastConfirmerSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicAnyTrustFastConfirmerSet struct {
	AnyTrustFastConfirmer common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterAnyTrustFastConfirmerSet is a free log retrieval operation binding the contract event 0xd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c.
//
// Solidity: event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAnyTrustFastConfirmerSet(opts *bind.FilterOpts) (*RollupAdminLogicAnyTrustFastConfirmerSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AnyTrustFastConfirmerSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAnyTrustFastConfirmerSetIterator{contract: _RollupAdminLogic.contract, event: "AnyTrustFastConfirmerSet", logs: logs, sub: sub}, nil
}

// WatchAnyTrustFastConfirmerSet is a free log subscription operation binding the contract event 0xd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c.
//
// Solidity: event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAnyTrustFastConfirmerSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAnyTrustFastConfirmerSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AnyTrustFastConfirmerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAnyTrustFastConfirmerSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AnyTrustFastConfirmerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAnyTrustFastConfirmerSet is a log parse operation binding the contract event 0xd3ab4cbe1b6f519eb43f09ded17a12e81b811e297063ada2d65dddef5b612c7c.
//
// Solidity: event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAnyTrustFastConfirmerSet(log types.Log) (*RollupAdminLogicAnyTrustFastConfirmerSet, error) {
	event := new(RollupAdminLogicAnyTrustFastConfirmerSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AnyTrustFastConfirmerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmedIterator struct {
	Event *RollupAdminLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupAdminLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionConfirmedIterator{contract: _RollupAdminLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupAdminLogicAssertionConfirmed, error) {
	event := new(RollupAdminLogicAssertionConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreatedIterator struct {
	Event *RollupAdminLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionCreated represents a AssertionCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupAdminLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionCreatedIterator{contract: _RollupAdminLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupAdminLogicAssertionCreated, error) {
	event := new(RollupAdminLogicAssertionCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionForceConfirmedIterator is returned from FilterAssertionForceConfirmed and is used to iterate over the raw logs and unpacked data for AssertionForceConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionForceConfirmedIterator struct {
	Event *RollupAdminLogicAssertionForceConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionForceConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionForceConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionForceConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionForceConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionForceConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionForceConfirmed represents a AssertionForceConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionForceConfirmed struct {
	AssertionHash [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionForceConfirmed is a free log retrieval operation binding the contract event 0x0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea4938.
//
// Solidity: event AssertionForceConfirmed(bytes32 indexed assertionHash)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionForceConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupAdminLogicAssertionForceConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionForceConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionForceConfirmedIterator{contract: _RollupAdminLogic.contract, event: "AssertionForceConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionForceConfirmed is a free log subscription operation binding the contract event 0x0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea4938.
//
// Solidity: event AssertionForceConfirmed(bytes32 indexed assertionHash)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionForceConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionForceConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionForceConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionForceConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionForceConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionForceConfirmed is a log parse operation binding the contract event 0x0ef6ac64bd6b0fa95ed37aa19a1b16613fb89e2269c92639a9d516a64fea4938.
//
// Solidity: event AssertionForceConfirmed(bytes32 indexed assertionHash)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionForceConfirmed(log types.Log) (*RollupAdminLogicAssertionForceConfirmed, error) {
	event := new(RollupAdminLogicAssertionForceConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionForceConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionForceCreatedIterator is returned from FilterAssertionForceCreated and is used to iterate over the raw logs and unpacked data for AssertionForceCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionForceCreatedIterator struct {
	Event *RollupAdminLogicAssertionForceCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionForceCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionForceCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionForceCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionForceCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionForceCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionForceCreated represents a AssertionForceCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionForceCreated struct {
	AssertionHash [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionForceCreated is a free log retrieval operation binding the contract event 0xe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e.
//
// Solidity: event AssertionForceCreated(bytes32 indexed assertionHash)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionForceCreated(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupAdminLogicAssertionForceCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionForceCreated", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionForceCreatedIterator{contract: _RollupAdminLogic.contract, event: "AssertionForceCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionForceCreated is a free log subscription operation binding the contract event 0xe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e.
//
// Solidity: event AssertionForceCreated(bytes32 indexed assertionHash)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionForceCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionForceCreated, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionForceCreated", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionForceCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionForceCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionForceCreated is a log parse operation binding the contract event 0xe5256bb4fdac498ff91fac1e162648b613c54eae8e784a5e73ca9ffcb0a08a6e.
//
// Solidity: event AssertionForceCreated(bytes32 indexed assertionHash)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionForceCreated(log types.Log) (*RollupAdminLogicAssertionForceCreated, error) {
	event := new(RollupAdminLogicAssertionForceCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionForceCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBaseStakeSetIterator is returned from FilterBaseStakeSet and is used to iterate over the raw logs and unpacked data for BaseStakeSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicBaseStakeSetIterator struct {
	Event *RollupAdminLogicBaseStakeSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBaseStakeSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBaseStakeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBaseStakeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBaseStakeSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBaseStakeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBaseStakeSet represents a BaseStakeSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicBaseStakeSet struct {
	NewBaseStake *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterBaseStakeSet is a free log retrieval operation binding the contract event 0x54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b.
//
// Solidity: event BaseStakeSet(uint256 newBaseStake)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBaseStakeSet(opts *bind.FilterOpts) (*RollupAdminLogicBaseStakeSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BaseStakeSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBaseStakeSetIterator{contract: _RollupAdminLogic.contract, event: "BaseStakeSet", logs: logs, sub: sub}, nil
}

// WatchBaseStakeSet is a free log subscription operation binding the contract event 0x54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b.
//
// Solidity: event BaseStakeSet(uint256 newBaseStake)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBaseStakeSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBaseStakeSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BaseStakeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBaseStakeSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BaseStakeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBaseStakeSet is a log parse operation binding the contract event 0x54404e5f5326112dad416747228f2fcd704e702c56bf0673ce7e531108e07c1b.
//
// Solidity: event BaseStakeSet(uint256 newBaseStake)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBaseStakeSet(log types.Log) (*RollupAdminLogicBaseStakeSet, error) {
	event := new(RollupAdminLogicBaseStakeSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BaseStakeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgradedIterator struct {
	Event *RollupAdminLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupAdminLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBeaconUpgradedIterator{contract: _RollupAdminLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBeaconUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupAdminLogicBeaconUpgraded, error) {
	event := new(RollupAdminLogicBeaconUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicChallengeManagerSetIterator is returned from FilterChallengeManagerSet and is used to iterate over the raw logs and unpacked data for ChallengeManagerSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicChallengeManagerSetIterator struct {
	Event *RollupAdminLogicChallengeManagerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicChallengeManagerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicChallengeManagerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicChallengeManagerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicChallengeManagerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicChallengeManagerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicChallengeManagerSet represents a ChallengeManagerSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicChallengeManagerSet struct {
	ChallengeManager common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterChallengeManagerSet is a free log retrieval operation binding the contract event 0xe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a4598742.
//
// Solidity: event ChallengeManagerSet(address challengeManager)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterChallengeManagerSet(opts *bind.FilterOpts) (*RollupAdminLogicChallengeManagerSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "ChallengeManagerSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicChallengeManagerSetIterator{contract: _RollupAdminLogic.contract, event: "ChallengeManagerSet", logs: logs, sub: sub}, nil
}

// WatchChallengeManagerSet is a free log subscription operation binding the contract event 0xe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a4598742.
//
// Solidity: event ChallengeManagerSet(address challengeManager)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchChallengeManagerSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicChallengeManagerSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "ChallengeManagerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicChallengeManagerSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "ChallengeManagerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeManagerSet is a log parse operation binding the contract event 0xe86d63ef871123954e3c79261a2ad29d42552412045093f9e7f3ba09a4598742.
//
// Solidity: event ChallengeManagerSet(address challengeManager)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseChallengeManagerSet(log types.Log) (*RollupAdminLogicChallengeManagerSet, error) {
	event := new(RollupAdminLogicChallengeManagerSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "ChallengeManagerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicConfirmPeriodBlocksSetIterator is returned from FilterConfirmPeriodBlocksSet and is used to iterate over the raw logs and unpacked data for ConfirmPeriodBlocksSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicConfirmPeriodBlocksSetIterator struct {
	Event *RollupAdminLogicConfirmPeriodBlocksSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicConfirmPeriodBlocksSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicConfirmPeriodBlocksSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicConfirmPeriodBlocksSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicConfirmPeriodBlocksSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicConfirmPeriodBlocksSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicConfirmPeriodBlocksSet represents a ConfirmPeriodBlocksSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicConfirmPeriodBlocksSet struct {
	NewConfirmPeriod uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterConfirmPeriodBlocksSet is a free log retrieval operation binding the contract event 0xa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b7697.
//
// Solidity: event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterConfirmPeriodBlocksSet(opts *bind.FilterOpts) (*RollupAdminLogicConfirmPeriodBlocksSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "ConfirmPeriodBlocksSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicConfirmPeriodBlocksSetIterator{contract: _RollupAdminLogic.contract, event: "ConfirmPeriodBlocksSet", logs: logs, sub: sub}, nil
}

// WatchConfirmPeriodBlocksSet is a free log subscription operation binding the contract event 0xa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b7697.
//
// Solidity: event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchConfirmPeriodBlocksSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicConfirmPeriodBlocksSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "ConfirmPeriodBlocksSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicConfirmPeriodBlocksSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "ConfirmPeriodBlocksSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmPeriodBlocksSet is a log parse operation binding the contract event 0xa65727a75a71361b541984b5db16e2bd4a6a013f072fe8bb097eafd3844b7697.
//
// Solidity: event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseConfirmPeriodBlocksSet(log types.Log) (*RollupAdminLogicConfirmPeriodBlocksSet, error) {
	event := new(RollupAdminLogicConfirmPeriodBlocksSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "ConfirmPeriodBlocksSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicDelayedInboxSetIterator is returned from FilterDelayedInboxSet and is used to iterate over the raw logs and unpacked data for DelayedInboxSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicDelayedInboxSetIterator struct {
	Event *RollupAdminLogicDelayedInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicDelayedInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicDelayedInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicDelayedInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicDelayedInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicDelayedInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicDelayedInboxSet represents a DelayedInboxSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicDelayedInboxSet struct {
	Inbox   common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDelayedInboxSet is a free log retrieval operation binding the contract event 0xce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef.
//
// Solidity: event DelayedInboxSet(address inbox, bool enabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterDelayedInboxSet(opts *bind.FilterOpts) (*RollupAdminLogicDelayedInboxSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "DelayedInboxSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicDelayedInboxSetIterator{contract: _RollupAdminLogic.contract, event: "DelayedInboxSet", logs: logs, sub: sub}, nil
}

// WatchDelayedInboxSet is a free log subscription operation binding the contract event 0xce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef.
//
// Solidity: event DelayedInboxSet(address inbox, bool enabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchDelayedInboxSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicDelayedInboxSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "DelayedInboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicDelayedInboxSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "DelayedInboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelayedInboxSet is a log parse operation binding the contract event 0xce7e7eac3fe4e3d77ad155523b4ddb4446965e38cbc7c8a484bb82dc817637ef.
//
// Solidity: event DelayedInboxSet(address inbox, bool enabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseDelayedInboxSet(log types.Log) (*RollupAdminLogicDelayedInboxSet, error) {
	event := new(RollupAdminLogicDelayedInboxSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "DelayedInboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicInboxSetIterator is returned from FilterInboxSet and is used to iterate over the raw logs and unpacked data for InboxSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicInboxSetIterator struct {
	Event *RollupAdminLogicInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicInboxSet represents a InboxSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicInboxSet struct {
	Inbox common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterInboxSet is a free log retrieval operation binding the contract event 0x9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345.
//
// Solidity: event InboxSet(address inbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterInboxSet(opts *bind.FilterOpts) (*RollupAdminLogicInboxSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "InboxSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicInboxSetIterator{contract: _RollupAdminLogic.contract, event: "InboxSet", logs: logs, sub: sub}, nil
}

// WatchInboxSet is a free log subscription operation binding the contract event 0x9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345.
//
// Solidity: event InboxSet(address inbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchInboxSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicInboxSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "InboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicInboxSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "InboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxSet is a log parse operation binding the contract event 0x9cf43f86b7edba7593cadbd304522caa8a94db8ec03e204762b19c6955f2c345.
//
// Solidity: event InboxSet(address inbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseInboxSet(log types.Log) (*RollupAdminLogicInboxSet, error) {
	event := new(RollupAdminLogicInboxSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "InboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicInitializedIterator struct {
	Event *RollupAdminLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicInitialized represents a Initialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupAdminLogicInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicInitializedIterator{contract: _RollupAdminLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseInitialized(log types.Log) (*RollupAdminLogicInitialized, error) {
	event := new(RollupAdminLogicInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicLoserStakeEscrowSetIterator is returned from FilterLoserStakeEscrowSet and is used to iterate over the raw logs and unpacked data for LoserStakeEscrowSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicLoserStakeEscrowSetIterator struct {
	Event *RollupAdminLogicLoserStakeEscrowSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicLoserStakeEscrowSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicLoserStakeEscrowSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicLoserStakeEscrowSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicLoserStakeEscrowSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicLoserStakeEscrowSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicLoserStakeEscrowSet represents a LoserStakeEscrowSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicLoserStakeEscrowSet struct {
	NewLoserStakerEscrow common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterLoserStakeEscrowSet is a free log retrieval operation binding the contract event 0x0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd.
//
// Solidity: event LoserStakeEscrowSet(address newLoserStakerEscrow)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterLoserStakeEscrowSet(opts *bind.FilterOpts) (*RollupAdminLogicLoserStakeEscrowSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "LoserStakeEscrowSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicLoserStakeEscrowSetIterator{contract: _RollupAdminLogic.contract, event: "LoserStakeEscrowSet", logs: logs, sub: sub}, nil
}

// WatchLoserStakeEscrowSet is a free log subscription operation binding the contract event 0x0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd.
//
// Solidity: event LoserStakeEscrowSet(address newLoserStakerEscrow)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchLoserStakeEscrowSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicLoserStakeEscrowSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "LoserStakeEscrowSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicLoserStakeEscrowSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "LoserStakeEscrowSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLoserStakeEscrowSet is a log parse operation binding the contract event 0x0b0f78bec1daf434a03f0d26fd75936a5391ef694a7ce32a964a316f40b530dd.
//
// Solidity: event LoserStakeEscrowSet(address newLoserStakerEscrow)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseLoserStakeEscrowSet(log types.Log) (*RollupAdminLogicLoserStakeEscrowSet, error) {
	event := new(RollupAdminLogicLoserStakeEscrowSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "LoserStakeEscrowSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicMinimumAssertionPeriodSetIterator is returned from FilterMinimumAssertionPeriodSet and is used to iterate over the raw logs and unpacked data for MinimumAssertionPeriodSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicMinimumAssertionPeriodSetIterator struct {
	Event *RollupAdminLogicMinimumAssertionPeriodSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicMinimumAssertionPeriodSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicMinimumAssertionPeriodSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicMinimumAssertionPeriodSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicMinimumAssertionPeriodSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicMinimumAssertionPeriodSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicMinimumAssertionPeriodSet represents a MinimumAssertionPeriodSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicMinimumAssertionPeriodSet struct {
	NewPeriod *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinimumAssertionPeriodSet is a free log retrieval operation binding the contract event 0x238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873.
//
// Solidity: event MinimumAssertionPeriodSet(uint256 newPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterMinimumAssertionPeriodSet(opts *bind.FilterOpts) (*RollupAdminLogicMinimumAssertionPeriodSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "MinimumAssertionPeriodSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicMinimumAssertionPeriodSetIterator{contract: _RollupAdminLogic.contract, event: "MinimumAssertionPeriodSet", logs: logs, sub: sub}, nil
}

// WatchMinimumAssertionPeriodSet is a free log subscription operation binding the contract event 0x238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873.
//
// Solidity: event MinimumAssertionPeriodSet(uint256 newPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchMinimumAssertionPeriodSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicMinimumAssertionPeriodSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "MinimumAssertionPeriodSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicMinimumAssertionPeriodSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "MinimumAssertionPeriodSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumAssertionPeriodSet is a log parse operation binding the contract event 0x238dc443e1da4236615831e66e5dd5ed97848f0eec72bcb57efa87438fca6873.
//
// Solidity: event MinimumAssertionPeriodSet(uint256 newPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseMinimumAssertionPeriodSet(log types.Log) (*RollupAdminLogicMinimumAssertionPeriodSet, error) {
	event := new(RollupAdminLogicMinimumAssertionPeriodSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "MinimumAssertionPeriodSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOldOutboxRemovedIterator is returned from FilterOldOutboxRemoved and is used to iterate over the raw logs and unpacked data for OldOutboxRemoved events raised by the RollupAdminLogic contract.
type RollupAdminLogicOldOutboxRemovedIterator struct {
	Event *RollupAdminLogicOldOutboxRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOldOutboxRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOldOutboxRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOldOutboxRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOldOutboxRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOldOutboxRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOldOutboxRemoved represents a OldOutboxRemoved event raised by the RollupAdminLogic contract.
type RollupAdminLogicOldOutboxRemoved struct {
	Outbox common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOldOutboxRemoved is a free log retrieval operation binding the contract event 0xfe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25.
//
// Solidity: event OldOutboxRemoved(address outbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOldOutboxRemoved(opts *bind.FilterOpts) (*RollupAdminLogicOldOutboxRemovedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OldOutboxRemoved")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOldOutboxRemovedIterator{contract: _RollupAdminLogic.contract, event: "OldOutboxRemoved", logs: logs, sub: sub}, nil
}

// WatchOldOutboxRemoved is a free log subscription operation binding the contract event 0xfe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25.
//
// Solidity: event OldOutboxRemoved(address outbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOldOutboxRemoved(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOldOutboxRemoved) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OldOutboxRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOldOutboxRemoved)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OldOutboxRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOldOutboxRemoved is a log parse operation binding the contract event 0xfe29ae11ccc2c860bf49dbf67ca96fa1db99cb935b0a7c02e3fad38ea80d6c25.
//
// Solidity: event OldOutboxRemoved(address outbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOldOutboxRemoved(log types.Log) (*RollupAdminLogicOldOutboxRemoved, error) {
	event := new(RollupAdminLogicOldOutboxRemoved)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OldOutboxRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOutboxSetIterator is returned from FilterOutboxSet and is used to iterate over the raw logs and unpacked data for OutboxSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicOutboxSetIterator struct {
	Event *RollupAdminLogicOutboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOutboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOutboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOutboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOutboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOutboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOutboxSet represents a OutboxSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicOutboxSet struct {
	Outbox common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOutboxSet is a free log retrieval operation binding the contract event 0x0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7.
//
// Solidity: event OutboxSet(address outbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOutboxSet(opts *bind.FilterOpts) (*RollupAdminLogicOutboxSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OutboxSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOutboxSetIterator{contract: _RollupAdminLogic.contract, event: "OutboxSet", logs: logs, sub: sub}, nil
}

// WatchOutboxSet is a free log subscription operation binding the contract event 0x0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7.
//
// Solidity: event OutboxSet(address outbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOutboxSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOutboxSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OutboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOutboxSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OutboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutboxSet is a log parse operation binding the contract event 0x0bff4fc5e4cd8fc762bca2b6ff29e3b73a463474097b3f1e972ed2a167b534a7.
//
// Solidity: event OutboxSet(address outbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOutboxSet(log types.Log) (*RollupAdminLogicOutboxSet, error) {
	event := new(RollupAdminLogicOutboxSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OutboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupAdminLogic contract.
type RollupAdminLogicPausedIterator struct {
	Event *RollupAdminLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicPaused represents a Paused event raised by the RollupAdminLogic contract.
type RollupAdminLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupAdminLogicPausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicPausedIterator{contract: _RollupAdminLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicPaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParsePaused(log types.Log) (*RollupAdminLogicPaused, error) {
	event := new(RollupAdminLogicPaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStartedIterator struct {
	Event *RollupAdminLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupAdminLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupChallengeStartedIterator{contract: _RollupAdminLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupChallengeStarted)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupAdminLogicRollupChallengeStarted, error) {
	event := new(RollupAdminLogicRollupChallengeStarted)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitializedIterator struct {
	Event *RollupAdminLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupInitialized represents a RollupInitialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupAdminLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupInitializedIterator{contract: _RollupAdminLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupAdminLogicRollupInitialized, error) {
	event := new(RollupAdminLogicRollupInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicSequencerInboxSetIterator is returned from FilterSequencerInboxSet and is used to iterate over the raw logs and unpacked data for SequencerInboxSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicSequencerInboxSetIterator struct {
	Event *RollupAdminLogicSequencerInboxSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicSequencerInboxSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicSequencerInboxSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicSequencerInboxSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicSequencerInboxSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicSequencerInboxSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicSequencerInboxSet represents a SequencerInboxSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicSequencerInboxSet struct {
	NewSequencerInbox common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSequencerInboxSet is a free log retrieval operation binding the contract event 0x82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34.
//
// Solidity: event SequencerInboxSet(address newSequencerInbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterSequencerInboxSet(opts *bind.FilterOpts) (*RollupAdminLogicSequencerInboxSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "SequencerInboxSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicSequencerInboxSetIterator{contract: _RollupAdminLogic.contract, event: "SequencerInboxSet", logs: logs, sub: sub}, nil
}

// WatchSequencerInboxSet is a free log subscription operation binding the contract event 0x82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34.
//
// Solidity: event SequencerInboxSet(address newSequencerInbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchSequencerInboxSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicSequencerInboxSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "SequencerInboxSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicSequencerInboxSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "SequencerInboxSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerInboxSet is a log parse operation binding the contract event 0x82740fc8dc15b355f3eb60cd600d43cd104e6906458cccd4cb51bcd1384c0c34.
//
// Solidity: event SequencerInboxSet(address newSequencerInbox)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseSequencerInboxSet(log types.Log) (*RollupAdminLogicSequencerInboxSet, error) {
	event := new(RollupAdminLogicSequencerInboxSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "SequencerInboxSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicStakersForceRefundedIterator is returned from FilterStakersForceRefunded and is used to iterate over the raw logs and unpacked data for StakersForceRefunded events raised by the RollupAdminLogic contract.
type RollupAdminLogicStakersForceRefundedIterator struct {
	Event *RollupAdminLogicStakersForceRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicStakersForceRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicStakersForceRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicStakersForceRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicStakersForceRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicStakersForceRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicStakersForceRefunded represents a StakersForceRefunded event raised by the RollupAdminLogic contract.
type RollupAdminLogicStakersForceRefunded struct {
	Staker []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakersForceRefunded is a free log retrieval operation binding the contract event 0x53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d7352.
//
// Solidity: event StakersForceRefunded(address[] staker)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterStakersForceRefunded(opts *bind.FilterOpts) (*RollupAdminLogicStakersForceRefundedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "StakersForceRefunded")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicStakersForceRefundedIterator{contract: _RollupAdminLogic.contract, event: "StakersForceRefunded", logs: logs, sub: sub}, nil
}

// WatchStakersForceRefunded is a free log subscription operation binding the contract event 0x53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d7352.
//
// Solidity: event StakersForceRefunded(address[] staker)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchStakersForceRefunded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicStakersForceRefunded) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "StakersForceRefunded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicStakersForceRefunded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "StakersForceRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakersForceRefunded is a log parse operation binding the contract event 0x53e7f63f13f0c1bf266cf49783f9c98757c2adbe729a1358bc92635b2b4d7352.
//
// Solidity: event StakersForceRefunded(address[] staker)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseStakersForceRefunded(log types.Log) (*RollupAdminLogicStakersForceRefunded, error) {
	event := new(RollupAdminLogicStakersForceRefunded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "StakersForceRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpausedIterator struct {
	Event *RollupAdminLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUnpaused represents a Unpaused event raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupAdminLogicUnpausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUnpausedIterator{contract: _RollupAdminLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUnpaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUnpaused(log types.Log) (*RollupAdminLogicUnpaused, error) {
	event := new(RollupAdminLogicUnpaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedIterator struct {
	Event *RollupAdminLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgraded represents a Upgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedIterator{contract: _RollupAdminLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgraded(log types.Log) (*RollupAdminLogicUpgraded, error) {
	event := new(RollupAdminLogicUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondaryIterator struct {
	Event *RollupAdminLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedSecondaryIterator{contract: _RollupAdminLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgradedSecondary)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupAdminLogicUpgradedSecondary, error) {
	event := new(RollupAdminLogicUpgradedSecondary)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdatedIterator struct {
	Event *RollupAdminLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*RollupAdminLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserStakeUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserStakeUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupAdminLogicUserStakeUpdated, error) {
	event := new(RollupAdminLogicUserStakeUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupAdminLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupAdminLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicValidatorAfkBlocksSetIterator is returned from FilterValidatorAfkBlocksSet and is used to iterate over the raw logs and unpacked data for ValidatorAfkBlocksSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicValidatorAfkBlocksSetIterator struct {
	Event *RollupAdminLogicValidatorAfkBlocksSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicValidatorAfkBlocksSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicValidatorAfkBlocksSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicValidatorAfkBlocksSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicValidatorAfkBlocksSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicValidatorAfkBlocksSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicValidatorAfkBlocksSet represents a ValidatorAfkBlocksSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicValidatorAfkBlocksSet struct {
	NewPeriod *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorAfkBlocksSet is a free log retrieval operation binding the contract event 0x43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33.
//
// Solidity: event ValidatorAfkBlocksSet(uint256 newPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterValidatorAfkBlocksSet(opts *bind.FilterOpts) (*RollupAdminLogicValidatorAfkBlocksSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "ValidatorAfkBlocksSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicValidatorAfkBlocksSetIterator{contract: _RollupAdminLogic.contract, event: "ValidatorAfkBlocksSet", logs: logs, sub: sub}, nil
}

// WatchValidatorAfkBlocksSet is a free log subscription operation binding the contract event 0x43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33.
//
// Solidity: event ValidatorAfkBlocksSet(uint256 newPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchValidatorAfkBlocksSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicValidatorAfkBlocksSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "ValidatorAfkBlocksSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicValidatorAfkBlocksSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "ValidatorAfkBlocksSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorAfkBlocksSet is a log parse operation binding the contract event 0x43f7dc42145cd896e425c1ba47e44ad7fac3214c8993455b88ea382f68a5ed33.
//
// Solidity: event ValidatorAfkBlocksSet(uint256 newPeriod)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseValidatorAfkBlocksSet(log types.Log) (*RollupAdminLogicValidatorAfkBlocksSet, error) {
	event := new(RollupAdminLogicValidatorAfkBlocksSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "ValidatorAfkBlocksSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicValidatorWhitelistDisabledSetIterator is returned from FilterValidatorWhitelistDisabledSet and is used to iterate over the raw logs and unpacked data for ValidatorWhitelistDisabledSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicValidatorWhitelistDisabledSetIterator struct {
	Event *RollupAdminLogicValidatorWhitelistDisabledSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicValidatorWhitelistDisabledSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicValidatorWhitelistDisabledSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicValidatorWhitelistDisabledSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicValidatorWhitelistDisabledSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicValidatorWhitelistDisabledSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicValidatorWhitelistDisabledSet represents a ValidatorWhitelistDisabledSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicValidatorWhitelistDisabledSet struct {
	ValidatorWhitelistDisabled bool
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterValidatorWhitelistDisabledSet is a free log retrieval operation binding the contract event 0x016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e9.
//
// Solidity: event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterValidatorWhitelistDisabledSet(opts *bind.FilterOpts) (*RollupAdminLogicValidatorWhitelistDisabledSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "ValidatorWhitelistDisabledSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicValidatorWhitelistDisabledSetIterator{contract: _RollupAdminLogic.contract, event: "ValidatorWhitelistDisabledSet", logs: logs, sub: sub}, nil
}

// WatchValidatorWhitelistDisabledSet is a free log subscription operation binding the contract event 0x016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e9.
//
// Solidity: event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchValidatorWhitelistDisabledSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicValidatorWhitelistDisabledSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "ValidatorWhitelistDisabledSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicValidatorWhitelistDisabledSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "ValidatorWhitelistDisabledSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorWhitelistDisabledSet is a log parse operation binding the contract event 0x016436ae56a1958a8efa3965e4839a8a90009e0a225fd19fe89b701c99f3e6e9.
//
// Solidity: event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseValidatorWhitelistDisabledSet(log types.Log) (*RollupAdminLogicValidatorWhitelistDisabledSet, error) {
	event := new(RollupAdminLogicValidatorWhitelistDisabledSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "ValidatorWhitelistDisabledSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicValidatorsSetIterator is returned from FilterValidatorsSet and is used to iterate over the raw logs and unpacked data for ValidatorsSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicValidatorsSetIterator struct {
	Event *RollupAdminLogicValidatorsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicValidatorsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicValidatorsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicValidatorsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicValidatorsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicValidatorsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicValidatorsSet represents a ValidatorsSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicValidatorsSet struct {
	Validators []common.Address
	Enabled    []bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterValidatorsSet is a free log retrieval operation binding the contract event 0x0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c0.
//
// Solidity: event ValidatorsSet(address[] validators, bool[] enabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterValidatorsSet(opts *bind.FilterOpts) (*RollupAdminLogicValidatorsSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "ValidatorsSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicValidatorsSetIterator{contract: _RollupAdminLogic.contract, event: "ValidatorsSet", logs: logs, sub: sub}, nil
}

// WatchValidatorsSet is a free log subscription operation binding the contract event 0x0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c0.
//
// Solidity: event ValidatorsSet(address[] validators, bool[] enabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchValidatorsSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicValidatorsSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "ValidatorsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicValidatorsSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "ValidatorsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorsSet is a log parse operation binding the contract event 0x0d9690f97165f35991ae60d2a97e04aff472c08729722a9236ff1bc8b9ba90c0.
//
// Solidity: event ValidatorsSet(address[] validators, bool[] enabled)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseValidatorsSet(log types.Log) (*RollupAdminLogicValidatorsSet, error) {
	event := new(RollupAdminLogicValidatorsSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "ValidatorsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicWasmModuleRootSetIterator is returned from FilterWasmModuleRootSet and is used to iterate over the raw logs and unpacked data for WasmModuleRootSet events raised by the RollupAdminLogic contract.
type RollupAdminLogicWasmModuleRootSetIterator struct {
	Event *RollupAdminLogicWasmModuleRootSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicWasmModuleRootSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicWasmModuleRootSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicWasmModuleRootSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicWasmModuleRootSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicWasmModuleRootSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicWasmModuleRootSet represents a WasmModuleRootSet event raised by the RollupAdminLogic contract.
type RollupAdminLogicWasmModuleRootSet struct {
	NewWasmModuleRoot [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterWasmModuleRootSet is a free log retrieval operation binding the contract event 0x7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7.
//
// Solidity: event WasmModuleRootSet(bytes32 newWasmModuleRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterWasmModuleRootSet(opts *bind.FilterOpts) (*RollupAdminLogicWasmModuleRootSetIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "WasmModuleRootSet")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicWasmModuleRootSetIterator{contract: _RollupAdminLogic.contract, event: "WasmModuleRootSet", logs: logs, sub: sub}, nil
}

// WatchWasmModuleRootSet is a free log subscription operation binding the contract event 0x7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7.
//
// Solidity: event WasmModuleRootSet(bytes32 newWasmModuleRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchWasmModuleRootSet(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicWasmModuleRootSet) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "WasmModuleRootSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicWasmModuleRootSet)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "WasmModuleRootSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWasmModuleRootSet is a log parse operation binding the contract event 0x7c4db9e8738aa15b72d17ae77a824047a59f8657e14b5a5a75cb6d08213a1db7.
//
// Solidity: event WasmModuleRootSet(bytes32 newWasmModuleRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseWasmModuleRootSet(log types.Log) (*RollupAdminLogicWasmModuleRootSet, error) {
	event := new(RollupAdminLogicWasmModuleRootSet)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "WasmModuleRootSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreMetaData contains all meta data concerning the RollupCore contract.
var RollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAfkBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// RollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCoreMetaData.ABI instead.
var RollupCoreABI = RollupCoreMetaData.ABI

// RollupCore is an auto generated Go binding around an Ethereum contract.
type RollupCore struct {
	RollupCoreCaller     // Read-only binding to the contract
	RollupCoreTransactor // Write-only binding to the contract
	RollupCoreFilterer   // Log filterer for contract events
}

// RollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCoreSession struct {
	Contract     *RollupCore       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCoreCallerSession struct {
	Contract *RollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// RollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCoreTransactorSession struct {
	Contract     *RollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCoreRaw struct {
	Contract *RollupCore // Generic contract binding to access the raw methods on
}

// RollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCoreCallerRaw struct {
	Contract *RollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCoreTransactorRaw struct {
	Contract *RollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCore creates a new instance of RollupCore, bound to a specific deployed contract.
func NewRollupCore(address common.Address, backend bind.ContractBackend) (*RollupCore, error) {
	contract, err := bindRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCore{RollupCoreCaller: RollupCoreCaller{contract: contract}, RollupCoreTransactor: RollupCoreTransactor{contract: contract}, RollupCoreFilterer: RollupCoreFilterer{contract: contract}}, nil
}

// NewRollupCoreCaller creates a new read-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*RollupCoreCaller, error) {
	contract, err := bindRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreCaller{contract: contract}, nil
}

// NewRollupCoreTransactor creates a new write-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCoreTransactor, error) {
	contract, err := bindRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreTransactor{contract: contract}, nil
}

// NewRollupCoreFilterer creates a new log filterer instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCoreFilterer, error) {
	contract, err := bindRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCoreFilterer{contract: contract}, nil
}

// bindRollupCore binds a generic wrapper to an already deployed contract.
func bindRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.RollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupCore *RollupCoreCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
		WithdrawalAddress     common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.WithdrawalAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupCore *RollupCoreSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupCore *RollupCoreCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ChallengeGracePeriodBlocks(&_RollupCore.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ChallengeGracePeriodBlocks(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupCore *RollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupCore *RollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupCore *RollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupCore *RollupCoreCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupCore *RollupCoreSession) GetValidators() ([]common.Address, error) {
	return _RollupCore.Contract.GetValidators(&_RollupCore.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupCore *RollupCoreCallerSession) GetValidators() ([]common.Address, error) {
	return _RollupCore.Contract.GetValidators(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupCore *RollupCoreSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ValidatorAfkBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorAfkBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ValidatorAfkBlocks() (uint64, error) {
	return _RollupCore.Contract.ValidatorAfkBlocks(&_RollupCore.CallOpts)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ValidatorAfkBlocks() (uint64, error) {
	return _RollupCore.Contract.ValidatorAfkBlocks(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupCore *RollupCoreCaller) WithdrawalAddress(opts *bind.CallOpts, staker common.Address) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawalAddress", staker)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupCore *RollupCoreSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _RollupCore.Contract.WithdrawalAddress(&_RollupCore.CallOpts, staker)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupCore *RollupCoreCallerSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _RollupCore.Contract.WithdrawalAddress(&_RollupCore.CallOpts, staker)
}

// RollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupCore contract.
type RollupCoreAssertionConfirmedIterator struct {
	Event *RollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the RollupCore contract.
type RollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionConfirmedIterator{contract: _RollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionConfirmed)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*RollupCoreAssertionConfirmed, error) {
	event := new(RollupCoreAssertionConfirmed)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupCore contract.
type RollupCoreAssertionCreatedIterator struct {
	Event *RollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionCreated represents a AssertionCreated event raised by the RollupCore contract.
type RollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionCreatedIterator{contract: _RollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionCreated)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) ParseAssertionCreated(log types.Log) (*RollupCoreAssertionCreated, error) {
	event := new(RollupCoreAssertionCreated)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupCore contract.
type RollupCoreInitializedIterator struct {
	Event *RollupCoreInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreInitialized represents a Initialized event raised by the RollupCore contract.
type RollupCoreInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupCoreInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreInitializedIterator{contract: _RollupCore.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) ParseInitialized(log types.Log) (*RollupCoreInitialized, error) {
	event := new(RollupCoreInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCorePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupCore contract.
type RollupCorePausedIterator struct {
	Event *RollupCorePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCorePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCorePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCorePaused represents a Paused event raised by the RollupCore contract.
type RollupCorePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupCorePausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupCorePausedIterator{contract: _RollupCore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupCorePaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCorePaused)
				if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) ParsePaused(log types.Log) (*RollupCorePaused, error) {
	event := new(RollupCorePaused)
	if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupCore contract.
type RollupCoreRollupChallengeStartedIterator struct {
	Event *RollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupCore contract.
type RollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupChallengeStartedIterator{contract: _RollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupChallengeStarted)
				if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupCoreRollupChallengeStarted, error) {
	event := new(RollupCoreRollupChallengeStarted)
	if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupCore contract.
type RollupCoreRollupInitializedIterator struct {
	Event *RollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupInitialized represents a RollupInitialized event raised by the RollupCore contract.
type RollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupInitializedIterator{contract: _RollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) ParseRollupInitialized(log types.Log) (*RollupCoreRollupInitialized, error) {
	event := new(RollupCoreRollupInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupCore contract.
type RollupCoreUnpausedIterator struct {
	Event *RollupCoreUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUnpaused represents a Unpaused event raised by the RollupCore contract.
type RollupCoreUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupCoreUnpausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupCoreUnpausedIterator{contract: _RollupCore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupCoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUnpaused)
				if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) ParseUnpaused(log types.Log) (*RollupCoreUnpaused, error) {
	event := new(RollupCoreUnpaused)
	if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupCore contract.
type RollupCoreUserStakeUpdatedIterator struct {
	Event *RollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the RollupCore contract.
type RollupCoreUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*RollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserStakeUpdatedIterator{contract: _RollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserStakeUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*RollupCoreUserStakeUpdated, error) {
	event := new(RollupCoreUserStakeUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserWithdrawableFundsUpdatedIterator{contract: _RollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserWithdrawableFundsUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(RollupCoreUserWithdrawableFundsUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorMetaData contains all meta data concerning the RollupCreator contract.
var RollupCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inboxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgradeExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeCreator\",\"outputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManagerTemplate\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumAssertionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validatorAfkBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"espressoTEEVerifier\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxDataSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deployFactoriesToL2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGasForRetryables\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"batchPosters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"batchPosterManager\",\"type\":\"address\"}],\"internalType\":\"structRollupCreator.RollupDeploymentParams\",\"name\":\"deployParams\",\"type\":\"tuple\"}],\"name\":\"createRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2FactoriesDeployer\",\"outputs\":[{\"internalType\":\"contractDeployHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAdminLogic\",\"outputs\":[{\"internalType\":\"contractIRollupAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupUserLogic\",\"outputs\":[{\"internalType\":\"contractIRollupUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"_bridgeCreator\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"_osp\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"_challengeManagerLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"_rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"_rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"contractIUpgradeExecutor\",\"name\":\"_upgradeExecutorLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorWalletCreator\",\"type\":\"address\"},{\"internalType\":\"contractDeployHelper\",\"name\":\"_l2FactoriesDeployer\",\"type\":\"address\"}],\"name\":\"setTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeExecutorLogic\",\"outputs\":[{\"internalType\":\"contractIUpgradeExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60808060405234605a5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361504e90816100608239f35b600080fdfe60a080604052600436101561001d575b50361561001b57600080fd5b005b60006080526080513560e01c908163030cb85e1461223f57508063715018a6146121d35780638b02b99f1461040f5780638da5cb5b146103e65780639c683d10146103be5780639d4798e3146103965780639dba32411461036e578063ac0425bc14610346578063bc45e0ae1461031e578063f0dae49414610204578063f26a62c6146101dc578063f2fde38b146100ed5763f860cefa146100bf573861000f565b346100e7576080516003193601126100e75760206001600160a01b0360015416604051908152f35b60805180fd5b346100e75760206003193601126100e7576004356001600160a01b038082168092036101d75761011b612765565b811561016d576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360805180f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b346100e7576080516003193601126100e75760206001600160a01b0360025416604051908152f35b346100e7576101006003193601126100e7576004356001600160a01b03908181168091036100e7576024358281168091036100e7576044358381168091036100e7576064358481168091036100e757608435908582168092036100e75760a435928684168094036100e75760c435948786168096036101d75760e4359788168098036100e757610292612765565b73ffffffffffffffffffffffffffffffffffffffff199687600154161760015586600254161760025585600354161760035584600454161760045583600554161760055582600654161760065581600754161760075560085416176008557fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b608051608051a160805180f35b346100e7576080516003193601126100e75760206001600160a01b0360075416604051908152f35b346100e7576080516003193601126100e75760206001600160a01b0360085416604051908152f35b346100e7576080516003193601126100e75760206001600160a01b0360045416604051908152f35b346100e7576080516003193601126100e75760206001600160a01b0360055416604051908152f35b346100e7576080516003193601126100e75760206001600160a01b0360035416604051908152f35b346100e7576080516003193601126100e75760206001600160a01b036080515416604051908152f35b60206003193601126100e75767ffffffffffffffff600435116100e757610100600319600435360301126100e7576040518061010081011067ffffffffffffffff61010083011117611ef8576004356004013567ffffffffffffffff81116100e7576104006003198260043501360301126100e7576103c082016101008301811067ffffffffffffffff821117611ef8576040526104b2600482813501016122d3565b6101008301526104c860248260043501016122e8565b6101208301526004358101604481013561014084015260648101356101608401526104f5906084016122e8565b61018083015261050b60a48260043501016122e8565b6101a0830152600435810160c48101356101c084015260e4013567ffffffffffffffff81116100e757366023828460043501010112156100e757610557600482848235010101356122fc565b9061056560405192836122b0565b600480358401820190810135808452369101602401116100e75760048035840182019081013590602401602084013760805160048035850192830101358301602001526101e08401919091526101048101356102008401526105ca90610124016122d3565b6102208301526101448160043501013567ffffffffffffffff81116100e757366023828460043501010112156100e75761060c60048284823501010135612318565b9061061a60405192836122b0565b60048035840182019081013580845260208401913660059290921b01602401116100e75760248285600435010101905b60048035860184019081013560051b0160240182106121c35750505061024083015260807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9c8260043501360301126100e75760405180608081011067ffffffffffffffff608083011117611ef8576080810160409081526004358301610164810135835261018481013560208401526101a4810135918301919091526101c481013560608301526102608401919091526101e48101356102808401526102048101356102a08401526102248101356102c084015260c036919091036102431901126100e75760405161073b81612264565b6080610243198360043501360301126100e75760405180604081011067ffffffffffffffff604083011117611ef857604081016040523661026384600435010112156100e75761078d60408201612294565b6040810136610284856004350101116100e757610244846004350101905b61028485600435010182106121b3575050604081018152366102a384600435010112156100e7576040516107de81612294565b80366102c4866004350101116100e757610284856004350101905b6102c4866004350101821061219b5750506020820152815260036102c48360043501013510156100e75760043582016102c481013560208301526102e481013560408301526102e084019190915261030481013561030084015261086090610324016122e8565b6103208301526004358101610344013560ff811690036100e757600435810161034481013561034084015261089890610364016122d3565b61036083015260607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc7c8260043501360301126100e7576103e4610930916040516108e181612264565b6108f26103848360043501016122d3565b81526109056103a48360043501016122d3565b602082015261091b6103c48360043501016122d3565b604082015261038085015260043501016122e8565b6103a08201526101008101815267ffffffffffffffff60246004350135116100e757610966366004803560248101350101612330565b60208201526044600435013560408201526109856064600435016122e8565b60608201526004356084013580151590036100e75760846004350135608082015260a4600435013560a082015267ffffffffffffffff60c46004350135116100e7576109db366004803560c48101350101612330565b60c08201526109ee60e4600435016122e8565b60e08201526001600160a01b0360015416604051907f11f0222700000000000000000000000000000000000000000000000000000000825260c082600481845afa80156113eb576080516080519360805192612169575b506001600160a01b0390602060408701519160046040518095819363e8eb1dc360e01b8352165afa9081156113eb5760805191612133575b610a88925014612404565b6001600160a01b03602060408601519460046040518094819363e8eb1dc360e01b8352165afa9081156113eb57608051916120fa575b50610ad2906001600160a01b039414612404565b602060408501519160046040518096819363e8eb1dc360e01b8352165afa9283156113eb57608051936120c2575b5090610b1160049360c0931461244f565b604051928380927f76768ab90000000000000000000000000000000000000000000000000000000082525afa80156113eb576080516080519260805192612080575b506001600160a01b0390602060408601519160046040518095819363e8eb1dc360e01b8352165afa9081156113eb576080519161204a575b610b96925014612404565b6001600160a01b03602060408501519360046040518094819363e8eb1dc360e01b8352165afa9081156113eb5760805191612011575b50610be0906001600160a01b039314612404565b602060408401519160046040518095819363e8eb1dc360e01b8352165afa9081156113eb5760805191611fdb575b610c1992501461244f565b6040518061076e81011067ffffffffffffffff61076e83011117611ef85761076e61295b82398061076e81010390608051f09081156113eb57604051602080820152610d2181610cfd610c7a855161010060408501526101408401906124da565b610cb46020870151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc09283868303016060870152612714565b90604087015160808501526001600160a01b0360608801511660a08501526080870151151560c085015260a087015160e085015260c08701519084830301610100850152612714565b6001600160a01b0360e086015116610120830152601f1982820301825203826122b0565b602081519101206040518061123d81011067ffffffffffffffff61123d83011117611ef85761123d613ddc82398061123d81010390608051f580156113eb576001600160a01b03600154169060a06001600160a01b036101648682606088015116958751610e3d61016082015191610e0e876102a061028084015193015116936040519b8c998a987fbf2359f7000000000000000000000000000000000000000000000000000000008a521660048901526001600160a01b038c16602489015260448801526064870190606080918051845260208101516020850152604081015160408501520151910152565b805167ffffffffffffffff90811660e48701526020820151811661010487015260409091015116610124850152565b610144830152608051905af19182156113eb5760805192611f35575b508251906001600160a01b03600354166040519081610d1381011067ffffffffffffffff610d1384011117611ef857610d136130c98339610d138201526001600160a01b0386166020610d138301015260606040610d13830101526080516060610d1383010152608081610d138101030190608051f09182156113eb5767ffffffffffffffff815116906001600160a01b0360025416610180820151916101a08101516101c08201516001600160a01b03602084015116916101408401519560ff6102406001600160a01b0360808801511696015116956001600160a01b038b163b156100e757604051987f1a72d54c000000000000000000000000000000000000000000000000000000008a526001600160a01b038b1660048b015260248a015260448901526064880152608487015260a486015260c485015260e4840152610104830152610140610124830152805180610144840152602061016484019201906080515b818110611f1f5750505081806080519203816080516001600160a01b0388165af180156113eb57611f10575b506001600160a01b0360808551015116916001600160a01b036006541660405180602081011067ffffffffffffffff602083011117611ea0576020810160405260805181526040519182610d1381011067ffffffffffffffff610d1385011117611ef857829161108491610d136130c98539610d1384019081526001600160a01b038b166020820152606060408201819052019061249a565b0390608051f09283156113eb576040519061109e82612294565b6001825260203681840137815115611ee25760208201526001600160a01b0384163b156100e757604051907f946d92040000000000000000000000000000000000000000000000000000000082526001600160a01b0385166004830152604060248301528180611115608051936044830190612714565b03816080516001600160a01b0389165af180156113eb57611ecc575b506001600160a01b0386163b156100e7576040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152608051816024816080516001600160a01b038c165af180156113eb57611eb6575b503060808651015284516001600160a01b038551166001600160a01b036040870151166001600160a01b036020880151166001600160a01b036080890151166001600160a01b0360608a0151166001600160a01b0360045416916001600160a01b0360055416936001600160a01b036007541695604051978861012081011067ffffffffffffffff6101208b011117611ea0576101208901604052885260208801526040870152606086015260808501526001600160a01b03861660a085015260c084015260e08301526101008201526001600160a01b0384163b156100e7576001600160a01b036101006112c0604051947f5483c8cd00000000000000000000000000000000000000000000000000000000865261014060048701526101448601906124da565b928281511660248601528260208201511660448601528260408201511660648601528260608201511660848601528260808201511660a48601528260a08201511660c48601528260c08201511660e48601528260e08201511661010486015201511661012483015281806080519203816080516001600160a01b0388165af180156113eb57611e8a575b506080515b60c086015180518210156113f8576001600160a01b03611376838260408a01511693612751565b511690803b156100e757604051917f6e7df3e70000000000000000000000000000000000000000000000000000000083526004830152600160248301528160448160805193608051905af180156113eb576113d5575b5060010161134f565b6113de90612280565b6080516100e757876113cc565b6040513d608051823e3d90fd5b50508386866001600160a01b0360e08201511680611e1a575b5060208101515180611cf1575b506001600160a01b0385163b156100e7576040517f13af40350000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152608051816024816080516001600160a01b038b165af180156113eb57611cdb575b506080810151611540575b6020956001600160a01b036060819301511694828886015116948380608083015116958180606085015116948180604087015116955116958260075416996040519b8c528e8c015260408b015216606089015216608087015260a086015260c08501521660e08301526101008201527fd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d6101206001600160a01b03851692a36001600160a01b0360405191168152f35b6001600160a01b036020840151166001600160a01b036060830151169060a083015182156000146116fd576008546040517facd7d02a0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529094911690602085604481855afa9485156113eb57608051956116c9575b50813b156100e75761162c946040518096819582947fd7c641e700000000000000000000000000000000000000000000000000000000845260805198600485016040919493929460608201956001600160a01b0380921683521660208201520152565b03925af180156113eb576116b3575b5060805180808047335af161164e6127ff565b501561166f576020956001600160a01b03606081935b935050509550611490565b606460405162461bcd60e51b815260206004820152600d60248201527f526566756e64206661696c6564000000000000000000000000000000000000006044820152fd5b6116bc90612280565b6080516100e7578661163b565b9094506020813d6020116116f5575b816116e5602093836122b0565b810103126101d75751938b6115c9565b3d91506116d8565b6008546040517facd7d02a0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905290911690602081604481855afa9081156113eb5760805191611ca9575b50604051907f313ce567000000000000000000000000000000000000000000000000000000008252602082600481895afa9182156113eb5760805192611c6b575b508060ff83166012811015611c0e57505050615208918383810204831484151715611bf6576040517f4367d652000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156113eb57839060805192611bc0575b5061181261181792868802906127f2565b61282f565b916040517f9ed2c6f0000000000000000000000000000000000000000000000000000000008152602081600481865afa9081156113eb57829060805192611b8a575b5061181261186a92878902906127f2565b93604051907fdd0c625a000000000000000000000000000000000000000000000000000000008252602082600481875afa80156113eb57839260805191611b51575b506118c2600493611812602093858c02906127f2565b94604051938480927fdb633c3e0000000000000000000000000000000000000000000000000000000082525afa9182156113eb5760805192611b15575b506119d9956119206119269461181261192b989795611926958c02906127f2565b946127f2565b6127f2565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082019081523360248301526001600160a01b0386166044830152606480830193909352918152906119836084836122b0565b6040519161199083612294565b602083527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602084015260805191608051915190608051895af16119d26127ff565b90866128be565b805180611a86575b50506001600160a01b0360085416803b156100e7576040517fd7c641e70000000000000000000000000000000000000000000000000000000081526080516001600160a01b039485166004830152939094166024850152604484019190915282908180606481010391608051905af180156113eb57611a70575b506020956001600160a01b0360608193611664565b611a7990612280565b6080516100e75786611a5b565b81602091810103126100e757602001518015908115036100e757611aab5789806119e1565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b90949391506020813d602011611b49575b81611b33602093836122b0565b810103126101d7575192939092906119d96118ff565b3d9150611b26565b9250506020823d602011611b82575b81611b6d602093836122b0565b810103126101d75790518291906118c26118ac565b3d9150611b60565b9150506020813d602011611bb8575b81611ba6602093836122b0565b810103126101d7575181611812611859565b3d9150611b99565b9150506020813d602011611bee575b81611bdc602093836122b0565b810103126101d7575182611812611801565b3d9150611bcf565b634e487b7160e01b6080515260116004526024608051fd5b919350915060128111611c27575b506119d9915061192b565b905060ff601119820111611c55576119d991611c49601119611c4f93016127ce565b906127df565b8b611c1c565b634e487b7160e01b600052601160045260246000fd5b9091506020813d602011611ca1575b81611c87602093836122b0565b810103126100e7575160ff811681036100e757908c61179b565b3d9150611c7a565b90506020813d602011611cd3575b81611cc4602093836122b0565b810103126101d757518b61175a565b3d9150611cb7565b611ce490612280565b6080516100e75786611485565b959391601f19611d1d611d078998969498612318565b98611d156040519a8b6122b0565b808a52612318565b013660208901376080515b602087015151811015611d4a57806001611d4381938b612751565b5201611d28565b50919395949092946020820151906001600160a01b0387163b156100e757611da3604051927fa3ffb772000000000000000000000000000000000000000000000000000000008452604060048501526044840190612714565b600319838203016024840152602080835192838152019201906080515b818110611e025750505081806080519203816080516001600160a01b038b165af180156113eb571561141e57611df590612280565b6080516100e7578661141e565b82511515845260209384019390920191600101611dc0565b6001600160a01b03604085015116803b156100e757604051917f1ff6479000000000000000000000000000000000000000000000000000000000835260048301528160248160805193608051905af180156113eb571561141157611e7d90612280565b6080516100e75786611411565b611e9390612280565b6080516100e7578661134a565b634e487b7160e01b600052604160045260246000fd5b611ebf90612280565b6080516100e75786611198565b611ed590612280565b6080516100e75786611131565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b6080515260416004526024608051fd5b611f1990612280565b85610feb565b8251845260209384019390920191600101610fbf565b90915060a0813d60a011611fd3575b81611f5160a093836122b0565b810103126100e757604051908160a081011067ffffffffffffffff60a084011117611ef8576080611fc79160a08401604052611f8c81612398565b8452611f9a60208201612398565b6020850152611fab60408201612398565b6040850152611fbc60608201612398565b606085015201612398565b60808201529084610e59565b3d9150611f44565b90506020823d602011612009575b81611ff6602093836122b0565b810103126100e757610c19915190610c0e565b3d9150611fe9565b90506020813d602011612042575b8161202c602093836122b0565b810103126100e757516001600160a01b03610bcc565b3d915061201f565b90506020823d602011612078575b81612065602093836122b0565b810103126100e757610b96915190610b8b565b3d9150612058565b90506001600160a01b0392506120ae915060c03d60c0116120bb575b6120a681836122b0565b8101906123ac565b5091949093509050610b53565b503d61209c565b9250906020833d6020116120f2575b816120de602093836122b0565b810103126100e75791519190610b11610b00565b3d91506120d1565b90506020813d60201161212b575b81612115602093836122b0565b810103126100e757516001600160a01b03610abe565b3d9150612108565b90506020823d602011612161575b8161214e602093836122b0565b810103126100e757610a88915190610a7d565b3d9150612141565b90506001600160a01b03935061218e915060c03d60c0116120bb576120a681836122b0565b5091959093509050610a45565b602080916121a8846122d3565b8152019101906107f9565b81358152602091820191016107ab565b813581526020918201910161064a565b346100e7576080516003193601126100e7576121ed612765565b608051805473ffffffffffffffffffffffffffffffffffffffff19811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a360805180f35b346100e7576080516003193601126100e7576020906001600160a01b03600654168152f35b6060810190811067ffffffffffffffff821117611ea057604052565b67ffffffffffffffff8111611ea057604052565b6040810190811067ffffffffffffffff821117611ea057604052565b90601f601f19910116810190811067ffffffffffffffff821117611ea057604052565b359067ffffffffffffffff821682036101d757565b35906001600160a01b03821682036101d757565b67ffffffffffffffff8111611ea057601f01601f191660200190565b67ffffffffffffffff8111611ea05760051b60200190565b9080601f830112156101d757602090823561234a81612318565b9361235860405195866122b0565b81855260208086019260051b8201019283116101d757602001905b828210612381575050505090565b83809161238d846122e8565b815201910190612373565b51906001600160a01b03821682036101d757565b91908260c09103126101d7576123c182612398565b916123ce60208201612398565b916123db60408301612398565b916123e860608201612398565b9161240160a06123fa60808501612398565b9301612398565b90565b1561240b57565b606460405162461bcd60e51b815260206004820152601960248201527f53495f4d41585f444154415f53495a455f4d49534d41544348000000000000006044820152fd5b1561245657565b606460405162461bcd60e51b815260206004820152601860248201527f495f4d41585f444154415f53495a455f4d49534d4154434800000000000000006044820152fd5b919082519283825260005b8481106124c6575050601f19601f8460006020809697860101520116010190565b6020818301810151848301820152016124a5565b9061040067ffffffffffffffff90818451168352602061255181860151926001600160a01b038094168387015260408701516040870152606087015160608701528360808801511660808701528360a08801511660a087015260c087015160c087015260e0870151908060e088015286019061249a565b946101008082015190860152610120848183015116908601526101409586820151968682039087015282808851928381520197019060005b818110612700575050506125c46101608083015190870190606080918051845260208101516020850152604081015160408501520151910152565b610180810151916101e092838701526101a08201519061020091828801526101c08301519361022094858901528301519561024082818a018951908151906000905b600282106126e9575050500151610280939060008b86015b83600283106126d357505050508801519060038210156126bd57876102a0976126b4968c6102e060406103e09e60ff986102c085015201519101528801516103008d0152870151166103208b015285015116610340890152610260840151166103608801528201516103808701906040908167ffffffffffffffff91828151168552826020820151166020860152015116910152565b01511691015290565b634e487b7160e01b600052602160045260246000fd5b806001928886511681520193019101909161261e565b825181528794928301926001929092019101612606565b825189529784019791840191600101612589565b90815180825260208080930193019160005b828110612734575050505090565b83516001600160a01b031685529381019392810192600101612726565b8051821015611ee25760209160051b010190565b6001600160a01b0360005416330361277957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff166012039060ff8211611c5557565b60ff16604d8111611c5557600a0a90565b81810292918115918404141715611c5557565b91908201809211611c5557565b3d1561282a573d90612810826122fc565b9161281e60405193846122b0565b82523d6000602084013e565b606090565b9081601260ff83161061284157505090565b909150612855612850836127bd565b6127ce565b80156128a85761286d612850612873928404946127bd565b836127df565b1061287b5790565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611c555760010190565b634e487b7160e01b600052601260045260246000fd5b9192901561291f57508151156128d2575090565b3b156128db5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156129325750805190602001fd5b6129569060405191829162461bcd60e51b835260206004840152602483019061249a565b0390fdfe60808060405234605a5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361070e90816100608239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90848263204e1c7a1461050d5750508063715018a61461049c5780637eff275e146104095780638da5cb5b146103e35780639623609d146102b35783816399a88ec41461020e57508063f2fde38b146101005763f3b7dead1461007f57600080fd5b346100fc5760206003193601126100fc5782806001600160a01b0392836100a4610564565b168551907ff851a4400000000000000000000000000000000000000000000000000000000082525afa926100d6610617565b93156100f957506100f1836020808096518301019101610647565b169051908152f35b80fd5b8280fd5b50346100fc5760206003193601126100fc5761011a610564565b90610123610666565b6001600160a01b0380921692831561018b575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b929050346102af57806003193601126102af57610229610564565b61023161057f565b9061023a610666565b6001600160a01b03809116803b156102ab57859283602492865197889586947f3659cfe600000000000000000000000000000000000000000000000000000000865216908401525af19081156102a257506102925750f35b61029b90610595565b6100f95780f35b513d84823e3d90fd5b8580fd5b5050fd5b50829060606003193601126103df576102ca610564565b926102d361057f565b9160443567ffffffffffffffff81116103db57366023820112156103db5780820135916102ff836105fb565b9261030c855194856105d8565b80845260209236602483830101116103d7578188926024602093018388013785010152610337610666565b6001600160a01b0380971696873b156103d3578451957f4f1ef2860000000000000000000000000000000000000000000000000000000087521690850152826024850152815191826044860152855b8381106103bf5750505082849581606481601f19601f878b85819a860101520116810103019134905af19081156102a257506102925750f35b818101830151868201606401528201610386565b8680fd5b8780fd5b8480fd5b5080fd5b5050346103df57816003193601126103df576001600160a01b0360209254169051908152f35b5090346100fc57806003193601126100fc5782610424610564565b61042c61057f565b610434610666565b6001600160a01b0380921690813b156104985783602492865197889586947f8f28397000000000000000000000000000000000000000000000000000000000865216908401525af19081156102a2575061048c575080f35b61049590610595565b80f35b8380fd5b83346100f957806003193601126100f9576104b5610666565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b915091346103df5760206003193601126103df5781906001600160a01b039384610535610564565b167f5c60da1b0000000000000000000000000000000000000000000000000000000082525afa926100d6610617565b600435906001600160a01b038216820361057a57565b600080fd5b602435906001600160a01b038216820361057a57565b67ffffffffffffffff81116105a957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff8211176105a957604052565b67ffffffffffffffff81116105a957601f01601f191660200190565b3d15610642573d90610628826105fb565b9161063660405193846105d8565b82523d6000602084013e565b606090565b9081602091031261057a57516001600160a01b038116810361057a5790565b6001600160a01b0360005416330361067a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220da9977393a6cb166ef93710c15e38a7d298e4336826e0e59cc9b607da1321ae864736f6c63430008190033604060808152610d1380380380610015816102eb565b9283398101906060818303126102e65761002e81610326565b9160209261003d848401610326565b8584015190936001600160401b0391908282116102e657019280601f850112156102e6578351936100756100708661033a565b6102eb565b94808652878601928882840101116102e65782886100939301610355565b823b1561028c577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b03199081166001600160a01b0386811691821790935590959194600093909290917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a2805115801590610285575b6101df575b50505050507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103937f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f86865493815196818616885216958684820152a1831561018d575016179055516108e7908161042c8239f35b60849086519062461bcd60e51b82526004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8951946060860190811186821017610271578a52602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c89860152660819985a5b195960ca1b8a8601525161025d9493929183918291845af4903d15610268573d61024e6100708261033a565b90815280938a3d92013e610378565b503880808080610119565b60609250610378565b634e487b7160e01b85526041600452602485fd5b5083610114565b865162461bcd60e51b815260048101879052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761031057604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036102e657565b6001600160401b03811161031057601f01601f191660200190565b60005b8381106103685750506000910152565b8181015183820152602001610358565b919290156103da575081511561038c575090565b3b156103955790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103ed5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261041d8151809281602486015260208686019101610355565b601f01601f19168101030190fdfe60806040526004361015610019575b36610460575b610460565b6000803560e01c9081633659cfe61461006c575080634f1ef286146100675780635c60da1b146100625780638f2839701461005d5763f851a4400361000e57610367565b610246565b6101c5565b610109565b346100de5760206003193601126100de576100856100e1565b73ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014576100db906100d26103f9565b90838252610571565b80f35b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010457565b600080fd5b60406003193601126101045761011d6100e1565b60243567ffffffffffffffff9182821161010457366023830112156101045781600401359283116101045736602484840101116101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146000146100145760006020848060246101b16101ac6101c399610444565b61041e565b9682885201838701378401015261068c565b005b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460405191168152602090f35b346101045760206003193601126101045761025f6100e1565b73ffffffffffffffffffffffffffffffffffffffff907fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610391808354163314600014610014577f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f604084549281519481851686521693846020820152a181156102fd5773ffffffffffffffffffffffffffffffffffffffff1916179055005b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61039080825416331460001461001457905460405191168152602090f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761041957604052565b6103ca565b90601f19601f604051930116820182811067ffffffffffffffff82111761041957604052565b67ffffffffffffffff811161041957601f01601f191660200190565b73ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146104e1577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e156104dd573d90f35b3d90fd5b60a460405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f65740000000000000000000000000000000000000000000000000000000000006084820152fd5b803b156106225773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061061a575b610605575050565b61061791610611610727565b91610797565b50565b5060006105fd565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b803b156106225773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061071f57610605575050565b5060016105fd565b604051906060820182811067ffffffffffffffff82111761041957604052602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806107cc9493602081519101845af43d156107cf573d916107bc6101ac84610444565b9283523d6000602085013e610822565b90565b606091610822565b156107de57565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b919290156108425750815115610836575090565b6107cc903b15156107d7565b8251909150156108555750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061089a57505050601f19601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161087756fea2646970667358221220ea74f55bbd38dae667995151af9c5ddc4beac0fe35938eb181ab1ab03796f56864736f6c6343000819003360808060405234601557611222908161001b8239f35b600080fdfe60806040526004361015610019575b36610c43575b610c43565b6000803560e01c635483c8cd14610030575061000e565b3461022b576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8181360112610227576004359167ffffffffffffffff9182841161021b576104009084360301126102235761008c6102bd565b91610099846004016102de565b83526100a760248501610382565b602084015260448401356040840152606484013560608401526100cc60848501610382565b60808401526100dd60a48501610382565b60a084015260c484013560c084015260e484013581811161021f5761010890600436918701016103a9565b60e084015261010484013561010084015261012661012485016102de565b61012084015261014484013590811161021b5761021893610203926101546103e493600436918501016103f0565b90850152610166366101648301610457565b6101608501526101e48101356101808501526102048101356101a08501526102248101356101c085015261019e3661024483016104fe565b6101e08501526103048101356102008501526101bd6103248201610382565b6102208501526101d061034482016105a1565b6102408501526101e361036482016102de565b6102608501526101f73661038483016105af565b61028085015201610382565b6102a0820152610212366105f6565b90610a8f565b80f35b8480fd5b8580fd5b8380fd5b8280fd5b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761027957604052565b61022e565b6040810190811067ffffffffffffffff82111761027957604052565b90601f601f19910116810190811067ffffffffffffffff82111761027957604052565b604051906102c0820182811067ffffffffffffffff82111761027957604052565b359067ffffffffffffffff821682036102f357565b600080fd5b6001600160a01b038116036102f357565b60243590610316826102f8565b565b60443590610316826102f8565b60643590610316826102f8565b60843590610316826102f8565b60a43590610316826102f8565b60c43590610316826102f8565b60e43590610316826102f8565b6101043590610316826102f8565b6101243590610316826102f8565b3590610316826102f8565b67ffffffffffffffff811161027957601f01601f191660200190565b81601f820112156102f3578035906103c08261038d565b926103ce604051948561029a565b828452602083830101116102f357816000926020809301838601378301015290565b81601f820112156102f35780359160209167ffffffffffffffff8411610279578360051b90604051946104258584018761029a565b855283808601928201019283116102f3578301905b828210610448575050505090565b8135815290830190830161043a565b91908260809103126102f3576040516080810181811067ffffffffffffffff8211176102795760405260608082948035845260208101356020850152604081013560408501520135910152565b9080601f830112156102f357604051916104bd8361027e565b8290604081019283116102f357905b8282106104d95750505090565b602080916104e6846102de565b8152019101906104cc565b359060038210156102f357565b91908281039260c084126102f357604051916105198361025d565b60808395126102f3576040519061052f8261027e565b80601f840112156102f3576040516105468161027e565b8060408501918383116102f35785905b8382106105915750506040949284926105729260a096526104a4565b60208201528452610585608082016104f1565b60208501520135910152565b8135815260209182019101610556565b359060ff821682036102f357565b91908260609103126102f3576040516105c78161025d565b60406105f18183956105d8816102de565b85526105e6602082016102de565b6020860152016102de565b910152565b61012091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc0182136102f35760405191820182811067ffffffffffffffff8211176102795760405281610648610309565b8152610652610318565b602082015261065f610325565b604082015261066c610332565b606082015261067961033f565b608082015261068661034c565b60a0820152610693610359565b60c08201526106a0610366565b60e08201526101006105f1610374565b919082519283825260005b8481106106dc575050601f19601f8460006020809697860101520116010190565b6020818301810151848301820152016106bb565b90815180825260208080930193019160005b828110610710575050505090565b835185529381019392810192600101610702565b9060038210156107315752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80518051600090845b600283106107cb57505050602090810151906000604085015b600282106107ac57505050506040816107a5602060a09401516080860190610724565b0151910152565b828060019267ffffffffffffffff875116815201940191019092610782565b600190825181526020809101920192019190610769565b90610316916001600160a01b038082511683528060208301511660208401526040820151166040830152610826606082015160608401906001600160a01b03169052565b6080818101516001600160a01b03169083015260a0818101516001600160a01b03169083015260c0818101516001600160a01b03169083015260e0818101516001600160a01b031690830152610100908101516001600160a01b0316910152565b610140808252825167ffffffffffffffff168282015260208301516001600160a01b0316610160808401919091529194939260408101519161018092838801526060820151906101a091828901526080830151916101c092838a016108f3916001600160a01b03169052565b60a08401516101e090818b01610910916001600160a01b03169052565b60c085015161020090818c015260e08601519161022092838d0161040090526105408d0161093d916106b0565b958c6101008901519561024096878301526101208a0151976102609889840161096e9167ffffffffffffffff169052565b8a0151610280998381037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0018b8501526109a7916106f0565b9b8a01519a6102a09b8c84016109da91606080918051845260208101516020850152604081015160408501520151910152565b8a01516103208301528901519061034001528701516103608d01528601516103808c01610a0691610760565b8501516104408b01528401516001600160a01b03166104608a015283015160ff1661048089015282015167ffffffffffffffff166104a0880152810151805167ffffffffffffffff9081166104c0890152602082015181166104e08901526040909101511661050087015201516001600160a01b031661052085015292602001610316916107e2565b6001600160a01b03807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416159081610c07575b81610bcc575b501561001457610bba82610aea60c06103169501516001600160a01b031690565b92610bc66080604051927ff5296a9a000000000000000000000000000000000000000000000000000000006020850152610b48610b62610b5660e087610b348a8760248401610887565b0398610b48601f199a8b81018b528a61029a565b01516001600160a01b031690565b6001600160a01b031690565b95610b7760208401516001600160a01b031690565b6040517fc4d66de80000000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911660248201529788906044820190565b0390810188528761029a565b93610d36565b610c0091507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d54166001600160a01b031690565b1538610ac9565b9050610c3c817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166001600160a01b031690565b1590610ac3565b60043610610cf2577fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03166001600160a01b03163314610cc2577f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d546001600160a01b03165b610cbd813b1515610f2e565b610f79565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b0316610cb1565b606460405162461bcd60e51b815260206004820152600b60248201527f4e4f5f46554e435f5349470000000000000000000000000000000000000000006044820152fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054906001600160a01b03967f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60408981519381871685521692836020820152a18015610ec4577fffffffffffffffffffffffff0000000000000000000000000000000000000000809316179055813b15610e5a5761031695821690817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610e52575b610e38575b5050610f98565b610e4a91610e446110ab565b9161110a565b503880610e31565b506000610e2c565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610f3557565b606460405162461bcd60e51b815260206004820152601360248201527f5441524745545f4e4f545f434f4e5452414354000000000000000000000000006044820152fd5b6000808092368280378136915af43d82803e15610f94573d90f35b3d90fd5b803b15611041576001600160a01b0381167f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d817fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134600080a2815115801590611039575b61102a575050565b61103691610e446110ab565b50565b506000611022565b608460405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e74726163740000000000000000006064820152fd5b604051906110b88261025d565b602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806111499493602081519101845af43d1561114c573d9161112c8361038d565b9261113a604051948561029a565b83523d6000602085013e611150565b90565b6060915b919290156111b15750815115611164575090565b3b1561116d5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156111c45750805190602001fd5b6111e89060405191829162461bcd60e51b83526020600484015260248301906106b0565b0390fdfea26469706673582212207920f912260b3867a97b1a84cbc5027cd877692bdb1b91e46e071c288ef7687364736f6c63430008190033a2646970667358221220c5538b87cea1259861f8c911f6f17de3e69afb7a6be8402a44422ebff96ff02a64736f6c63430008190033",
}

// RollupCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCreatorMetaData.ABI instead.
var RollupCreatorABI = RollupCreatorMetaData.ABI

// RollupCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupCreatorMetaData.Bin instead.
var RollupCreatorBin = RollupCreatorMetaData.Bin

// DeployRollupCreator deploys a new Ethereum contract, binding an instance of RollupCreator to it.
func DeployRollupCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupCreator, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// RollupCreator is an auto generated Go binding around an Ethereum contract.
type RollupCreator struct {
	RollupCreatorCaller     // Read-only binding to the contract
	RollupCreatorTransactor // Write-only binding to the contract
	RollupCreatorFilterer   // Log filterer for contract events
}

// RollupCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCreatorSession struct {
	Contract     *RollupCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCreatorCallerSession struct {
	Contract *RollupCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RollupCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCreatorTransactorSession struct {
	Contract     *RollupCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RollupCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCreatorRaw struct {
	Contract *RollupCreator // Generic contract binding to access the raw methods on
}

// RollupCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCreatorCallerRaw struct {
	Contract *RollupCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCreatorTransactorRaw struct {
	Contract *RollupCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCreator creates a new instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreator(address common.Address, backend bind.ContractBackend) (*RollupCreator, error) {
	contract, err := bindRollupCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// NewRollupCreatorCaller creates a new read-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorCaller(address common.Address, caller bind.ContractCaller) (*RollupCreatorCaller, error) {
	contract, err := bindRollupCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorCaller{contract: contract}, nil
}

// NewRollupCreatorTransactor creates a new write-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCreatorTransactor, error) {
	contract, err := bindRollupCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTransactor{contract: contract}, nil
}

// NewRollupCreatorFilterer creates a new log filterer instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCreatorFilterer, error) {
	contract, err := bindRollupCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorFilterer{contract: contract}, nil
}

// bindRollupCreator binds a generic wrapper to an already deployed contract.
func bindRollupCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.RollupCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) BridgeCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "bridgeCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ChallengeManagerTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "challengeManagerTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorCaller) L2FactoriesDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "l2FactoriesDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorSession) L2FactoriesDeployer() (common.Address, error) {
	return _RollupCreator.Contract.L2FactoriesDeployer(&_RollupCreator.CallOpts)
}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) L2FactoriesDeployer() (common.Address, error) {
	return _RollupCreator.Contract.L2FactoriesDeployer(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupAdminLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupAdminLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupUserLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupUserLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) UpgradeExecutorLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "upgradeExecutorLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) UpgradeExecutorLogic() (common.Address, error) {
	return _RollupCreator.Contract.UpgradeExecutorLogic(&_RollupCreator.CallOpts)
}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) UpgradeExecutorLogic() (common.Address, error) {
	return _RollupCreator.Contract.UpgradeExecutorLogic(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x8b02b99f.
//
// Solidity: function createRollup(((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address),address[],uint256,address,bool,uint256,address[],address) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorTransactor) CreateRollup(opts *bind.TransactOpts, deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "createRollup", deployParams)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x8b02b99f.
//
// Solidity: function createRollup(((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address),address[],uint256,address,bool,uint256,address[],address) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorSession) CreateRollup(deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, deployParams)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x8b02b99f.
//
// Solidity: function createRollup(((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address),address[],uint256,address,bool,uint256,address[],address) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorTransactorSession) CreateRollup(deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, deployParams)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xf0dae494.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorTransactor) SetTemplates(opts *bind.TransactOpts, _bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "setTemplates", _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorWalletCreator, _l2FactoriesDeployer)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xf0dae494.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorWalletCreator, _l2FactoriesDeployer)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xf0dae494.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorTransactorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorWalletCreator, _l2FactoriesDeployer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorSession) Receive() (*types.Transaction, error) {
	return _RollupCreator.Contract.Receive(&_RollupCreator.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupCreator.Contract.Receive(&_RollupCreator.TransactOpts)
}

// RollupCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferredIterator struct {
	Event *RollupCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RollupCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorOwnershipTransferredIterator{contract: _RollupCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RollupCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorOwnershipTransferred)
				if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*RollupCreatorOwnershipTransferred, error) {
	event := new(RollupCreatorOwnershipTransferred)
	if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupCreator contract.
type RollupCreatorRollupCreatedIterator struct {
	Event *RollupCreatorRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorRollupCreated represents a RollupCreated event raised by the RollupCreator contract.
type RollupCreatorRollupCreated struct {
	RollupAddress          common.Address
	NativeToken            common.Address
	InboxAddress           common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	AdminProxy             common.Address
	SequencerInbox         common.Address
	Bridge                 common.Address
	UpgradeExecutor        common.Address
	ValidatorWalletCreator common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0xd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) FilterRollupCreated(opts *bind.FilterOpts, rollupAddress []common.Address, nativeToken []common.Address) (*RollupCreatorRollupCreatedIterator, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}
	var nativeTokenRule []interface{}
	for _, nativeTokenItem := range nativeToken {
		nativeTokenRule = append(nativeTokenRule, nativeTokenItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "RollupCreated", rollupAddressRule, nativeTokenRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorRollupCreatedIterator{contract: _RollupCreator.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0xd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupCreatorRollupCreated, rollupAddress []common.Address, nativeToken []common.Address) (event.Subscription, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}
	var nativeTokenRule []interface{}
	for _, nativeTokenItem := range nativeToken {
		nativeTokenRule = append(nativeTokenRule, nativeTokenItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "RollupCreated", rollupAddressRule, nativeTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorRollupCreated)
				if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0xd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) ParseRollupCreated(log types.Log) (*RollupCreatorRollupCreated, error) {
	event := new(RollupCreatorRollupCreated)
	if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdatedIterator struct {
	Event *RollupCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*RollupCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTemplatesUpdatedIterator{contract: _RollupCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *RollupCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorTemplatesUpdated)
				if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*RollupCreatorTemplatesUpdated, error) {
	event := new(RollupCreatorTemplatesUpdated)
	if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxMetaData contains all meta data concerning the RollupEventInbox contract.
var RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a08060405234602257306080526108d090816100288239608051816104b10152f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182636ae71f121461064e57508163c4d66de814610478578163cb23bcb514610443578163cf8d56d614610091575063e78cea921461005c57600080fd5b3461008d578160031936011261008d5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b8391503461008d578260031936011261008d5760249267ffffffffffffffff9184358381116102d457366023820112156102d457808201359084821161043f573687838301011161043f5773ffffffffffffffffffffffffffffffffffffffff90816001541633036103fd5782156103bb57489285519688602098898101907f051038f2000000000000000000000000000000000000000000000000000000008252888152898101818110858211176103a9578a5251829160645afa903d156103a0573d90811161038e5787518991610173601f8201601f1916840183610830565b81523d8b8383013e5b82610383575b50506102e9575b91869391838a999a9694885197889388850196883588528b86017f01000000000000000000000000000000000000000000000000000000000000009052604186015201606184013781018a6061820152036041810186526061016101ed9086610830565b88541690845190208886519889947f8db5993b0000000000000000000000000000000000000000000000000000000086528501600b9052840152604483015281885a92606493f19384156102df5785946102ac575b508151928084528151918282860152865b838110610299575050509082601f19601f84888585977fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b9901015201168101030190a280f35b8181018301518682018601528201610253565b9093508281813d83116102d8575b6102c48183610830565b810103126102d457519285610242565b8480fd5b503d6102ba565b82513d87823e3d90fd5b925084517ff5d6ded700000000000000000000000000000000000000000000000000000000815286818681606c5afa908115610379578891610348575b5048018048116103365792610189565b8888601187634e487b7160e01b835252fd5b90508681813d8311610372575b61035f8183610830565b8101031261036e575189610326565b8780fd5b503d610355565b86513d8a823e3d90fd5b51149050878b610182565b8a8a604189634e487b7160e01b835252fd5b5087606061017c565b8d8460418c634e487b7160e01b835252fd5b60648460128a602089519362461bcd60e51b85528401528201527f454d5054595f434841494e5f434f4e46494700000000000000000000000000006044820152fd5b606484600b8a602089519362461bcd60e51b85528401528201527f4f4e4c595f524f4c4c55500000000000000000000000000000000000000000006044820152fd5b8580fd5b50503461008d578160031936011261008d5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b90503461064a57602060031936011261064a5780359173ffffffffffffffffffffffffffffffffffffffff918284168094036102d457827f00000000000000000000000000000000000000000000000000000000000000001630146105e2578454938385166105ba57801561059257806020917fffffffffffffffffffffffff00000000000000000000000000000000000000008097161787558351928380927fcb23bcb50000000000000000000000000000000000000000000000000000000082525afa9182156105895750849161055a575b501690600154161760015580f35b61057c915060203d602011610582575b6105748183610830565b810190610869565b3861054c565b503d61056a565b513d86823e3d90fd5b5090517f1ad0f743000000000000000000000000000000000000000000000000000000008152fd5b5090517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b6020608492519162461bcd60e51b8352820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b8280fd5b9291503461082c578360031936011261082c576001549173ffffffffffffffffffffffffffffffffffffffff808416947f8da5cb5b00000000000000000000000000000000000000000000000000000000808252602091828187818b5afa908115610822579084918a91610805575b5016330361078757508381838954168551928380927fcb23bcb50000000000000000000000000000000000000000000000000000000082525afa91821561077d578892610760575b50501680941461073a5750507fffffffffffffffffffffffff0000000000000000000000000000000000000000161760015580f35b517fd054909f000000000000000000000000000000000000000000000000000000008152fd5b6107769250803d10610582576105748183610830565b3880610705565b84513d8a823e3d90fd5b8482959793965084518094819382525afa9283156107fb57604496936107dc575b505051927f23295f0e0000000000000000000000000000000000000000000000000000000084523390840152166024820152fd5b6107f3929350803d10610582576105748183610830565b9038806107a8565b82513d88823e3d90fd5b61081c9150843d8611610582576105748183610830565b386106bd565b85513d8b823e3d90fd5b8380fd5b90601f601f19910116810190811067ffffffffffffffff82111761085357604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610895575173ffffffffffffffffffffffffffffffffffffffff811681036108955790565b600080fdfea2646970667358221220f396b78a37779ba96de081100a0fda4aff696aac012e9ba3e15668d0e2c79d6464736f6c63430008190033",
}

// RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupEventInboxMetaData.ABI instead.
var RollupEventInboxABI = RollupEventInboxMetaData.ABI

// RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupEventInboxMetaData.Bin instead.
var RollupEventInboxBin = RollupEventInboxMetaData.Bin

// DeployRollupEventInbox deploys a new Ethereum contract, binding an instance of RollupEventInbox to it.
func DeployRollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupEventInbox, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type RollupEventInbox struct {
	RollupEventInboxCaller     // Read-only binding to the contract
	RollupEventInboxTransactor // Write-only binding to the contract
	RollupEventInboxFilterer   // Log filterer for contract events
}

// RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupEventInboxSession struct {
	Contract     *RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupEventInboxCallerSession struct {
	Contract *RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupEventInboxTransactorSession struct {
	Contract     *RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupEventInboxRaw struct {
	Contract *RollupEventInbox // Generic contract binding to access the raw methods on
}

// RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupEventInboxCallerRaw struct {
	Contract *RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactorRaw struct {
	Contract *RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupEventInbox creates a new instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInbox(address common.Address, backend bind.ContractBackend) (*RollupEventInbox, error) {
	contract, err := bindRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// NewRollupEventInboxCaller creates a new read-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*RollupEventInboxCaller, error) {
	contract, err := bindRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxCaller{contract: contract}, nil
}

// NewRollupEventInboxTransactor creates a new write-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupEventInboxTransactor, error) {
	contract, err := bindRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxTransactor{contract: contract}, nil
}

// NewRollupEventInboxFilterer creates a new log filterer instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupEventInboxFilterer, error) {
	contract, err := bindRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxFilterer{contract: contract}, nil
}

// bindRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDelivered)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*RollupEventInboxInboxMessageDelivered, error) {
	event := new(RollupEventInboxInboxMessageDelivered)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupLibMetaData contains all meta data concerning the RollupLib contract.
var RollupLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202bc925f2e71b9a56bd4f6e943f4d310ea3f474eeba784f05b1dbcd6564b83f8f64736f6c63430008190033",
}

// RollupLibABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupLibMetaData.ABI instead.
var RollupLibABI = RollupLibMetaData.ABI

// RollupLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupLibMetaData.Bin instead.
var RollupLibBin = RollupLibMetaData.Bin

// DeployRollupLib deploys a new Ethereum contract, binding an instance of RollupLib to it.
func DeployRollupLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupLib, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// RollupLib is an auto generated Go binding around an Ethereum contract.
type RollupLib struct {
	RollupLibCaller     // Read-only binding to the contract
	RollupLibTransactor // Write-only binding to the contract
	RollupLibFilterer   // Log filterer for contract events
}

// RollupLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupLibSession struct {
	Contract     *RollupLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupLibCallerSession struct {
	Contract *RollupLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RollupLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupLibTransactorSession struct {
	Contract     *RollupLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RollupLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupLibRaw struct {
	Contract *RollupLib // Generic contract binding to access the raw methods on
}

// RollupLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupLibCallerRaw struct {
	Contract *RollupLibCaller // Generic read-only contract binding to access the raw methods on
}

// RollupLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupLibTransactorRaw struct {
	Contract *RollupLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupLib creates a new instance of RollupLib, bound to a specific deployed contract.
func NewRollupLib(address common.Address, backend bind.ContractBackend) (*RollupLib, error) {
	contract, err := bindRollupLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// NewRollupLibCaller creates a new read-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibCaller(address common.Address, caller bind.ContractCaller) (*RollupLibCaller, error) {
	contract, err := bindRollupLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibCaller{contract: contract}, nil
}

// NewRollupLibTransactor creates a new write-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupLibTransactor, error) {
	contract, err := bindRollupLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibTransactor{contract: contract}, nil
}

// NewRollupLibFilterer creates a new log filterer instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupLibFilterer, error) {
	contract, err := bindRollupLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupLibFilterer{contract: contract}, nil
}

// bindRollupLib binds a generic wrapper to an already deployed contract.
func bindRollupLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.RollupLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transact(opts, method, params...)
}

// RollupProxyMetaData contains all meta data concerning the RollupProxy contract.
var RollupProxyMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumAssertionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"validatorAfkBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"espressoTEEVerifier\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60808060405234601557611222908161001b8239f35b600080fdfe60806040526004361015610019575b36610c43575b610c43565b6000803560e01c635483c8cd14610030575061000e565b3461022b576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8181360112610227576004359167ffffffffffffffff9182841161021b576104009084360301126102235761008c6102bd565b91610099846004016102de565b83526100a760248501610382565b602084015260448401356040840152606484013560608401526100cc60848501610382565b60808401526100dd60a48501610382565b60a084015260c484013560c084015260e484013581811161021f5761010890600436918701016103a9565b60e084015261010484013561010084015261012661012485016102de565b61012084015261014484013590811161021b5761021893610203926101546103e493600436918501016103f0565b90850152610166366101648301610457565b6101608501526101e48101356101808501526102048101356101a08501526102248101356101c085015261019e3661024483016104fe565b6101e08501526103048101356102008501526101bd6103248201610382565b6102208501526101d061034482016105a1565b6102408501526101e361036482016102de565b6102608501526101f73661038483016105af565b61028085015201610382565b6102a0820152610212366105f6565b90610a8f565b80f35b8480fd5b8580fd5b8380fd5b8280fd5b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761027957604052565b61022e565b6040810190811067ffffffffffffffff82111761027957604052565b90601f601f19910116810190811067ffffffffffffffff82111761027957604052565b604051906102c0820182811067ffffffffffffffff82111761027957604052565b359067ffffffffffffffff821682036102f357565b600080fd5b6001600160a01b038116036102f357565b60243590610316826102f8565b565b60443590610316826102f8565b60643590610316826102f8565b60843590610316826102f8565b60a43590610316826102f8565b60c43590610316826102f8565b60e43590610316826102f8565b6101043590610316826102f8565b6101243590610316826102f8565b3590610316826102f8565b67ffffffffffffffff811161027957601f01601f191660200190565b81601f820112156102f3578035906103c08261038d565b926103ce604051948561029a565b828452602083830101116102f357816000926020809301838601378301015290565b81601f820112156102f35780359160209167ffffffffffffffff8411610279578360051b90604051946104258584018761029a565b855283808601928201019283116102f3578301905b828210610448575050505090565b8135815290830190830161043a565b91908260809103126102f3576040516080810181811067ffffffffffffffff8211176102795760405260608082948035845260208101356020850152604081013560408501520135910152565b9080601f830112156102f357604051916104bd8361027e565b8290604081019283116102f357905b8282106104d95750505090565b602080916104e6846102de565b8152019101906104cc565b359060038210156102f357565b91908281039260c084126102f357604051916105198361025d565b60808395126102f3576040519061052f8261027e565b80601f840112156102f3576040516105468161027e565b8060408501918383116102f35785905b8382106105915750506040949284926105729260a096526104a4565b60208201528452610585608082016104f1565b60208501520135910152565b8135815260209182019101610556565b359060ff821682036102f357565b91908260609103126102f3576040516105c78161025d565b60406105f18183956105d8816102de565b85526105e6602082016102de565b6020860152016102de565b910152565b61012091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc0182136102f35760405191820182811067ffffffffffffffff8211176102795760405281610648610309565b8152610652610318565b602082015261065f610325565b604082015261066c610332565b606082015261067961033f565b608082015261068661034c565b60a0820152610693610359565b60c08201526106a0610366565b60e08201526101006105f1610374565b919082519283825260005b8481106106dc575050601f19601f8460006020809697860101520116010190565b6020818301810151848301820152016106bb565b90815180825260208080930193019160005b828110610710575050505090565b835185529381019392810192600101610702565b9060038210156107315752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80518051600090845b600283106107cb57505050602090810151906000604085015b600282106107ac57505050506040816107a5602060a09401516080860190610724565b0151910152565b828060019267ffffffffffffffff875116815201940191019092610782565b600190825181526020809101920192019190610769565b90610316916001600160a01b038082511683528060208301511660208401526040820151166040830152610826606082015160608401906001600160a01b03169052565b6080818101516001600160a01b03169083015260a0818101516001600160a01b03169083015260c0818101516001600160a01b03169083015260e0818101516001600160a01b031690830152610100908101516001600160a01b0316910152565b610140808252825167ffffffffffffffff168282015260208301516001600160a01b0316610160808401919091529194939260408101519161018092838801526060820151906101a091828901526080830151916101c092838a016108f3916001600160a01b03169052565b60a08401516101e090818b01610910916001600160a01b03169052565b60c085015161020090818c015260e08601519161022092838d0161040090526105408d0161093d916106b0565b958c6101008901519561024096878301526101208a0151976102609889840161096e9167ffffffffffffffff169052565b8a0151610280998381037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0018b8501526109a7916106f0565b9b8a01519a6102a09b8c84016109da91606080918051845260208101516020850152604081015160408501520151910152565b8a01516103208301528901519061034001528701516103608d01528601516103808c01610a0691610760565b8501516104408b01528401516001600160a01b03166104608a015283015160ff1661048089015282015167ffffffffffffffff166104a0880152810151805167ffffffffffffffff9081166104c0890152602082015181166104e08901526040909101511661050087015201516001600160a01b031661052085015292602001610316916107e2565b6001600160a01b03807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416159081610c07575b81610bcc575b501561001457610bba82610aea60c06103169501516001600160a01b031690565b92610bc66080604051927ff5296a9a000000000000000000000000000000000000000000000000000000006020850152610b48610b62610b5660e087610b348a8760248401610887565b0398610b48601f199a8b81018b528a61029a565b01516001600160a01b031690565b6001600160a01b031690565b95610b7760208401516001600160a01b031690565b6040517fc4d66de80000000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911660248201529788906044820190565b0390810188528761029a565b93610d36565b610c0091507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d54166001600160a01b031690565b1538610ac9565b9050610c3c817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166001600160a01b031690565b1590610ac3565b60043610610cf2577fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03166001600160a01b03163314610cc2577f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d546001600160a01b03165b610cbd813b1515610f2e565b610f79565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b0316610cb1565b606460405162461bcd60e51b815260206004820152600b60248201527f4e4f5f46554e435f5349470000000000000000000000000000000000000000006044820152fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054906001600160a01b03967f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60408981519381871685521692836020820152a18015610ec4577fffffffffffffffffffffffff0000000000000000000000000000000000000000809316179055813b15610e5a5761031695821690817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610e52575b610e38575b5050610f98565b610e4a91610e446110ab565b9161110a565b503880610e31565b506000610e2c565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610f3557565b606460405162461bcd60e51b815260206004820152601360248201527f5441524745545f4e4f545f434f4e5452414354000000000000000000000000006044820152fd5b6000808092368280378136915af43d82803e15610f94573d90f35b3d90fd5b803b15611041576001600160a01b0381167f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d817fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134600080a2815115801590611039575b61102a575050565b61103691610e446110ab565b50565b506000611022565b608460405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e74726163740000000000000000006064820152fd5b604051906110b88261025d565b602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806111499493602081519101845af43d1561114c573d9161112c8361038d565b9261113a604051948561029a565b83523d6000602085013e611150565b90565b6060915b919290156111b15750815115611164575090565b3b1561116d5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156111c45750805190602001fd5b6111e89060405191829162461bcd60e51b83526020600484015260248301906106b0565b0390fdfea26469706673582212207920f912260b3867a97b1a84cbc5027cd877692bdb1b91e46e071c288ef7687364736f6c63430008190033",
}

// RollupProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupProxyMetaData.ABI instead.
var RollupProxyABI = RollupProxyMetaData.ABI

// RollupProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupProxyMetaData.Bin instead.
var RollupProxyBin = RollupProxyMetaData.Bin

// DeployRollupProxy deploys a new Ethereum contract, binding an instance of RollupProxy to it.
func DeployRollupProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupProxy, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// RollupProxy is an auto generated Go binding around an Ethereum contract.
type RollupProxy struct {
	RollupProxyCaller     // Read-only binding to the contract
	RollupProxyTransactor // Write-only binding to the contract
	RollupProxyFilterer   // Log filterer for contract events
}

// RollupProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupProxySession struct {
	Contract     *RollupProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupProxyCallerSession struct {
	Contract *RollupProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RollupProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupProxyTransactorSession struct {
	Contract     *RollupProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RollupProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupProxyRaw struct {
	Contract *RollupProxy // Generic contract binding to access the raw methods on
}

// RollupProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupProxyCallerRaw struct {
	Contract *RollupProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RollupProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupProxyTransactorRaw struct {
	Contract *RollupProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupProxy creates a new instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxy(address common.Address, backend bind.ContractBackend) (*RollupProxy, error) {
	contract, err := bindRollupProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// NewRollupProxyCaller creates a new read-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyCaller(address common.Address, caller bind.ContractCaller) (*RollupProxyCaller, error) {
	contract, err := bindRollupProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyCaller{contract: contract}, nil
}

// NewRollupProxyTransactor creates a new write-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupProxyTransactor, error) {
	contract, err := bindRollupProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyTransactor{contract: contract}, nil
}

// NewRollupProxyFilterer creates a new log filterer instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupProxyFilterer, error) {
	contract, err := bindRollupProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupProxyFilterer{contract: contract}, nil
}

// bindRollupProxy binds a generic wrapper to an already deployed contract.
func bindRollupProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.RollupProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transact(opts, method, params...)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0x5483c8cd.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactor) InitializeProxy(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.contract.Transact(opts, "initializeProxy", config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0x5483c8cd.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxySession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0x5483c8cd.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256,uint64,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64),address) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactorSession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxySession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// RollupProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupProxy contract.
type RollupProxyAdminChangedIterator struct {
	Event *RollupProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyAdminChanged represents a AdminChanged event raised by the RollupProxy contract.
type RollupProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupProxyAdminChangedIterator, error) {

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupProxyAdminChangedIterator{contract: _RollupProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyAdminChanged)
				if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) ParseAdminChanged(log types.Log) (*RollupProxyAdminChanged, error) {
	event := new(RollupProxyAdminChanged)
	if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupProxy contract.
type RollupProxyBeaconUpgradedIterator struct {
	Event *RollupProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyBeaconUpgraded represents a BeaconUpgraded event raised by the RollupProxy contract.
type RollupProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyBeaconUpgradedIterator{contract: _RollupProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyBeaconUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) ParseBeaconUpgraded(log types.Log) (*RollupProxyBeaconUpgraded, error) {
	event := new(RollupProxyBeaconUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupProxy contract.
type RollupProxyUpgradedIterator struct {
	Event *RollupProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgraded represents a Upgraded event raised by the RollupProxy contract.
type RollupProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedIterator{contract: _RollupProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgraded(log types.Log) (*RollupProxyUpgraded, error) {
	event := new(RollupProxyUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupProxy contract.
type RollupProxyUpgradedSecondaryIterator struct {
	Event *RollupProxyUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgradedSecondary represents a UpgradedSecondary event raised by the RollupProxy contract.
type RollupProxyUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedSecondaryIterator{contract: _RollupProxy.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgradedSecondary)
				if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgradedSecondary(log types.Log) (*RollupProxyUpgradedSecondary, error) {
	event := new(RollupProxyUpgradedSecondary)
	if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicMetaData contains all meta data concerning the RollupUserLogic contract.
var RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedWithdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"computeAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"}],\"name\":\"newStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAfkBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040526200000e6200002f565b15156080523060a0524660c0523480156200002857600080fd5b50620000fd565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b1790529051600091829182916064916200006f9190620000cc565b600060405180830381855afa9150503d8060008114620000ac576040519150601f19603f3d011682016040523d82523d6000602084013e620000b1565b606091505b5091509150818015620000c5575080516020145b9250505090565b6000825160005b81811015620000ef5760208186018101518583015201620000d3565b506000920191825250919050565b60805160a05160c05161424962000142600039600061182a01526000818161120e01528181611897015261191c015260008181610c0e015261289201526142496000f3fe608060405234801561001057600080fd5b50600436106102c45760003560e01c806365f7f80d1161017957806365f7f80d1461052157806368129b1414610529578063685f5ecc1461053c5780636ddd37441461054f57806371ef232c146105625780637300201c1461056b57806376e7e23b1461057e57806384728cd014610587578063883028841461059a5780638da5cb5b146105ba5780638ee1a126146105c25780639a8a0592146105cb578063a23c44b1146105d4578063aa38a6e7146106cd578063b7ab4db5146106e0578063bc45e0ae146106f5578063c2c2e68e14610708578063c4d66de814610710578063ce11e6ab14610723578063dff6978714610736578063e51019a61461073e578063e531d8c714610751578063e6b3082c14610764578063e78cea921461077e578063e8bd492214610791578063ee35f32714610825578063ef40a6701461082d578063f065de3f14610840578063facd743b14610853578063fb0e722b1461086657600080fd5b8063023a96fe146102c957806304972af9146102f957806310b98a351461030e578063117155851461032157806312ab3d3b1461034c57806313c56ca71461036957806318baaab91461038a5780631b1689e9146103925780631e83d30f1461039b5780632abdd230146103ae5780632e7acfa6146103c15780632f30cabd146103d457806330836228146103fd57806333635fc214610410578063353325e0146104235780633b86de191461042b5780633be680ea1461043e57806345e38b641461045857806350f32f681461046157806351ed6a301461047457806352d1902d1461048757806355840a581461048f57806356bbc9e6146104a757806357ef4ab9146104ba578063588c7a16146104c25780635c975abb146104d55780636096686d146104e057806361373919146104f35780636177fd18146104fb5780636420fb9f1461050e575b600080fd5b6069546102dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61030c6103073660046136df565b610879565b005b61030c61031c36600461371e565b610893565b61033461032f36600461377c565b610bef565b6040516001600160401b0390911681526020016102f0565b607b546103599060ff1681565b60405190151581526020016102f0565b61037c61037736600461377c565b610c0a565b6040519081526020016102f0565b61030c610d3f565b61037c607a5481565b61030c6103a936600461377c565b610db9565b61037c6103bc3660046137aa565b610e0e565b606654610334906001600160401b031681565b61037c6103e23660046137aa565b6001600160a01b031660009081526078602052604090205490565b61035961040b36600461377c565b610e2c565b61037c61041e3660046137c7565b610e48565b61037c610e6b565b61030c610439366004613811565b610ea7565b60695461033490600160a01b90046001600160401b031681565b61037c60715481565b61030c61046f36600461383e565b6111b8565b6070546102dc906001600160a01b031681565b61037c611201565b607b546102dc9061010090046001600160a01b031681565b6103346104b536600461377c565b6112c4565b61030c6112e6565b61030c6104d03660046137aa565b61132f565b60335460ff16610359565b61030c6104ee36600461388a565b6113d7565b61037c61143f565b6103596105093660046137aa565b6114b9565b61030c61051c366004613811565b6114e1565b60745461037c565b61030c6105373660046138ca565b61167d565b61030c61054a3660046138fa565b6116c4565b6102dc61055d366004613950565b6116e0565b61037c60795481565b61030c61057936600461396d565b611719565b61037c60675481565b6102dc6105953660046137aa565b611725565b6105ad6105a836600461377c565b61174d565b6040516102f091906139d9565b6102dc6117ee565b61037c60685481565b61037c60655481565b61067c6105e23660046137aa565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260776020908152604091829020825160a08101845281548152600182015492810192909252600201546001600160401b0381169282019290925260ff600160401b83041615156060820152600160481b909104909116608082015290565b6040516102f0919081518152602080830151908201526040808301516001600160401b0316908201526060808301511515908201526080918201516001600160a01b03169181019190915260a00190565b606d546102dc906001600160a01b031681565b6106e86117f8565b6040516102f09190613a39565b606e546102dc906001600160a01b031681565b61030c611804565b61030c61071e3660046137aa565b61188d565b606c546102dc906001600160a01b031681565b607654610334565b61030c61074c366004613a86565b611a00565b61035961075f36600461377c565b611a60565b60665461033490600160401b90046001600160401b031681565b606b546102dc906001600160a01b031681565b6107e661079f3660046137aa565b6077602052600090815260409020805460018201546002909201549091906001600160401b03811690600160401b810460ff1690600160481b90046001600160a01b031685565b6040805195865260208601949094526001600160401b039092169284019290925290151560608301526001600160a01b0316608082015260a0016102f0565b6102dc611a90565b61037c61083b3660046137aa565b611afe565b606f546102dc906001600160a01b031681565b6103596108613660046137aa565b611b19565b606a546102dc906001600160a01b031681565b61088f8161088684611b26565b60010154611b85565b5050565b3361089f607282611c09565b806108ac5750607b5460ff165b6108d15760405162461bcd60e51b81526004016108c890613ac4565b60405180910390fd5b6108d9611c2e565b60006108e488611b26565b905060006108f188611b26565b9050610901858260010154611b85565b6109116080860160608701613950565b825461092d9190600160801b90046001600160401b0316613b01565b6001600160401b03164310156109775760405162461bcd60e51b815260206004820152600f60248201526e4245464f52455f444541444c494e4560881b60448201526064016108c8565b60745488146109c45760405162461bcd60e51b81526020600482015260196024820152781414915597d393d517d310551154d517d0d3d3919254935151603a1b60448201526064016108c8565b8054600160401b90046001600160401b031615610bd85760006109ed60608701604088016137aa565b6001600160a01b031663fda2892e886040518263ffffffff1660e01b8152600401610a1a91815260200190565b6101e060405180830381865afa158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190613bc8565b9050898160e0015114610a9e5760405162461bcd60e51b815260206004820152600a6024820152692727aa2faba4a72722a960b11b60448201526064016108c8565b60018161016001516001811115610ab757610ab76139a5565b14610af95760405162461bcd60e51b8152602060048201526012602482015271115111d157d393d517d0d3d391925493515160721b60448201526064016108c8565b8061014001516001600160401b0316600003610b515760405162461bcd60e51b81526020600482015260176024820152765a45524f5f434f4e4649524d45445f41545f424c4f434b60481b60448201526064016108c8565b606954610140820151610b7491600160a01b90046001600160401b031690613b01565b6001600160401b0316431015610bd65760405162461bcd60e51b815260206004820152602160248201527f4348414c4c454e47455f47524143455f504552494f445f4e4f545f50415353456044820152601160fa1b60648201526084016108c8565b505b610be489898987611c76565b505050505050505050565b6000610bfa82611b26565b546001600160401b031692915050565b60007f000000000000000000000000000000000000000000000000000000000000000015610c83576000828152607c602052604090205480610c7d5760405162461bcd60e51b815260206004820152600c60248201526b2727afa0a9a9a2a92a24a7a760a11b60448201526064016108c8565b92915050565b6000610c8e83611b26565b6040805160c08101825282546001600160401b038082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b8304811615156060830152929350610d2392909184916080840191600160c81b9004166002811115610cff57610cff6139a5565b6002811115610d1057610d106139a5565b8152602001600182015481525050611e20565b54600160801b90046001600160401b031692915050565b919050565b607b5460ff1615610d625760405162461bcd60e51b81526004016108c890613cb2565b610d6a611e7b565b610daa5760405162461bcd60e51b815260206004820152601160248201527056414c494441544f525f4e4f545f41464b60781b60448201526064016108c8565b607b805460ff19166001179055565b33610dc5607282611c09565b80610dd25750607b5460ff165b610dee5760405162461bcd60e51b81526004016108c890613ac4565b610df6611c2e565b610dff33611fa9565b610e093383612047565b505050565b6001600160a01b031660009081526077602052604090206001015490565b6000610e3782611b26565b54600160c01b900460ff1692915050565b6000610e6384610e5d36869003860186613de0565b84612123565b949350505050565b6000610e7561364e565b604080516060810182528281526001602082015260009181018290529080610e9e818481612123565b94505050505090565b33610eb3607282611c09565b80610ec05750607b5460ff165b610edc5760405162461bcd60e51b81526004016108c890613ac4565b610ee4611c2e565b811580610f1557506000610ef783611b26565b54600160c81b900460ff166002811115610f1357610f136139a5565b145b610f5b5760405162461bcd60e51b815260206004820152601760248201527622ac2822a1aa22a22fa0a9a9a2a92a24a7a72fa9a2a2a760491b60448201526064016108c8565b610f64336114b9565b610f805760405162461bcd60e51b81526004016108c890613e46565b6060830135610f8e33611afe565b1015610fd15760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f5354414b4560701b60448201526064016108c8565b6000610ff48435610fea36879003870160e08801613de0565b6020870135612123565b905061106c61100282611b26565b6040805160c08101825282546001600160401b038082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b909104166002811115610cff57610cff6139a5565b600061107733610e0e565b9050818114806110995750600061108d82611b26565b546001600160401b0316115b6110e05760405162461bcd60e51b81526020600482015260186024820152770a6a882968a88be9e9cbe829c9ea8908aa4be84a4829c86960431b60448201526064016108c8565b6000806110ee878588612167565b33600090815260776020526040902060010182905590925090508061117657600061111885611b26565b5461113390600160801b90046001600160401b031643613e6a565b90506071548110156111745760405162461bcd60e51b815260206004820152600a60248201526954494d455f44454c544160b01b60448201526064016108c8565b505b61117f82611b26565b54600160c01b900460ff166111af57606f546070546111af916001600160a01b03918216911660608a0135612935565b50505050505050565b6001600160a01b0381166111de5760405162461bcd60e51b81526004016108c890613e7d565b6111e88482612998565b6111f28383610ea7565b6111fb84612a27565b50505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461129f5760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527a18d85b1b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b602a1b60648201526084016108c8565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b60006112cf82611b26565b54600160401b90046001600160401b031692915050565b336112f2607282611c09565b806112ff5750607b5460ff165b61131b5760405162461bcd60e51b81526004016108c890613ac4565b611323611c2e565b61132c33612a3f565b50565b8061133b607282611c09565b806113485750607b5460ff165b6113645760405162461bcd60e51b81526004016108c890613ac4565b61136c611c2e565b61137582611725565b6001600160a01b0316336001600160a01b0316146113ce5760405162461bcd60e51b81526020600482015260166024820152754e4f545f5749544844524157414c5f4144445245535360501b60448201526064016108c8565b61088f82612a3f565b6113df611c2e565b607b5461010090046001600160a01b031633146114335760405162461bcd60e51b81526020600482015260126024820152712727aa2fa320a9aa2fa1a7a72324a926a2a960711b60448201526064016108c8565b6111fb84848484611c76565b6000611449611c2e565b600061145433612a51565b90506000811161149d5760405162461bcd60e51b81526020600482015260146024820152734e4f5f46554e44535f544f5f574954484452415760601b60448201526064016108c8565b6070546114b4906001600160a01b03163383612935565b905090565b6001600160a01b0316600090815260776020526040902060020154600160401b900460ff1690565b6114e9611c2e565b806115305760405162461bcd60e51b815260206004820152601760248201527608ab0a08a86a88a88be82a6a68aa4a8929e9cbe9082a69604b1b60448201526064016108c8565b600061153b82611b26565b54600160c81b900460ff16905060006115618435610fea36879003870160e08801613de0565b905061156f61100282611b26565b6000826002811115611583576115836139a5565b036115d3576000611595858386612167565b5090506115a181611b26565b54600160c01b900460ff166115d157606f546070546115d1916001600160a01b0391821691166060880135612935565b505b606b546111fb90849083906101a08801906001600160a01b03166316bf5579600161160b611606368d90038d0186613eaf565b612ad2565b6116159190613ecb565b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401602060405180830381865afa158015611659573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190613eeb565b611685611c2e565b6001600160a01b0381166116ab5760405162461bcd60e51b81526004016108c890613e7d565b6116b58282612998565b811561088f5761088f82612a27565b6116cc611c2e565b6116d7838383612ae7565b610e0981612a27565b60006076826001600160401b0316815481106116fe576116fe613f04565b6000918252602090912001546001600160a01b031692915050565b610e09838383336111b8565b6001600160a01b03908116600090815260776020526040902060020154600160481b90041690565b611755613673565b61175e82611b26565b6040805160c08101825282546001600160401b038082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b9091041660028111156117c8576117c86139a5565b60028111156117d9576117d96139a5565b81526020016001820154815250509050919050565b60006114b4612bb7565b60606114b46072612bea565b607b5460ff16156118275760405162461bcd60e51b81526004016108c890613cb2565b467f000000000000000000000000000000000000000000000000000000000000000003610daa5760405162461bcd60e51b815260206004820152601460248201527310d210525397d25117d393d517d0d2105391d15160621b60448201526064016108c8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361191a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016108c8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661194c612bf7565b6001600160a01b0316146119b75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016108c8565b6001600160a01b03811661132c5760405162461bcd60e51b815260206004820152601060248201526f2722a2a22fa9aa20a5a2afaa27a5a2a760811b60448201526064016108c8565b611a1982611a1336869003860186613de0565b83612123565b84146111fb5760405162461bcd60e51b81526020600482015260166024820152750929cac82989288be82a6a68aa4a8929e9cbe9082a6960531b60448201526064016108c8565b60006001611a6d83611b26565b54600160c81b900460ff166002811115611a8957611a896139a5565b1492915050565b606b546040805163ee35f32760e01b815290516000926001600160a01b03169163ee35f3279160048083019260209291908290030181865afa158015611ada573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b49190613f1a565b6001600160a01b031660009081526077602052604090205490565b6000610c7d607283611c09565b600081611b735760405162461bcd60e51b815260206004820152601b60248201527a415353455254494f4e5f49445f43414e4e4f545f42455f5a45524f60281b60448201526064016108c8565b50600090815260756020526040902090565b611bc482356020840135611b9f60608601604087016137aa565b611baf6080870160608801613950565b611bbf60a0880160808901613950565b612c1f565b811461088f5760405162461bcd60e51b81526020600482015260146024820152730869e9c8c928ebe9082a690be9a92a69a82a886960631b60448201526064016108c8565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60335460ff1615611c745760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108c8565b565b6000611c8185611b26565b905060018154600160c81b900460ff166002811115611ca257611ca26139a5565b14611cdd5760405162461bcd60e51b815260206004820152600b60248201526a4e4f545f50454e44494e4760a81b60448201526064016108c8565b611cf084610e5d36869003860186613de0565b8514611d2d5760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b60448201526064016108c8565b6000611d46611d4136869003860186613eaf565b612c7f565b90506000611d61611d5c36879003870187613eaf565b612c8a565b606c54604051630502677360e51b815260048101839052602481018590529192506001600160a01b03169063a04cee6090604401600060405180830381600087803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b505050607488905550825460ff60c81b1916600160c91b1783556040805183815260208101839052815189927ffc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c928290030190a250505050505050565b600081608001516002811115611e3857611e386139a5565b0361132c5760405162461bcd60e51b81526020600482015260136024820152721054d4d154951253d397d393d517d1561254d5606a1b60448201526064016108c8565b600080611e8f611e8a60745490565b611b26565b6040805160c08101825282546001600160401b038082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b909104166002811115611ef957611ef96139a5565b6002811115611f0a57611f0a6139a5565b815260019190910154602090910152606654909150600160401b90046001600160401b03166000819003611f415760009250505090565b81604001516001600160401b0316600003611f5f5760009250505090565b81516001600160401b031615611f8f5781514390611f879083906001600160401b0316613f37565b109250505090565b438183604001516001600160401b0316611f879190613f37565b611fb2816114b9565b611fce5760405162461bcd60e51b81526004016108c890613e46565b6000611fd982610e0e565b90506000611fe660745490565b82149050600080611ff684611b26565b546001600160401b0316119050818061200c5750805b6111fb5760405162461bcd60e51b815260206004820152600c60248201526b5354414b455f41435449564560a01b60448201526064016108c8565b6001600160a01b0380831660009081526077602052604081206002810154815492939192600160481b90910490911690808511156120ba5760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b60448201526064016108c8565b60006120c68683613e6a565b86855590506120d58382612c96565b826001600160a01b0316876001600160a01b03166000805160206141f48339815191528489604051612111929190918252602082015260400190565b60405180910390a39695505050505050565b6000610e638461213285612d3b565b604080516020808201949094528082019290925260608083018790528151808403909101815260809092019052805191012090565b60008061217a6040860161088686611b26565b600161218e61024087016102208801613f4a565b600281111561219f5761219f6139a5565b14806121cd575060026121ba61024087016102208801613f4a565b60028111156121cb576121cb6139a5565b145b61220c5760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b60448201526064016108c8565b8361222e863561222436899003890160e08a01613de0565b6020890135612123565b146122725760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f4245464f52455f535441544560601b60448201526064016108c8565b600161228661018087016101608801613f4a565b6002811115612297576122976139a5565b146122d65760405162461bcd60e51b815260206004820152600f60248201526e4241445f505245565f53544154555360881b60448201526064016108c8565b60006122e185611b26565b90506000806101a0880160e08901826122fa8383612d6b565b121561233a5760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b60448201526064016108c8565b600061235f61234f60e08d0160c08e01613950565b84906001600160401b0316612e70565b905060008113156123a25760405162461bcd60e51b815260206004820152600d60248201526c24a72127ac2faa27a7afa320a960991b60448201526064016108c8565b60026123b66102408d016102208e01613f4a565b60028111156123c7576123c76139a5565b141580156123d55750600081125b1561242d576001965060006123ea8484612d6b565b1361242d5760405162461bcd60e51b815260206004820152601360248201527213d59154919313d5d7d4d510539114d5125313606a1b60448201526064016108c8565b606b54604080516221048360e21b815290516000926001600160a01b0316916284120c9160048083019260209291908290030181865afa158015612475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124999190613eeb565b905060006124a78583612e70565b13156124e65760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b60448201526064016108c8565b806124f760e08e0160c08f01613950565b6001600160401b031611156125445760405162461bcd60e51b815260206004820152601360248201527212539093d617d393d517d413d4155310551151606a1b60448201526064016108c8565b600061255861160636879003870187613eaf565b6001600160401b0316905081810361257c57612575826001613f37565b9650612580565b8196505b806000036125c45760405162461bcd60e51b8152602060048201526011602482015270115354151657d2539093d617d0d3d55395607a1b60448201526064016108c8565b606b546001600160a01b03166316bf55796125e0600184613e6a565b6040518263ffffffff1660e01b81526004016125fe91815260200190565b602060405180830381865afa15801561261b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263f9190613eeb565b9550505050505061265f87896101a001803603810190611a139190613de0565b94508585148061266d575085155b6126b55760405162461bcd60e51b81526020600482015260196024820152780aa9c8ab0a08a86a88a88be82a6a68aa4a8929e9cbe9082a69603b1b60448201526064016108c8565b60006126c086611b26565b54600160c81b900460ff1660028111156126dc576126dc6139a5565b1461271a5760405162461bcd60e51b815260206004820152600e60248201526d20a9a9a2a92a24a7a72fa9a2a2a760911b60448201526064016108c8565b825460685460675460695460665460009461275c946001600160401b03918216159461275794919390926001600160a01b03909216911689612c1f565b612efc565b905061276784612f33565b60008681526075602090815260409182902083518154928501519385015160608601511515600160c01b0260ff60c01b196001600160401b03928316600160801b0216600160801b600160c81b0319968316600160401b026001600160801b03199096169290931691909117939093179390931692909217178082556080830151839291829060ff60c81b1916600160c81b83600281111561280b5761280b6139a5565b021790555060a0820151816001015590505087867f901c3aee23cf4478825462caaab375c606ab83516060388344f06503407536308b8587606854606754606960009054906101000a90046001600160a01b0316606660009054906101000a90046001600160401b03166040516128889796959493929190613fdc565b60405180910390a37f0000000000000000000000000000000000000000000000000000000000000000156129295760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190613eeb565b6000878152607c60205260409020555b50505050935093915050565b6040516001600160a01b038316602482015260448101829052610e0990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f9e565b336129a4607282611c09565b806129b15750607b5460ff165b6129cd5760405162461bcd60e51b81526004016108c890613ac4565b6129d5611c2e565b6129de336114b9565b15612a1c5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d4d51052d15160921b60448201526064016108c8565b610e09338484613070565b60705461132c906001600160a01b031633308461318e565b612a4881611fa9565b61132c816131c6565b6001600160a01b0381166000908152607860205260408120805490829055607980548291908490612a83908490613e6a565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b6020810151600090815b602002015192915050565b82612af3607282611c09565b80612b005750607b5460ff165b612b1c5760405162461bcd60e51b81526004016108c890613ac4565b612b24611c2e565b612b2d846114b9565b612b495760405162461bcd60e51b81526004016108c890613e46565b826001600160a01b0316612b5c85611725565b6001600160a01b031614612bad5760405162461bcd60e51b815260206004820152601860248201527757524f4e475f5749544844524157414c5f4144445245535360401b60448201526064016108c8565b6111fb8483613239565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60606000611c27836132af565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d612bdb565b60408051602080820197909752808201959095526001600160601b0319606094851b16938501939093526001600160c01b031960c092831b81166074860152911b16607c8301528051606481840301815260849092019052805191012090565b805160009081612adc565b80516000906001612adc565b6001600160a01b03821660009081526078602052604081205490612cba8383613f37565b6001600160a01b0385166000908152607860205260408120829055607980549293508592909190612cec908490613f37565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a250505050565b600081604051602001612d4e91906140c6565b604051602081830303815290604052805190602001209050919050565b600080612d8061160636869003860186613eaf565b90506000612d9661160636869003860186613eaf565b9050806001600160401b0316826001600160401b03161015612dbe5760001992505050610c7d565b806001600160401b0316826001600160401b03161115612de357600192505050610c7d565b6000612dfc612df736889003880188613eaf565b61330b565b90506000612e12612df736889003880188613eaf565b9050806001600160401b0316826001600160401b03161015612e3c57600019945050505050610c7d565b806001600160401b0316826001600160401b03161115612e63576001945050505050610c7d565b6000945050505050610c7d565b600080612e8561160636869003860186613eaf565b905082816001600160401b03161015612ea357600019915050610c7d565b82816001600160401b03161115612ebe576001915050610c7d565b6000612ed2612df736879003870187613eaf565b6001600160401b03161115612eeb576001915050610c7d565b6000915050610c7d565b5092915050565b612f04613673565b612f0c613673565b6001600160401b034316604082015292151560608401525060a08201526001608082015290565b80546001600160401b0316600003612f605780546001600160401b031916436001600160401b0316179055565b8054600160401b90046001600160401b031660000361132c57805467ffffffffffffffff60401b1916600160401b436001600160401b031602179055565b6000612ff3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661331a9092919063ffffffff16565b805190915015610e095780806020019051810190613011919061414f565b610e095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c8565b6076805460018082019092557fb5732705f5241370a28908c2fe1303cb223f03b90d857fd0573f003f79fefed4810180546001600160a01b0319166001600160a01b038781169182179092556040805160a08101825287815260745460208083019182526001600160401b03808816848601908152606085018a81528b89166080870181815260008a8152607787528981209851895596519c88019c909c5591516002909601805491519b51969093166001600160481b031990911617600160401b9a15159a909a0299909917600160481b600160e81b031916600160481b949097169390930295909517909155815190815292830187905292939290916000805160206141f483398151915291015b60405180910390a350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526111fb9085906323b872dd60e01b90608401612961565b6001600160a01b038082166000908152607760205260409020600281015481549192600160481b90910416906131fc8282612c96565b61320584613329565b60408051828152600060208201526001600160a01b0380851692908716916000805160206141f48339815191529101613180565b6001600160a01b03821660009081526077602052604081208054909161325f8483613f37565b808455600284015460408051858152602081018490529293506001600160a01b03600160481b909204821692918816916000805160206141f4833981519152910160405180910390a35050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156132ff57602002820191906000526020600020905b8154815260200190600101908083116132eb575b50505050509050919050565b60208101516000906001612adc565b6060610e6384846000856134d5565b6001600160a01b03811660009081526077602052604090206002810154600160401b900460ff1661336c5760405162461bcd60e51b81526004016108c890613e46565b6002810154607680546001600160401b039092169161338d90600190613e6a565b8154811061339d5761339d613f04565b600091825260209091200154607680546001600160a01b03909216916001600160401b0384169081106133d2576133d2613f04565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607760006076846001600160401b03168154811061342157613421613f04565b6000918252602080832091909101546001600160a01b03168352820192909252604001902060020180546001600160401b0319166001600160401b039290921691909117905560768054806134785761347861416a565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b039490941681526077909352505060408120818155600181019190915560020180546001600160e81b0319169055565b6060824710156135365760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108c8565b600080866001600160a01b0316858760405161355291906141a4565b60006040518083038185875af1925050503d806000811461358f576040519150601f19603f3d011682016040523d82523d6000602084013e613594565b606091505b50915091506135a5878383876135b0565b979650505050505050565b6060831561361f578251600003613618576001600160a01b0385163b6136185760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c8565b5081610e63565b610e6383838151156136345781518083602001fd5b8060405162461bcd60e51b81526004016108c891906141c0565b60405180604001604052806136616136a9565b815260200161366e6136a9565b905290565b6040805160c081018252600080825260208201819052918101829052606081018290529060808201908152600060209091015290565b60405180604001604052806002906020820280368337509192915050565b600060a082840312156136d957600080fd5b50919050565b60008060c083850312156136f257600080fd5b8235915061370384602085016136c7565b90509250929050565b600060c082840312156136d957600080fd5b6000806000806000806101e0878903121561373857600080fd5b8635955060208701359450613750886040890161370c565b935061010087013592506137688861012089016136c7565b91506101c087013590509295509295509295565b60006020828403121561378e57600080fd5b5035919050565b6001600160a01b038116811461132c57600080fd5b6000602082840312156137bc57600080fd5b8135611c2781613795565b600080600061010084860312156137dd57600080fd5b833592506137ee856020860161370c565b915060e084013590509250925092565b600061026082840312156136d957600080fd5b600080610280838503121561382557600080fd5b61382f84846137fe565b94610260939093013593505050565b6000806000806102c0858703121561385557600080fd5b8435935061386686602087016137fe565b925061028085013591506102a085013561387f81613795565b939692955090935050565b60008060008061012085870312156138a157600080fd5b84359350602085013592506138b9866040870161370c565b939692955092936101000135925050565b600080604083850312156138dd57600080fd5b8235915060208301356138ef81613795565b809150509250929050565b60008060006060848603121561390f57600080fd5b833561391a81613795565b9250602084013561392a81613795565b929592945050506040919091013590565b6001600160401b038116811461132c57600080fd5b60006020828403121561396257600080fd5b8135611c278161393b565b60008060006102a0848603121561398357600080fd5b8335925061399485602086016137fe565b915061028084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b6003811061132c57634e487b7160e01b600052602160045260246000fd5b600060c0820190506001600160401b03808451168352806020850151166020840152806040850151166040840152506060830151151560608301526080830151613a22816139bb565b8060808401525060a083015160a083015292915050565b6020808252825182820181905260009190848201906040850190845b81811015613a7a5783516001600160a01b031683529284019291840191600101613a55565b50909695505050505050565b6000806000806101208587031215613a9d57600080fd5b84359350613aae866020870161370c565b939693955050505060e082013591610100013590565b6020808252600d908201526c2727aa2fab20a624a220aa27a960991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115612ef557612ef5613aeb565b634e487b7160e01b600052604160045260246000fd5b6040516101e081016001600160401b0381118282101715613b5a57613b5a613b21565b60405290565b604080519081016001600160401b0381118282101715613b5a57613b5a613b21565b8051610d3a81613795565b8051610d3a8161393b565b805160028110610d3a57600080fd5b805160ff81168114610d3a57600080fd5b80518015158114610d3a57600080fd5b60006101e08284031215613bdb57600080fd5b613be3613b37565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100613c3b818501613b82565b90820152610120613c4d848201613b8d565b90820152610140613c5f848201613b8d565b90820152610160613c71848201613b98565b90820152610180613c83848201613ba7565b908201526101a0613c95848201613bb8565b908201526101c0613ca7848201613b8d565b908201529392505050565b60208082526012908201527115d2125511531254d517d11254d05093115160721b604082015260600190565b600082601f830112613cef57600080fd5b613cf7613b60565b806040840185811115613d0957600080fd5b845b81811015613d2c578035613d1e8161393b565b845260209384019301613d0b565b509095945050505050565b600060808284031215613d4957600080fd5b604051604081018181106001600160401b0382111715613d6b57613d6b613b21565b604052905080601f83018413613d8057600080fd5b613d88613b60565b806040850186811115613d9a57600080fd5b855b81811015613db4578035845260209384019301613d9c565b50818452613dc28782613cde565b60208501525050505092915050565b803560038110610d3a57600080fd5b600060c08284031215613df257600080fd5b604051606081018181106001600160401b0382111715613e1457613e14613b21565b604052613e218484613d37565b8152613e2f60808401613dd1565b602082015260a09290920135604083015250919050565b6020808252600a90820152691393d517d4d51052d15160b21b604082015260600190565b81810381811115610c7d57610c7d613aeb565b602080825260189082015277454d5054595f5749544844524157414c5f4144445245535360401b604082015260600190565b600060808284031215613ec157600080fd5b611c278383613d37565b6001600160401b03828116828216039080821115612ef557612ef5613aeb565b600060208284031215613efd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613f2c57600080fd5b8151611c2781613795565b80820180821115610c7d57610c7d613aeb565b600060208284031215613f5c57600080fd5b611c2782613dd1565b613f6e816139bb565b9052565b6040818337604082016040820160005b6002811015613fb4578135613f968161393b565b6001600160401b031683526020928301929190910190600101613f82565b505050613fc360808201613dd1565b613fcc816139bb565b608083015260a090810135910152565b60006103208201905088358252602089013560208301526040890135604083015260608901356060830152608089013561401581613795565b6001600160a01b0316608083015260a08901356140318161393b565b6001600160401b0390811660a084015260c08a0135906140508261393b565b1660c083015261406660e0808401908b01613f72565b6101a0614077818401828c01613f72565b508761026083015286610280830152856102a0830152846102c08301526140aa6102e08301856001600160a01b03169052565b6001600160401b03831661030083015298975050505050505050565b8151805160c0830191908360005b60028110156140f35782518252602092830192909101906001016140d4565b505050602090810151906040840160005b600281101561412a5783516001600160401b031682529282019290820190600101614104565b5050840151905061413e6080840182613f65565b50604083015160a083015292915050565b60006020828403121561416157600080fd5b611c2782613bb8565b634e487b7160e01b600052603160045260246000fd5b60005b8381101561419b578181015183820152602001614183565b50506000910152565b600082516141b6818460208701614180565b9190910192915050565b60208152600082518060208401526141df816040850160208701614180565b601f01601f1916919091016040019291505056fed957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8a264697066735822122058ac43341bbdd7b23a8ca31eb9d131df3138c6cade95d139875df10611716ac364736f6c63430008140033",
}

// RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupUserLogicMetaData.ABI instead.
var RollupUserLogicABI = RollupUserLogicMetaData.ABI

// RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupUserLogicMetaData.Bin instead.
var RollupUserLogicBin = RollupUserLogicMetaData.Bin

// DeployRollupUserLogic deploys a new Ethereum contract, binding an instance of RollupUserLogic to it.
func DeployRollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserLogic, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type RollupUserLogic struct {
	RollupUserLogicCaller     // Read-only binding to the contract
	RollupUserLogicTransactor // Write-only binding to the contract
	RollupUserLogicFilterer   // Log filterer for contract events
}

// RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserLogicSession struct {
	Contract     *RollupUserLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserLogicCallerSession struct {
	Contract *RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserLogicTransactorSession struct {
	Contract     *RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserLogicRaw struct {
	Contract *RollupUserLogic // Generic contract binding to access the raw methods on
}

// RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserLogicCallerRaw struct {
	Contract *RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactorRaw struct {
	Contract *RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserLogic creates a new instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogic(address common.Address, backend bind.ContractBackend) (*RollupUserLogic, error) {
	contract, err := bindRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// NewRollupUserLogicCaller creates a new read-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupUserLogicCaller, error) {
	contract, err := bindRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicCaller{contract: contract}, nil
}

// NewRollupUserLogicTransactor creates a new write-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserLogicTransactor, error) {
	contract, err := bindRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicTransactor{contract: contract}, nil
}

// NewRollupUserLogicFilterer creates a new log filterer instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserLogicFilterer, error) {
	contract, err := bindRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicFilterer{contract: contract}, nil
}

// bindRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupUserLogic *RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
		WithdrawalAddress     common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.WithdrawalAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupUserLogic *RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ChallengeGracePeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ChallengeGracePeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x33635fc2.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ComputeAssertionHash(opts *bind.CallOpts, prevAssertionHash [32]byte, state AssertionState, inboxAcc [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "computeAssertionHash", prevAssertionHash, state, inboxAcc)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x33635fc2.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ComputeAssertionHash(prevAssertionHash [32]byte, state AssertionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x33635fc2.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ComputeAssertionHash(prevAssertionHash [32]byte, state AssertionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupUserLogic *RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupUserLogic *RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupUserLogic *RollupUserLogicCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupUserLogic *RollupUserLogicSession) GetValidators() ([]common.Address, error) {
	return _RollupUserLogic.Contract.GetValidators(&_RollupUserLogic.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_RollupUserLogic *RollupUserLogicCallerSession) GetValidators() ([]common.Address, error) {
	return _RollupUserLogic.Contract.GetValidators(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorAfkBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorAfkBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorAfkBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ValidatorAfkBlocks(&_RollupUserLogic.CallOpts)
}

// ValidatorAfkBlocks is a free data retrieval call binding the contract method 0xe6b3082c.
//
// Solidity: function validatorAfkBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorAfkBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ValidatorAfkBlocks(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawalAddress(opts *bind.CallOpts, staker common.Address) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawalAddress", staker)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _RollupUserLogic.Contract.WithdrawalAddress(&_RollupUserLogic.CallOpts, staker)
}

// WithdrawalAddress is a free data retrieval call binding the contract method 0x84728cd0.
//
// Solidity: function withdrawalAddress(address staker) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawalAddress(staker common.Address) (common.Address, error) {
	return _RollupUserLogic.Contract.WithdrawalAddress(&_RollupUserLogic.CallOpts, staker)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x685f5ecc.
//
// Solidity: function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, expectedWithdrawalAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress, expectedWithdrawalAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x685f5ecc.
//
// Solidity: function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicSession) AddToDeposit(stakerAddress common.Address, expectedWithdrawalAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, expectedWithdrawalAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x685f5ecc.
//
// Solidity: function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address, expectedWithdrawalAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, expectedWithdrawalAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x6096686d.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x6096686d.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x6096686d.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6420fb9f.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmNewAssertion", assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6420fb9f.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6420fb9f.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// NewStake is a paid mutator transaction binding the contract method 0x68129b14.
//
// Solidity: function newStake(uint256 tokenAmount, address _withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStake(opts *bind.TransactOpts, tokenAmount *big.Int, _withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStake", tokenAmount, _withdrawalAddress)
}

// NewStake is a paid mutator transaction binding the contract method 0x68129b14.
//
// Solidity: function newStake(uint256 tokenAmount, address _withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStake(tokenAmount *big.Int, _withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStake(&_RollupUserLogic.TransactOpts, tokenAmount, _withdrawalAddress)
}

// NewStake is a paid mutator transaction binding the contract method 0x68129b14.
//
// Solidity: function newStake(uint256 tokenAmount, address _withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStake(tokenAmount *big.Int, _withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStake(&_RollupUserLogic.TransactOpts, tokenAmount, _withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address _withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewAssertion50f32f68(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, _withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash, _withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address _withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, _withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion50f32f68(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash, _withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address _withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, _withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion50f32f68(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash, _withdrawalAddress)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewAssertion7300201c(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewAssertion0", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion7300201c(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion7300201c(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDepositFor is a paid mutator transaction binding the contract method 0x588c7a16.
//
// Solidity: function returnOldDepositFor(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDepositFor(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDepositFor", stakerAddress)
}

// ReturnOldDepositFor is a paid mutator transaction binding the contract method 0x588c7a16.
//
// Solidity: function returnOldDepositFor(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDepositFor(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDepositFor(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDepositFor is a paid mutator transaction binding the contract method 0x588c7a16.
//
// Solidity: function returnOldDepositFor(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDepositFor(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDepositFor(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupUserLogic contract.
type RollupUserLogicAdminChangedIterator struct {
	Event *RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAdminChanged represents a AdminChanged event raised by the RollupUserLogic contract.
type RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAdminChangedIterator{contract: _RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAdminChanged)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*RollupUserLogicAdminChanged, error) {
	event := new(RollupUserLogicAdminChanged)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmedIterator struct {
	Event *RollupUserLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupUserLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionConfirmedIterator{contract: _RollupUserLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionConfirmed)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupUserLogicAssertionConfirmed, error) {
	event := new(RollupUserLogicAssertionConfirmed)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreatedIterator struct {
	Event *RollupUserLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionCreated represents a AssertionCreated event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupUserLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionCreatedIterator{contract: _RollupUserLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionCreated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupUserLogicAssertionCreated, error) {
	event := new(RollupUserLogicAssertionCreated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgradedIterator struct {
	Event *RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicBeaconUpgradedIterator{contract: _RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicBeaconUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupUserLogicBeaconUpgraded, error) {
	event := new(RollupUserLogicBeaconUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupUserLogic contract.
type RollupUserLogicInitializedIterator struct {
	Event *RollupUserLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicInitialized represents a Initialized event raised by the RollupUserLogic contract.
type RollupUserLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupUserLogicInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicInitializedIterator{contract: _RollupUserLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseInitialized(log types.Log) (*RollupUserLogicInitialized, error) {
	event := new(RollupUserLogicInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserLogic contract.
type RollupUserLogicPausedIterator struct {
	Event *RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicPaused represents a Paused event raised by the RollupUserLogic contract.
type RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserLogicPausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicPausedIterator{contract: _RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicPaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParsePaused(log types.Log) (*RollupUserLogicPaused, error) {
	event := new(RollupUserLogicPaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStartedIterator struct {
	Event *RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupChallengeStartedIterator{contract: _RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupChallengeStarted)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserLogicRollupChallengeStarted, error) {
	event := new(RollupUserLogicRollupChallengeStarted)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitializedIterator struct {
	Event *RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupInitializedIterator{contract: _RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupUserLogicRollupInitialized, error) {
	event := new(RollupUserLogicRollupInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserLogic contract.
type RollupUserLogicUnpausedIterator struct {
	Event *RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUnpaused represents a Unpaused event raised by the RollupUserLogic contract.
type RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUnpausedIterator{contract: _RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUnpaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*RollupUserLogicUnpaused, error) {
	event := new(RollupUserLogicUnpaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedIterator struct {
	Event *RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgraded represents a Upgraded event raised by the RollupUserLogic contract.
type RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedIterator{contract: _RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*RollupUserLogicUpgraded, error) {
	event := new(RollupUserLogicUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondaryIterator struct {
	Event *RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedSecondaryIterator{contract: _RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgradedSecondary)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupUserLogicUpgradedSecondary, error) {
	event := new(RollupUserLogicUpgradedSecondary)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdatedIterator struct {
	Event *RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserStakeUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserStakeUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupUserLogicUserStakeUpdated, error) {
	event := new(RollupUserLogicUserStakeUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StateHashPreImageLookupMetaData contains all meta data concerning the StateHashPreImageLookup contract.
var StateHashPreImageLookupMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"HashSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stateHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608080604052346015576109fa908161001b8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081633164413014610721575080638eaa6ac01461041c5763945c94941461004557600080fd5b346104185760e0600319360112610418578135917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36019160a0831261041457608060c43593126104145780519161009c836108c6565b36604312156104005781516100b0816108c6565b6064813682116103fc576024905b82821061040457505050835236608312156104005781516100de816108c6565b60a4813682116103fc576064905b8282106103e4575050506020938185820152519084825192015190858151910151855192878401947f476c6f62616c2073746174653a000000000000000000000000000000000000008652602d850152604d8401527fffffffffffffffff000000000000000000000000000000000000000000000000809260c01b16606d84015260c01b166075820152605d8152610183816108f8565b51902060a43560038110156103e057835190858201928352868583015260f81b6060820152604181526101b5816108f8565b51902085036103855781516101cb848201610968565b8460c082015260c0815260e081019067ffffffffffffffff918181108382111761037257845286885287855283882092815192831161035f575061020f835461092e565b601f811161031c575b508490601f831160011461028f5792827f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad998969360e098969361027b968c92610284575b50506000198260011b9260031b1c19161790555b519384528301610968565b60c0820152a180f35b01519050388061025c565b8389528589209190601f1984168a5b81811061030557509360e098969361027b9693600193837f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad99d9b98106102ec575b505050811b019055610270565b015160001960f88460031b161c191690553880806102df565b92938860018192878601518155019501930161029e565b838952858920601f840160051c810191878510610355575b601f0160051c01905b81811061034a5750610218565b89815560010161033d565b9091508190610334565b886041602492634e487b7160e01b835252fd5b602489604186634e487b7160e01b835252fd5b8260649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600c60248201527f496e76616c6964206861736800000000000000000000000000000000000000006044820152fd5b8780fd5b602080916103f184610914565b8152019101906100ec565b8880fd5b8580fd5b81358152602091820191016100be565b8480fd5b8280fd5b509034610418576020928360031936011261071e578084845161043e816108c6565b8551610449816108c6565b8651610454816108c6565b8736823781528651610465816108c6565b87368237838201528152015281358152808452828120835194828683549461048c8661092e565b80835284830195600197866001821691826000146106e157505060011461069c575b505003601f01601f191687019567ffffffffffffffff938488118989101761068957878252885189019089858301920360c081126104145760a08112610414576080906104fa8b6108c6565b126106855782519061050b826108c6565b82603f8c011215610414578351610521816108c6565b8060608d01928584116103e0578890915b84831061067557505050825282607f8c01121561041457835190610555826108c6565b819060a08d0194851161067157905b848210610659575050858201528852519760038910156104185787840198895260c001519586156105fe57509082825197518051898885915b600283106105e757505050500151909187015b600283106105d25760c088886105cb8c5160808401906108a3565b60a0820152f35b815185168152918501919083019083016105b0565b8351815288959384019392909101918a910161059d565b8360649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601060248201527f48617368206e6f742079657420736574000000000000000000000000000000006044820152fd5b815189811681036103e0578152908701908701610564565b8680fd5b8251815291810191899101610532565b8380fd5b602483604189634e487b7160e01b835252fd5b9150915082528783808420928785945b8286106106c75750929384019091019150829050601f6104ae565b909194938385835492010152019101918490878b936106ac565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016895292151560051b85019092019250839150601f90506104ae565b80fd5b8285853461089f57600319360160c081126104185760a081126104185760801361089f5761074e846108c6565b366023121561089f57825190610763826108c6565b816044913660441161041457905b82821061088f575050508352366063121561071e578151610791816108c6565b608481368211610685576044905b828210610877575050506020938185820152519084825192015190858151910151855192878401947f476c6f62616c2073746174653a000000000000000000000000000000000000008652602d850152604d8401527fffffffffffffffff000000000000000000000000000000000000000000000000809260c01b16606d84015260c01b166075820152605d8152610836816108f8565b5190209060843590600382101561071e575082519084820192835260a4358483015260f81b60608201526041815261086d816108f8565b5190209051908152f35b6020809161088484610914565b81520191019061079f565b8135815260209182019101610771565b5080fd5b9060038210156108b05752565b634e487b7160e01b600052602160045260246000fd5b6040810190811067ffffffffffffffff8211176108e257604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176108e257604052565b359067ffffffffffffffff8216820361092957565b600080fd5b90600182811c9216801561095e575b602083101461094857565b634e487b7160e01b600052602260045260246000fd5b91607f169161093d565b60406024823760006064604083015b6002831061099d5750505060a435600381101561092957608061099b9201906108a3565b565b60019067ffffffffffffffff6109b284610914565b1681529201916020918201910161097756fea26469706673582212204fa7bfc673a317568680199053298b68c91f2c651b9f6b5ec7d1502a33cdcf1964736f6c63430008190033",
}

// StateHashPreImageLookupABI is the input ABI used to generate the binding from.
// Deprecated: Use StateHashPreImageLookupMetaData.ABI instead.
var StateHashPreImageLookupABI = StateHashPreImageLookupMetaData.ABI

// StateHashPreImageLookupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StateHashPreImageLookupMetaData.Bin instead.
var StateHashPreImageLookupBin = StateHashPreImageLookupMetaData.Bin

// DeployStateHashPreImageLookup deploys a new Ethereum contract, binding an instance of StateHashPreImageLookup to it.
func DeployStateHashPreImageLookup(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StateHashPreImageLookup, error) {
	parsed, err := StateHashPreImageLookupMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StateHashPreImageLookupBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StateHashPreImageLookup{StateHashPreImageLookupCaller: StateHashPreImageLookupCaller{contract: contract}, StateHashPreImageLookupTransactor: StateHashPreImageLookupTransactor{contract: contract}, StateHashPreImageLookupFilterer: StateHashPreImageLookupFilterer{contract: contract}}, nil
}

// StateHashPreImageLookup is an auto generated Go binding around an Ethereum contract.
type StateHashPreImageLookup struct {
	StateHashPreImageLookupCaller     // Read-only binding to the contract
	StateHashPreImageLookupTransactor // Write-only binding to the contract
	StateHashPreImageLookupFilterer   // Log filterer for contract events
}

// StateHashPreImageLookupCaller is an auto generated read-only Go binding around an Ethereum contract.
type StateHashPreImageLookupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StateHashPreImageLookupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StateHashPreImageLookupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StateHashPreImageLookupSession struct {
	Contract     *StateHashPreImageLookup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StateHashPreImageLookupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StateHashPreImageLookupCallerSession struct {
	Contract *StateHashPreImageLookupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// StateHashPreImageLookupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StateHashPreImageLookupTransactorSession struct {
	Contract     *StateHashPreImageLookupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// StateHashPreImageLookupRaw is an auto generated low-level Go binding around an Ethereum contract.
type StateHashPreImageLookupRaw struct {
	Contract *StateHashPreImageLookup // Generic contract binding to access the raw methods on
}

// StateHashPreImageLookupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StateHashPreImageLookupCallerRaw struct {
	Contract *StateHashPreImageLookupCaller // Generic read-only contract binding to access the raw methods on
}

// StateHashPreImageLookupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StateHashPreImageLookupTransactorRaw struct {
	Contract *StateHashPreImageLookupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStateHashPreImageLookup creates a new instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookup(address common.Address, backend bind.ContractBackend) (*StateHashPreImageLookup, error) {
	contract, err := bindStateHashPreImageLookup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookup{StateHashPreImageLookupCaller: StateHashPreImageLookupCaller{contract: contract}, StateHashPreImageLookupTransactor: StateHashPreImageLookupTransactor{contract: contract}, StateHashPreImageLookupFilterer: StateHashPreImageLookupFilterer{contract: contract}}, nil
}

// NewStateHashPreImageLookupCaller creates a new read-only instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupCaller(address common.Address, caller bind.ContractCaller) (*StateHashPreImageLookupCaller, error) {
	contract, err := bindStateHashPreImageLookup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupCaller{contract: contract}, nil
}

// NewStateHashPreImageLookupTransactor creates a new write-only instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupTransactor(address common.Address, transactor bind.ContractTransactor) (*StateHashPreImageLookupTransactor, error) {
	contract, err := bindStateHashPreImageLookup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupTransactor{contract: contract}, nil
}

// NewStateHashPreImageLookupFilterer creates a new log filterer instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupFilterer(address common.Address, filterer bind.ContractFilterer) (*StateHashPreImageLookupFilterer, error) {
	contract, err := bindStateHashPreImageLookup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupFilterer{contract: contract}, nil
}

// bindStateHashPreImageLookup binds a generic wrapper to an already deployed contract.
func bindStateHashPreImageLookup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StateHashPreImageLookupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateHashPreImageLookup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.contract.Transact(opts, method, params...)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupCaller) Get(opts *bind.CallOpts, h [32]byte) (struct {
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
}, error) {
	var out []interface{}
	err := _StateHashPreImageLookup.contract.Call(opts, &out, "get", h)

	outstruct := new(struct {
		ExecutionState ExecutionState
		InboxMaxCount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ExecutionState = *abi.ConvertType(out[0], new(ExecutionState)).(*ExecutionState)
	outstruct.InboxMaxCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) Get(h [32]byte) (struct {
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
}, error) {
	return _StateHashPreImageLookup.Contract.Get(&_StateHashPreImageLookup.CallOpts, h)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerSession) Get(h [32]byte) (struct {
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
}, error) {
	return _StateHashPreImageLookup.Contract.Get(&_StateHashPreImageLookup.CallOpts, h)
}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupCaller) StateHash(opts *bind.CallOpts, executionState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StateHashPreImageLookup.contract.Call(opts, &out, "stateHash", executionState, inboxMaxCount)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) StateHash(executionState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	return _StateHashPreImageLookup.Contract.StateHash(&_StateHashPreImageLookup.CallOpts, executionState, inboxMaxCount)
}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerSession) StateHash(executionState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	return _StateHashPreImageLookup.Contract.StateHash(&_StateHashPreImageLookup.CallOpts, executionState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactor) Set(opts *bind.TransactOpts, h [32]byte, executionState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.contract.Transact(opts, "set", h, executionState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) Set(h [32]byte, executionState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.Set(&_StateHashPreImageLookup.TransactOpts, h, executionState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorSession) Set(h [32]byte, executionState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.Set(&_StateHashPreImageLookup.TransactOpts, h, executionState, inboxMaxCount)
}

// StateHashPreImageLookupHashSetIterator is returned from FilterHashSet and is used to iterate over the raw logs and unpacked data for HashSet events raised by the StateHashPreImageLookup contract.
type StateHashPreImageLookupHashSetIterator struct {
	Event *StateHashPreImageLookupHashSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StateHashPreImageLookupHashSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StateHashPreImageLookupHashSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StateHashPreImageLookupHashSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StateHashPreImageLookupHashSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StateHashPreImageLookupHashSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StateHashPreImageLookupHashSet represents a HashSet event raised by the StateHashPreImageLookup contract.
type StateHashPreImageLookupHashSet struct {
	H              [32]byte
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterHashSet is a free log retrieval operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) FilterHashSet(opts *bind.FilterOpts) (*StateHashPreImageLookupHashSetIterator, error) {

	logs, sub, err := _StateHashPreImageLookup.contract.FilterLogs(opts, "HashSet")
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupHashSetIterator{contract: _StateHashPreImageLookup.contract, event: "HashSet", logs: logs, sub: sub}, nil
}

// WatchHashSet is a free log subscription operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) WatchHashSet(opts *bind.WatchOpts, sink chan<- *StateHashPreImageLookupHashSet) (event.Subscription, error) {

	logs, sub, err := _StateHashPreImageLookup.contract.WatchLogs(opts, "HashSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StateHashPreImageLookupHashSet)
				if err := _StateHashPreImageLookup.contract.UnpackLog(event, "HashSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHashSet is a log parse operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) ParseHashSet(log types.Log) (*StateHashPreImageLookupHashSet, error) {
	event := new(StateHashPreImageLookupHashSet)
	if err := _StateHashPreImageLookup.contract.UnpackLog(event, "HashSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletMetaData contains all meta data concerning the ValidatorWallet contract.
var ValidatorWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"NotExecutorOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"OnlyOwnerDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawEthFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AllowedExecutorDestinationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutorDestinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransactionWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactionsWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSet\",\"type\":\"bool[]\"}],\"name\":\"setAllowedExecutorDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExecutor\",\"type\":\"bool[]\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"validateExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// ValidatorWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletMetaData.ABI instead.
var ValidatorWalletABI = ValidatorWalletMetaData.ABI

// ValidatorWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletMetaData.Bin instead.
var ValidatorWalletBin = ValidatorWalletMetaData.Bin

// DeployValidatorWallet deploys a new Ethereum contract, binding an instance of ValidatorWallet to it.
func DeployValidatorWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWallet, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// ValidatorWallet is an auto generated Go binding around an Ethereum contract.
type ValidatorWallet struct {
	ValidatorWalletCaller     // Read-only binding to the contract
	ValidatorWalletTransactor // Write-only binding to the contract
	ValidatorWalletFilterer   // Log filterer for contract events
}

// ValidatorWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletSession struct {
	Contract     *ValidatorWallet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCallerSession struct {
	Contract *ValidatorWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletTransactorSession struct {
	Contract     *ValidatorWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletRaw struct {
	Contract *ValidatorWallet // Generic contract binding to access the raw methods on
}

// ValidatorWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCallerRaw struct {
	Contract *ValidatorWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactorRaw struct {
	Contract *ValidatorWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWallet creates a new instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWallet(address common.Address, backend bind.ContractBackend) (*ValidatorWallet, error) {
	contract, err := bindValidatorWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// NewValidatorWalletCaller creates a new read-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCaller, error) {
	contract, err := bindValidatorWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCaller{contract: contract}, nil
}

// NewValidatorWalletTransactor creates a new write-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletTransactor, error) {
	contract, err := bindValidatorWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletTransactor{contract: contract}, nil
}

// NewValidatorWalletFilterer creates a new log filterer instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletFilterer, error) {
	contract, err := bindValidatorWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletFilterer{contract: contract}, nil
}

// bindValidatorWallet binds a generic wrapper to an already deployed contract.
func bindValidatorWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.ValidatorWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transact(opts, method, params...)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) AllowedExecutorDestinations(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "allowedExecutorDestinations", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) Executors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCallerSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCaller) ValidateExecuteTransaction(opts *bind.CallOpts, destination common.Address) error {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "validateExecuteTransaction", destination)

	if err != nil {
		return err
	}

	return err

}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCallerSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransaction", data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactions(opts *bind.TransactOpts, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactions", data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionsWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionsWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Initialize(opts *bind.TransactOpts, _executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "initialize", _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetAllowedExecutorDestinations(opts *bind.TransactOpts, destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setAllowedExecutorDestinations", destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetExecutor(opts *bind.TransactOpts, newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setExecutor", newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) WithdrawEth(opts *bind.TransactOpts, amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "withdrawEth", amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// ValidatorWalletAllowedExecutorDestinationsUpdatedIterator is returned from FilterAllowedExecutorDestinationsUpdated and is used to iterate over the raw logs and unpacked data for AllowedExecutorDestinationsUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdatedIterator struct {
	Event *ValidatorWalletAllowedExecutorDestinationsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletAllowedExecutorDestinationsUpdated represents a AllowedExecutorDestinationsUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdated struct {
	Destination common.Address
	IsSet       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAllowedExecutorDestinationsUpdated is a free log retrieval operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterAllowedExecutorDestinationsUpdated(opts *bind.FilterOpts, destination []common.Address) (*ValidatorWalletAllowedExecutorDestinationsUpdatedIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletAllowedExecutorDestinationsUpdatedIterator{contract: _ValidatorWallet.contract, event: "AllowedExecutorDestinationsUpdated", logs: logs, sub: sub}, nil
}

// WatchAllowedExecutorDestinationsUpdated is a free log subscription operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchAllowedExecutorDestinationsUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletAllowedExecutorDestinationsUpdated, destination []common.Address) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowedExecutorDestinationsUpdated is a log parse operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseAllowedExecutorDestinationsUpdated(log types.Log) (*ValidatorWalletAllowedExecutorDestinationsUpdated, error) {
	event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletExecutorUpdatedIterator is returned from FilterExecutorUpdated and is used to iterate over the raw logs and unpacked data for ExecutorUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdatedIterator struct {
	Event *ValidatorWalletExecutorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletExecutorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletExecutorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletExecutorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletExecutorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletExecutorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletExecutorUpdated represents a ExecutorUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdated struct {
	Executor   common.Address
	IsExecutor bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecutorUpdated is a free log retrieval operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterExecutorUpdated(opts *bind.FilterOpts, executor []common.Address) (*ValidatorWalletExecutorUpdatedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletExecutorUpdatedIterator{contract: _ValidatorWallet.contract, event: "ExecutorUpdated", logs: logs, sub: sub}, nil
}

// WatchExecutorUpdated is a free log subscription operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchExecutorUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletExecutorUpdated, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletExecutorUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutorUpdated is a log parse operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseExecutorUpdated(log types.Log) (*ValidatorWalletExecutorUpdated, error) {
	event := new(ValidatorWalletExecutorUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ValidatorWallet contract.
type ValidatorWalletInitializedIterator struct {
	Event *ValidatorWalletInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletInitialized represents a Initialized event raised by the ValidatorWallet contract.
type ValidatorWalletInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterInitialized(opts *bind.FilterOpts) (*ValidatorWalletInitializedIterator, error) {

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletInitializedIterator{contract: _ValidatorWallet.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ValidatorWalletInitialized) (event.Subscription, error) {

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletInitialized)
				if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseInitialized(log types.Log) (*ValidatorWalletInitialized, error) {
	event := new(ValidatorWalletInitialized)
	if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferredIterator struct {
	Event *ValidatorWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletOwnershipTransferredIterator{contract: _ValidatorWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletOwnershipTransferred)
				if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletOwnershipTransferred, error) {
	event := new(ValidatorWalletOwnershipTransferred)
	if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorMetaData contains all meta data concerning the ValidatorWalletCreator contract.
var ValidatorWalletCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080806040523460b65760008054336001600160a01b031980831682178455936001600160a01b03939290919084167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a3611369818101906001600160401b0382118383101760a257908291611b918339039082f09081156096575016906001541617600155604051611ad590816100bc8239f35b604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081631cf89b4b146102d8575080636f2ddd93146102a3578063715018a61461022f57806389c716d1146101af5780638da5cb5b146101785763f2fde38b1461006557600080fd5b346101745760206003193601126101745761007e610552565b9061008761059f565b73ffffffffffffffffffffffffffffffffffffffff8092169283156100f15750506000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b5050346101ab57816003193601126101ab5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b833461022c57602060031936011261022c5773ffffffffffffffffffffffffffffffffffffffff6101de610552565b6101e661059f565b1673ffffffffffffffffffffffffffffffffffffffff1960015416176001557f6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc8180a180f35b80fd5b833461022c578060031936011261022c5761024861059f565b600073ffffffffffffffffffffffffffffffffffffffff815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101ab57816003193601126101ab5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b929190503461054e576020938460031936011261022c5767ffffffffffffffff9180358381116101745736602382011215610174578082013584811161054e5760249636888360051b8501011161054a5761076e80820190828210888311176105385790829161061f8339039085f090811561052e5773ffffffffffffffffffffffffffffffffffffffff600192818060015416911697895191610d13808401928484109084111761051c57918a8e8593608095610d8d8639835282015260608c82015289606082015203019087f0801561051257811698873b156104f15788517ff2fde38b000000000000000000000000000000000000000000000000000000008152338782015287818381838d5af18015610508576104f5575b50893b156104f157928287959396948a519788967f77a24f3600000000000000000000000000000000000000000000000000000000885260648801903390890152338389015260606044890152526084860194019286905b8282106104be5750505050508190038183895af180156104b4576104a0575b505081519081523390837f7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48863393a451908152f35b6104aa8291610575565b61022c578061046b565b84513d84823e3d90fd5b9295509280965093909335908282168092036104ec578c81879382935201960192019287959387959261044c565b600080fd5b8680fd5b61050190979197610575565b95386103f4565b8a513d8a823e3d90fd5b88513d88823e3d90fd5b8c8a60418b634e487b7160e01b835252fd5b86513d86823e3d90fd5b8987604188634e487b7160e01b835252fd5b8480fd5b8380fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104ec57565b67ffffffffffffffff811161058957604052565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff6000541633036105c057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe60808060405234605a5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361070e90816100608239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90848263204e1c7a1461050d5750508063715018a61461049c5780637eff275e146104095780638da5cb5b146103e35780639623609d146102b35783816399a88ec41461020e57508063f2fde38b146101005763f3b7dead1461007f57600080fd5b346100fc5760206003193601126100fc5782806001600160a01b0392836100a4610564565b168551907ff851a4400000000000000000000000000000000000000000000000000000000082525afa926100d6610617565b93156100f957506100f1836020808096518301019101610647565b169051908152f35b80fd5b8280fd5b50346100fc5760206003193601126100fc5761011a610564565b90610123610666565b6001600160a01b0380921692831561018b575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b929050346102af57806003193601126102af57610229610564565b61023161057f565b9061023a610666565b6001600160a01b03809116803b156102ab57859283602492865197889586947f3659cfe600000000000000000000000000000000000000000000000000000000865216908401525af19081156102a257506102925750f35b61029b90610595565b6100f95780f35b513d84823e3d90fd5b8580fd5b5050fd5b50829060606003193601126103df576102ca610564565b926102d361057f565b9160443567ffffffffffffffff81116103db57366023820112156103db5780820135916102ff836105fb565b9261030c855194856105d8565b80845260209236602483830101116103d7578188926024602093018388013785010152610337610666565b6001600160a01b0380971696873b156103d3578451957f4f1ef2860000000000000000000000000000000000000000000000000000000087521690850152826024850152815191826044860152855b8381106103bf5750505082849581606481601f19601f878b85819a860101520116810103019134905af19081156102a257506102925750f35b818101830151868201606401528201610386565b8680fd5b8780fd5b8480fd5b5080fd5b5050346103df57816003193601126103df576001600160a01b0360209254169051908152f35b5090346100fc57806003193601126100fc5782610424610564565b61042c61057f565b610434610666565b6001600160a01b0380921690813b156104985783602492865197889586947f8f28397000000000000000000000000000000000000000000000000000000000865216908401525af19081156102a2575061048c575080f35b61049590610595565b80f35b8380fd5b83346100f957806003193601126100f9576104b5610666565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b915091346103df5760206003193601126103df5781906001600160a01b039384610535610564565b167f5c60da1b0000000000000000000000000000000000000000000000000000000082525afa926100d6610617565b600435906001600160a01b038216820361057a57565b600080fd5b602435906001600160a01b038216820361057a57565b67ffffffffffffffff81116105a957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff8211176105a957604052565b67ffffffffffffffff81116105a957601f01601f191660200190565b3d15610642573d90610628826105fb565b9161063660405193846105d8565b82523d6000602084013e565b606090565b9081602091031261057a57516001600160a01b038116810361057a5790565b6001600160a01b0360005416330361067a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220da9977393a6cb166ef93710c15e38a7d298e4336826e0e59cc9b607da1321ae864736f6c63430008190033604060808152610d1380380380610015816102eb565b9283398101906060818303126102e65761002e81610326565b9160209261003d848401610326565b8584015190936001600160401b0391908282116102e657019280601f850112156102e6578351936100756100708661033a565b6102eb565b94808652878601928882840101116102e65782886100939301610355565b823b1561028c577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b03199081166001600160a01b0386811691821790935590959194600093909290917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a2805115801590610285575b6101df575b50505050507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103937f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f86865493815196818616885216958684820152a1831561018d575016179055516108e7908161042c8239f35b60849086519062461bcd60e51b82526004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8951946060860190811186821017610271578a52602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c89860152660819985a5b195960ca1b8a8601525161025d9493929183918291845af4903d15610268573d61024e6100708261033a565b90815280938a3d92013e610378565b503880808080610119565b60609250610378565b634e487b7160e01b85526041600452602485fd5b5083610114565b865162461bcd60e51b815260048101879052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761031057604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036102e657565b6001600160401b03811161031057601f01601f191660200190565b60005b8381106103685750506000910152565b8181015183820152602001610358565b919290156103da575081511561038c575090565b3b156103955790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103ed5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261041d8151809281602486015260208686019101610355565b601f01601f19168101030190fdfe60806040526004361015610019575b36610460575b610460565b6000803560e01c9081633659cfe61461006c575080634f1ef286146100675780635c60da1b146100625780638f2839701461005d5763f851a4400361000e57610367565b610246565b6101c5565b610109565b346100de5760206003193601126100de576100856100e1565b73ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014576100db906100d26103f9565b90838252610571565b80f35b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010457565b600080fd5b60406003193601126101045761011d6100e1565b60243567ffffffffffffffff9182821161010457366023830112156101045781600401359283116101045736602484840101116101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146000146100145760006020848060246101b16101ac6101c399610444565b61041e565b9682885201838701378401015261068c565b005b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460405191168152602090f35b346101045760206003193601126101045761025f6100e1565b73ffffffffffffffffffffffffffffffffffffffff907fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610391808354163314600014610014577f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f604084549281519481851686521693846020820152a181156102fd5773ffffffffffffffffffffffffffffffffffffffff1916179055005b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61039080825416331460001461001457905460405191168152602090f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761041957604052565b6103ca565b90601f19601f604051930116820182811067ffffffffffffffff82111761041957604052565b67ffffffffffffffff811161041957601f01601f191660200190565b73ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146104e1577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e156104dd573d90f35b3d90fd5b60a460405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f65740000000000000000000000000000000000000000000000000000000000006084820152fd5b803b156106225773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061061a575b610605575050565b61061791610611610727565b91610797565b50565b5060006105fd565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b803b156106225773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061071f57610605575050565b5060016105fd565b604051906060820182811067ffffffffffffffff82111761041957604052602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806107cc9493602081519101845af43d156107cf573d916107bc6101ac84610444565b9283523d6000602085013e610822565b90565b606091610822565b156107de57565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b919290156108425750815115610836575090565b6107cc903b15156107d7565b8251909150156108555750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061089a57505050601f19601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161087756fea2646970667358221220ea74f55bbd38dae667995151af9c5ddc4beac0fe35938eb181ab1ab03796f56864736f6c63430008190033a2646970667358221220fa6e94de24ab1c6e3c8cba76c1a9d91d2f4117562a94e835a96c13143a648bec64736f6c6343000819003360c08060405234602f57306080526202000060a0526113349081610035823960805181610de8015260a051815050f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063097da1f8146100fb5780630a2435f8146100f6578063193c8edd146100f15780633a7c721a146100ec578063715018a6146100e757806372f45866146100e257806377a24f36146100dd5780638da5cb5b146100d85780639ac2a011146100d35780639be7bbd2146100ce578063a158657c146100c9578063c179f1d9146100c4578063ce1d571f146100bf5763f2fde38b0361000e5761091c565b6108a4565b6107fb565b61077d565b610758565b610715565b6106ee565b6105d3565b610533565b6104bc565b6103cf565b61038c565b610277565b610144565b6001600160a01b0381160361011157565b600080fd5b9181601f840112156101115782359167ffffffffffffffff8311610111576020838186019501011161011157565b60806003193601126101115760043561015c81610100565b60243567ffffffffffffffff81116101115761017c903690600401610116565b6044929192359061018c82610100565b33600052606560205260ff6040600020541615806101e6575b6101b6576100199360643593610b14565b60246040517ff26aea8b000000000000000000000000000000000000000000000000000000008152336004820152fd5b50336001600160a01b036033541614156101a5565b9181601f840112156101115782359167ffffffffffffffff8311610111576020808501948460051b01011161011157565b60406003198201126101115767ffffffffffffffff916004358381116101115782610259916004016101fb565b9390939260243591821161011157610273916004016101fb565b9091565b34610111576102853661022c565b9061028e6111d5565b81830361036c5760005b67ffffffffffffffff8116848110156100195767ffffffffffffffff91817f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea26001600160a01b0361035661030361034e610319868d8f6103498f8f60019e6103089261030392610d3c565b610d51565b61033761031e610319878787610d3c565b610d5b565b6001600160a01b03166000526065602052604060002090565b9060ff60ff1983541691151516179055565b610d3c565b948a8a610d3c565b6040519015158152921691602090a20116610298565b5060405163088253c360e11b815260048101929092526024820152604490fd5b34610111576020600319360112610111576001600160a01b036004356103b181610100565b166000526066602052602060ff604060002054166040519015158152f35b34610111576103dd3661022c565b926103e66111d5565b8383036104985760005b8381106103f957005b8061043e61040a6001938887610d3c565b3561041481610af2565b610337610425610319858a89610d3c565b6001600160a01b03166000526066602052604060002090565b61044c610319828786610d3c565b7fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001600160a01b03610483610303858b8a610d3c565b6040519015158152921691602090a2016103f0565b505060405163088253c360e11b815260048101919091526024810191909152604490fd5b3461011157600080600319360112610530576104d66111d5565b806001600160a01b036033547fffffffffffffffffffffffff00000000000000000000000000000000000000008116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b60606003193601126101115767ffffffffffffffff600435818111610111576105609036906004016101fb565b6024929192358281116101115761057b9036906004016101fb565b9092604435908111610111576105959036906004016101fb565b93909233600052606560205260ff6040600020541615806105be575b6101b65761001995611092565b50336001600160a01b036033541614156105b1565b34610111576060600319360112610111576004356105f081610100565b6024356105fc81610100565b6044359067ffffffffffffffff8211610111576106206106629236906004016101fb565b916000549461064660ff8760081c1615809781986106e0575b81156106c0575b50610d65565b85610659600160ff196000541617600055565b6106a757610dd6565b61066857005b61067861ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6106bb61010061ff00196000541617600055565b610dd6565b303b159150816106d2575b5038610640565b6001915060ff1614386106cb565b600160ff8216109150610639565b346101115760006003193601126101115760206001600160a01b0360335416604051908152f35b34610111576020600319360112610111576001600160a01b0360043561073a81610100565b166000526065602052602060ff604060002054166040519015158152f35b346101115760206003193601126101115761001960043561077881610100565b610f9d565b346101115760406003193601126101115760243561079a81610100565b6107a26111d5565b60009081808080600435855af16107b7610c91565b50156107c1575080f35b6024906001600160a01b03604051917f7edbb498000000000000000000000000000000000000000000000000000000008352166004820152fd5b60806003193601126101115760043561081381610100565b67ffffffffffffffff602435818111610111576108349036906004016101fb565b916044358181116101115761084d9036906004016101fb565b91606435908111610111576108669036906004016101fb565b94909333600052606560205260ff60406000205416158061088f575b6101b6576100199661101a565b50336001600160a01b03603354161415610882565b60606003193601126101115760043567ffffffffffffffff8111610111576108d0903690600401610116565b906024356108dd81610100565b33600052606560205260ff604060002054161580610907575b6101b6576100199260443592610cd1565b50336001600160a01b036033541614156108f6565b346101115760206003193601126101115760043561093981610100565b6109416111d5565b6001600160a01b03811615610959576100199061122d565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b634e487b7160e01b600052601160045260246000fd5b90601f82018092116109e757565b6109c3565b919082018092116109e757565b906006820291808304600614901517156109e757565b8015610a95578080600114610a8e57600214610a88576001908161013382101682600b83101617610a8057906002815b808211610a57575050816000190481116109e7570290565b9092806000190481116109e757818416610a77575b800292811c90610a3f565b80920291610a6c565b600291500a90565b50600490565b5050600190565b50600090565b634e487b7160e01b600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff821117610ad457604052565b610a9b565b6040513d6000823e3d90fd5b919082039182116109e757565b8015150361011157565b908160209103126101115751610b1181610af2565b90565b91936001600160a01b0393610b2b92955a96610cd1565b1680610b35575050565b610bed91602091610b773692610b71610b56610b50366109d9565b60051c90565b610b71610b6b610b65836109f9565b92610a0f565b60091c90565b906109ec565b91610b87610b836111c3565b1590565b15610c2e5750610b9b6000925b5a90610ae5565b60006040518096819582947fe3db8a4900000000000000000000000000000000000000000000000000000000845233600485016040919493926001600160a01b03606083019616825260208201520152565b03925af18015610c2957610bfe5750565b610c1f9060203d602011610c22575b610c178183610ab1565b810190610afc565b50565b503d610c0d565b610ad9565b91610b9b90610b94565b15610c3f57565b606460405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152fd5b908092918237016000815290565b3d15610ccc573d9067ffffffffffffffff8211610ad45760405191610cc06020601f19601f8401160184610ab1565b82523d6000602084013e565b606090565b9060009384939282610d15575b610ce784610f9d565b826040519384928337810185815203925af1610d01610c91565b5015610d0957565b6040513d90816000823efd5b610d21843b1515610c38565b610cde565b634e487b7160e01b600052603260045260246000fd5b9190811015610d4c5760051b0190565b610d26565b35610b1181610af2565b35610b1181610100565b15610d6c57565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b9391939290926001600160a01b0393847f0000000000000000000000000000000000000000000000000000000000000000163014610f3357610e3a90610e2c60ff60005460081c16610e278161128d565b61128d565b610e353361122d565b6111a1565b610e67610e5a826001600160a01b03166000526065602052604060002090565b600160ff19825416179055565b7f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea260409460405192169180610ea181906001602083019252565b0390a260005b67ffffffffffffffff811682811015610f2b5767ffffffffffffffff91610ef8610eec61031984610ee5610e5a6104256103196001998f8d90610d3c565b878b610d3c565b6001600160a01b031690565b8651600181527fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a490602090a20116610ea7565b505050915050565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b6001600160a01b038091169081600052606660205260ff60406000205416158061100c575b610fca575050565b606492506033541690604051917f41fc6f8a00000000000000000000000000000000000000000000000000000000835260048301523360248301526044820152fd5b508060335416331415610fc2565b93610b2b936001600160a01b03969297935a98611092565b9190811015610d4c5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561011157019081359167ffffffffffffffff8311610111576020018236038113610111579190565b9294939193858203611181578082036111625760009560005b8381106110bc575050505050505050565b6110c7818588611032565b905061113e575b6110df61077861031983858b610d3c565b6110ed61031982848a610d3c565b88806110fa84878a610d3c565b359261110785898c611032565b909460409561111a875180948193610c83565b03925af1611126610c91565b501561113557506001016110ab565b513d90818a823efd5b61115d61115861115261031984868c610d3c565b3b151590565b610c38565b6110ce565b60405163088253c360e11b815260048101929092526024820152604490fd5b60405163088253c360e11b81526004810183905260248101879052604490fd5b6111a96111d5565b6001600160a01b03811615610959576111c19061122d565b565b323314806111ce5790565b50333b1590565b6001600160a01b036033541633036111e957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b1561129457565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fdfea2646970667358221220c863072aa25644cbe1600ee796e94e2ff097b9576c45a57d90367129a8c57a4564736f6c63430008190033",
}

// ValidatorWalletCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletCreatorMetaData.ABI instead.
var ValidatorWalletCreatorABI = ValidatorWalletCreatorMetaData.ABI

// ValidatorWalletCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletCreatorMetaData.Bin instead.
var ValidatorWalletCreatorBin = ValidatorWalletCreatorMetaData.Bin

// DeployValidatorWalletCreator deploys a new Ethereum contract, binding an instance of ValidatorWalletCreator to it.
func DeployValidatorWalletCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWalletCreator, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// ValidatorWalletCreator is an auto generated Go binding around an Ethereum contract.
type ValidatorWalletCreator struct {
	ValidatorWalletCreatorCaller     // Read-only binding to the contract
	ValidatorWalletCreatorTransactor // Write-only binding to the contract
	ValidatorWalletCreatorFilterer   // Log filterer for contract events
}

// ValidatorWalletCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletCreatorSession struct {
	Contract     *ValidatorWalletCreator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCreatorCallerSession struct {
	Contract *ValidatorWalletCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorWalletCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletCreatorTransactorSession struct {
	Contract     *ValidatorWalletCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletCreatorRaw struct {
	Contract *ValidatorWalletCreator // Generic contract binding to access the raw methods on
}

// ValidatorWalletCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCallerRaw struct {
	Contract *ValidatorWalletCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactorRaw struct {
	Contract *ValidatorWalletCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWalletCreator creates a new instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreator(address common.Address, backend bind.ContractBackend) (*ValidatorWalletCreator, error) {
	contract, err := bindValidatorWalletCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// NewValidatorWalletCreatorCaller creates a new read-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCreatorCaller, error) {
	contract, err := bindValidatorWalletCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorCaller{contract: contract}, nil
}

// NewValidatorWalletCreatorTransactor creates a new write-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletCreatorTransactor, error) {
	contract, err := bindValidatorWalletCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTransactor{contract: contract}, nil
}

// NewValidatorWalletCreatorFilterer creates a new log filterer instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletCreatorFilterer, error) {
	contract, err := bindValidatorWalletCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorFilterer{contract: contract}, nil
}

// bindValidatorWalletCreator binds a generic wrapper to an already deployed contract.
func bindValidatorWalletCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Template(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "template")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) CreateWallet(opts *bind.TransactOpts, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "createWallet", initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) SetTemplate(opts *bind.TransactOpts, _template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "setTemplate", _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// ValidatorWalletCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferredIterator struct {
	Event *ValidatorWalletCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorOwnershipTransferredIterator{contract: _ValidatorWalletCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorOwnershipTransferred)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletCreatorOwnershipTransferred, error) {
	event := new(ValidatorWalletCreatorOwnershipTransferred)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorTemplateUpdatedIterator is returned from FilterTemplateUpdated and is used to iterate over the raw logs and unpacked data for TemplateUpdated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdatedIterator struct {
	Event *ValidatorWalletCreatorTemplateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorTemplateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorTemplateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorTemplateUpdated represents a TemplateUpdated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplateUpdated is a free log retrieval operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterTemplateUpdated(opts *bind.FilterOpts) (*ValidatorWalletCreatorTemplateUpdatedIterator, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTemplateUpdatedIterator{contract: _ValidatorWalletCreator.contract, event: "TemplateUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplateUpdated is a free log subscription operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchTemplateUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorTemplateUpdated) (event.Subscription, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorTemplateUpdated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplateUpdated is a log parse operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseTemplateUpdated(log types.Log) (*ValidatorWalletCreatorTemplateUpdated, error) {
	event := new(ValidatorWalletCreatorTemplateUpdated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorWalletCreatedIterator is returned from FilterWalletCreated and is used to iterate over the raw logs and unpacked data for WalletCreated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreatedIterator struct {
	Event *ValidatorWalletCreatorWalletCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorWalletCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorWalletCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorWalletCreated represents a WalletCreated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreated struct {
	WalletAddress   common.Address
	ExecutorAddress common.Address
	OwnerAddress    common.Address
	AdminProxy      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWalletCreated is a free log retrieval operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterWalletCreated(opts *bind.FilterOpts, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (*ValidatorWalletCreatorWalletCreatedIterator, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorWalletCreatedIterator{contract: _ValidatorWalletCreator.contract, event: "WalletCreated", logs: logs, sub: sub}, nil
}

// WatchWalletCreated is a free log subscription operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchWalletCreated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorWalletCreated, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (event.Subscription, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorWalletCreated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletCreated is a log parse operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseWalletCreated(log types.Log) (*ValidatorWalletCreatorWalletCreated, error) {
	event := new(ValidatorWalletCreatorWalletCreated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
